/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.lsuc.lsuc;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.sql.Date;
import java.util.List;
import java.util.Objects;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;

import org.hibernate.envers.Audited;

/**
 * Licensee generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`LICENSEE`", uniqueConstraints = {
        @UniqueConstraint(columnNames = {"`PERSON_FK`", "`LICENCE_TYPE_FK`"}),
        @UniqueConstraint(columnNames = {"`LICENSEE_NUMBER`"})})
public class Licensee implements Serializable {

    private Integer pk;
    private Integer personFk;
    private Integer licenceTypeFk;
    private String licenseeNumber;
    private Date licenseDate;
    private Date reAdmissionDate;
    private Date appointedToQcDate;
    private Character hasAuthorizedToReleaseContactInfo;
    private Character isInDiscipline;
    private Character hasInsurance;
    private Integer geographicAreaFk;
    private Integer admissionRouteFk;
    private Integer citizenshipFk;
    private Short suspensionPeriod;
    private String barCode;
    private String archiveBoxNumber;
    private String numberOfFileFolders;
    private Integer fileLocationFk;
    private Character useAlternateZonesForReferral;
    private Integer referralStatusFk;
    private Integer legacyClassStatusFk;
    private Character isLegacyClassStatusException;
    private Integer feeCategoryFk;
    private Character isExemptFromCpd;
    private List<LicenseeclasspracticegroupApprovals> licenseeclasspracticegroupApprovalses;
    private List<Licenseephotoidcard> licenseephotoidcardsForLicenseeFkCertified;
    private List<Licenseephotoidcard> licenseephotoidcardsForLicenseeFk;
    private Paralegal paralegal;
    private List<Licenseepersonlanguagepurpose> licenseepersonlanguagepurposes;
    private List<Licenseeinsurance> licenseeinsurances;
    private Admissionroute admissionroute;
    private Citizenship citizenship;
    private Feecategory feecategory;
    private Geographicarea geographicarea;
    private Legacyclassstatus legacyclassstatus;
    private Licencetype licencetype;
    private Person person;
    private Lawyer lawyer;
    private List<Licenseeclasspracticegroup> licenseeclasspracticegroups;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`PK`", nullable = false, scale = 0, precision = 10)
    public Integer getPk() {
        return this.pk;
    }

    public void setPk(Integer pk) {
        this.pk = pk;
    }

    @Column(name = "`PERSON_FK`", nullable = true, scale = 0, precision = 10)
    public Integer getPersonFk() {
        return this.personFk;
    }

    public void setPersonFk(Integer personFk) {
        this.personFk = personFk;
    }

    @Column(name = "`LICENCE_TYPE_FK`", nullable = true, scale = 0, precision = 10)
    public Integer getLicenceTypeFk() {
        return this.licenceTypeFk;
    }

    public void setLicenceTypeFk(Integer licenceTypeFk) {
        this.licenceTypeFk = licenceTypeFk;
    }

    @Audited
    @Column(name = "`LICENSEE_NUMBER`", nullable = true, length = 20)
    public String getLicenseeNumber() {
        return this.licenseeNumber;
    }

    public void setLicenseeNumber(String licenseeNumber) {
        this.licenseeNumber = licenseeNumber;
    }

    @Audited
    @Column(name = "`LICENSE_DATE`", nullable = true)
    public Date getLicenseDate() {
        return this.licenseDate;
    }

    public void setLicenseDate(Date licenseDate) {
        this.licenseDate = licenseDate;
    }

    @Column(name = "`RE_ADMISSION_DATE_`", nullable = true)
    public Date getReAdmissionDate() {
        return this.reAdmissionDate;
    }

    public void setReAdmissionDate(Date reAdmissionDate) {
        this.reAdmissionDate = reAdmissionDate;
    }

    @Column(name = "`APPOINTED_TO_QC_DATE_`", nullable = true)
    public Date getAppointedToQcDate() {
        return this.appointedToQcDate;
    }

    public void setAppointedToQcDate(Date appointedToQcDate) {
        this.appointedToQcDate = appointedToQcDate;
    }

    @Column(name = "`HAS_AUTHORIZED_TO_RELEASE_CONTACT_INFO`", nullable = true, length = 1)
    public Character getHasAuthorizedToReleaseContactInfo() {
        return this.hasAuthorizedToReleaseContactInfo;
    }

    public void setHasAuthorizedToReleaseContactInfo(Character hasAuthorizedToReleaseContactInfo) {
        this.hasAuthorizedToReleaseContactInfo = hasAuthorizedToReleaseContactInfo;
    }

    @Column(name = "`IS_IN_DISCIPLINE_`", nullable = true, length = 1)
    public Character getIsInDiscipline() {
        return this.isInDiscipline;
    }

    public void setIsInDiscipline(Character isInDiscipline) {
        this.isInDiscipline = isInDiscipline;
    }

    @Column(name = "`HAS_INSURANCE_`", nullable = true, length = 1)
    public Character getHasInsurance() {
        return this.hasInsurance;
    }

    public void setHasInsurance(Character hasInsurance) {
        this.hasInsurance = hasInsurance;
    }

    @Column(name = "`GEOGRAPHIC_AREA_FK`", nullable = true, scale = 0, precision = 10)
    public Integer getGeographicAreaFk() {
        return this.geographicAreaFk;
    }

    public void setGeographicAreaFk(Integer geographicAreaFk) {
        this.geographicAreaFk = geographicAreaFk;
    }

    @Column(name = "`ADMISSION_ROUTE_FK`", nullable = true, scale = 0, precision = 10)
    public Integer getAdmissionRouteFk() {
        return this.admissionRouteFk;
    }

    public void setAdmissionRouteFk(Integer admissionRouteFk) {
        this.admissionRouteFk = admissionRouteFk;
    }

    @Column(name = "`CITIZENSHIP_FK_`", nullable = true, scale = 0, precision = 10)
    public Integer getCitizenshipFk() {
        return this.citizenshipFk;
    }

    public void setCitizenshipFk(Integer citizenshipFk) {
        this.citizenshipFk = citizenshipFk;
    }

    @Column(name = "`SUSPENSION_PERIOD_`", nullable = true, scale = 0, precision = 5)
    public Short getSuspensionPeriod() {
        return this.suspensionPeriod;
    }

    public void setSuspensionPeriod(Short suspensionPeriod) {
        this.suspensionPeriod = suspensionPeriod;
    }

    @Column(name = "`BAR_CODE`", nullable = true, length = 20)
    public String getBarCode() {
        return this.barCode;
    }

    public void setBarCode(String barCode) {
        this.barCode = barCode;
    }

    @Column(name = "`ARCHIVE_BOX_NUMBER`", nullable = true, length = 50)
    public String getArchiveBoxNumber() {
        return this.archiveBoxNumber;
    }

    public void setArchiveBoxNumber(String archiveBoxNumber) {
        this.archiveBoxNumber = archiveBoxNumber;
    }

    @Column(name = "`NUMBER_OF_FILE_FOLDERS`", nullable = true, length = 50)
    public String getNumberOfFileFolders() {
        return this.numberOfFileFolders;
    }

    public void setNumberOfFileFolders(String numberOfFileFolders) {
        this.numberOfFileFolders = numberOfFileFolders;
    }

    @Column(name = "`FILE_LOCATION_FK`", nullable = true, scale = 0, precision = 10)
    public Integer getFileLocationFk() {
        return this.fileLocationFk;
    }

    public void setFileLocationFk(Integer fileLocationFk) {
        this.fileLocationFk = fileLocationFk;
    }

    @Column(name = "`USE_ALTERNATE_ZONES_FOR_REFERRAL`", nullable = true, length = 1)
    public Character getUseAlternateZonesForReferral() {
        return this.useAlternateZonesForReferral;
    }

    public void setUseAlternateZonesForReferral(Character useAlternateZonesForReferral) {
        this.useAlternateZonesForReferral = useAlternateZonesForReferral;
    }

    @Column(name = "`REFERRAL_STATUS_FK`", nullable = true, scale = 0, precision = 10)
    public Integer getReferralStatusFk() {
        return this.referralStatusFk;
    }

    public void setReferralStatusFk(Integer referralStatusFk) {
        this.referralStatusFk = referralStatusFk;
    }

    @Column(name = "`LEGACY_CLASS_STATUS_FK`", nullable = true, scale = 0, precision = 10)
    public Integer getLegacyClassStatusFk() {
        return this.legacyClassStatusFk;
    }

    public void setLegacyClassStatusFk(Integer legacyClassStatusFk) {
        this.legacyClassStatusFk = legacyClassStatusFk;
    }

    @Column(name = "`IS_LEGACY_CLASS_STATUS_EXCEPTION`", nullable = true, length = 1)
    public Character getIsLegacyClassStatusException() {
        return this.isLegacyClassStatusException;
    }

    public void setIsLegacyClassStatusException(Character isLegacyClassStatusException) {
        this.isLegacyClassStatusException = isLegacyClassStatusException;
    }

    @Column(name = "`FEE_CATEGORY_FK`", nullable = true, scale = 0, precision = 10)
    public Integer getFeeCategoryFk() {
        return this.feeCategoryFk;
    }

    public void setFeeCategoryFk(Integer feeCategoryFk) {
        this.feeCategoryFk = feeCategoryFk;
    }

    @Column(name = "`IS_EXEMPT_FROM_CPD`", nullable = true, length = 1)
    public Character getIsExemptFromCpd() {
        return this.isExemptFromCpd;
    }

    public void setIsExemptFromCpd(Character isExemptFromCpd) {
        this.isExemptFromCpd = isExemptFromCpd;
    }

    @JsonInclude(Include.NON_EMPTY)
    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.REMOVE, mappedBy = "licensee")
    public List<LicenseeclasspracticegroupApprovals> getLicenseeclasspracticegroupApprovalses() {
        return this.licenseeclasspracticegroupApprovalses;
    }

    public void setLicenseeclasspracticegroupApprovalses(List<LicenseeclasspracticegroupApprovals> licenseeclasspracticegroupApprovalses) {
        this.licenseeclasspracticegroupApprovalses = licenseeclasspracticegroupApprovalses;
    }

    @JsonInclude(Include.NON_EMPTY)
    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.REMOVE, mappedBy = "licenseeByLicenseeFkCertified")
    public List<Licenseephotoidcard> getLicenseephotoidcardsForLicenseeFkCertified() {
        return this.licenseephotoidcardsForLicenseeFkCertified;
    }

    public void setLicenseephotoidcardsForLicenseeFkCertified(List<Licenseephotoidcard> licenseephotoidcardsForLicenseeFkCertified) {
        this.licenseephotoidcardsForLicenseeFkCertified = licenseephotoidcardsForLicenseeFkCertified;
    }

    @JsonInclude(Include.NON_EMPTY)
    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.REMOVE, mappedBy = "licenseeByLicenseeFk")
    public List<Licenseephotoidcard> getLicenseephotoidcardsForLicenseeFk() {
        return this.licenseephotoidcardsForLicenseeFk;
    }

    public void setLicenseephotoidcardsForLicenseeFk(List<Licenseephotoidcard> licenseephotoidcardsForLicenseeFk) {
        this.licenseephotoidcardsForLicenseeFk = licenseephotoidcardsForLicenseeFk;
    }

    @OneToOne(fetch = FetchType.EAGER, cascade = CascadeType.REMOVE, mappedBy = "licensee")
    public Paralegal getParalegal() {
        return this.paralegal;
    }

    public void setParalegal(Paralegal paralegal) {
        this.paralegal = paralegal;
    }

    @JsonInclude(Include.NON_EMPTY)
    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.REMOVE, mappedBy = "licensee")
    public List<Licenseepersonlanguagepurpose> getLicenseepersonlanguagepurposes() {
        return this.licenseepersonlanguagepurposes;
    }

    public void setLicenseepersonlanguagepurposes(List<Licenseepersonlanguagepurpose> licenseepersonlanguagepurposes) {
        this.licenseepersonlanguagepurposes = licenseepersonlanguagepurposes;
    }

    @JsonInclude(Include.NON_EMPTY)
    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.REMOVE, mappedBy = "licensee")
    public List<Licenseeinsurance> getLicenseeinsurances() {
        return this.licenseeinsurances;
    }

    public void setLicenseeinsurances(List<Licenseeinsurance> licenseeinsurances) {
        this.licenseeinsurances = licenseeinsurances;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`ADMISSION_ROUTE_FK`", referencedColumnName = "`PK`", insertable = false, updatable = false)
    public Admissionroute getAdmissionroute() {
        return this.admissionroute;
    }

    public void setAdmissionroute(Admissionroute admissionroute) {
        if(admissionroute != null) {
            this.admissionRouteFk = admissionroute.getPk();
        }

        this.admissionroute = admissionroute;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`CITIZENSHIP_FK_`", referencedColumnName = "`PK`", insertable = false, updatable = false)
    public Citizenship getCitizenship() {
        return this.citizenship;
    }

    public void setCitizenship(Citizenship citizenship) {
        if(citizenship != null) {
            this.citizenshipFk = citizenship.getPk();
        }

        this.citizenship = citizenship;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`FEE_CATEGORY_FK`", referencedColumnName = "`PK`", insertable = false, updatable = false)
    public Feecategory getFeecategory() {
        return this.feecategory;
    }

    public void setFeecategory(Feecategory feecategory) {
        if(feecategory != null) {
            this.feeCategoryFk = feecategory.getPk();
        }

        this.feecategory = feecategory;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`GEOGRAPHIC_AREA_FK`", referencedColumnName = "`PK`", insertable = false, updatable = false)
    public Geographicarea getGeographicarea() {
        return this.geographicarea;
    }

    public void setGeographicarea(Geographicarea geographicarea) {
        if(geographicarea != null) {
            this.geographicAreaFk = geographicarea.getPk();
        }

        this.geographicarea = geographicarea;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`LEGACY_CLASS_STATUS_FK`", referencedColumnName = "`PK`", insertable = false, updatable = false)
    public Legacyclassstatus getLegacyclassstatus() {
        return this.legacyclassstatus;
    }

    public void setLegacyclassstatus(Legacyclassstatus legacyclassstatus) {
        if(legacyclassstatus != null) {
            this.legacyClassStatusFk = legacyclassstatus.getPk();
        }

        this.legacyclassstatus = legacyclassstatus;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`LICENCE_TYPE_FK`", referencedColumnName = "`PK`", insertable = false, updatable = false)
    public Licencetype getLicencetype() {
        return this.licencetype;
    }

    public void setLicencetype(Licencetype licencetype) {
        if(licencetype != null) {
            this.licenceTypeFk = licencetype.getPk();
        }

        this.licencetype = licencetype;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`PERSON_FK`", referencedColumnName = "`PK`", insertable = false, updatable = false)
    public Person getPerson() {
        return this.person;
    }

    public void setPerson(Person person) {
        if(person != null) {
            this.personFk = person.getPk();
        }

        this.person = person;
    }

    @OneToOne(fetch = FetchType.EAGER, cascade = CascadeType.REMOVE, mappedBy = "licensee")
    public Lawyer getLawyer() {
        return this.lawyer;
    }

    public void setLawyer(Lawyer lawyer) {
        this.lawyer = lawyer;
    }

    @JsonInclude(Include.NON_EMPTY)
    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.REMOVE, mappedBy = "licensee")
    public List<Licenseeclasspracticegroup> getLicenseeclasspracticegroups() {
        return this.licenseeclasspracticegroups;
    }

    public void setLicenseeclasspracticegroups(List<Licenseeclasspracticegroup> licenseeclasspracticegroups) {
        this.licenseeclasspracticegroups = licenseeclasspracticegroups;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Licensee)) return false;
        final Licensee licensee = (Licensee) o;
        return Objects.equals(getPk(), licensee.getPk());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getPk());
    }
}

