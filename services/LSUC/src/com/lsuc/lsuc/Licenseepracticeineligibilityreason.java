/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.lsuc.lsuc;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.sql.Date;
import java.util.List;
import java.util.Objects;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;

/**
 * Licenseepracticeineligibilityreason generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`LICENSEEPRACTICEINELIGIBILITYREASON`", uniqueConstraints = {
        @UniqueConstraint(columnNames = {"`LICENSEE_CLASS_PRACTICE_GROUP_FK`", "`PRACTICE_INELIGIBILITY_REASON`", "`EFFECTIVE_FROM_DATE`", "`EFFECTIVE_TO_DATE`"})})
public class Licenseepracticeineligibilityreason implements Serializable {

    private Integer pk;
    private Integer licenseeClassPracticeGroupFk;
    private Integer practiceIneligibilityReason;
    private Date effectiveFromDate;
    private Date effectiveToDate;
    private List<Licenseepracticeineligibilitysubreason> licenseepracticeineligibilitysubreasons;
    private Licenseeclasspracticegroup licenseeclasspracticegroup;
    private Practiceinelgibilityreason practiceinelgibilityreason;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`PK`", nullable = false, scale = 0, precision = 10)
    public Integer getPk() {
        return this.pk;
    }

    public void setPk(Integer pk) {
        this.pk = pk;
    }

    @Column(name = "`LICENSEE_CLASS_PRACTICE_GROUP_FK`", nullable = true, scale = 0, precision = 10)
    public Integer getLicenseeClassPracticeGroupFk() {
        return this.licenseeClassPracticeGroupFk;
    }

    public void setLicenseeClassPracticeGroupFk(Integer licenseeClassPracticeGroupFk) {
        this.licenseeClassPracticeGroupFk = licenseeClassPracticeGroupFk;
    }

    @Column(name = "`PRACTICE_INELIGIBILITY_REASON`", nullable = true, scale = 0, precision = 10)
    public Integer getPracticeIneligibilityReason() {
        return this.practiceIneligibilityReason;
    }

    public void setPracticeIneligibilityReason(Integer practiceIneligibilityReason) {
        this.practiceIneligibilityReason = practiceIneligibilityReason;
    }

    @Column(name = "`EFFECTIVE_FROM_DATE`", nullable = true)
    public Date getEffectiveFromDate() {
        return this.effectiveFromDate;
    }

    public void setEffectiveFromDate(Date effectiveFromDate) {
        this.effectiveFromDate = effectiveFromDate;
    }

    @Column(name = "`EFFECTIVE_TO_DATE`", nullable = true)
    public Date getEffectiveToDate() {
        return this.effectiveToDate;
    }

    public void setEffectiveToDate(Date effectiveToDate) {
        this.effectiveToDate = effectiveToDate;
    }

    @JsonInclude(Include.NON_EMPTY)
    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.REMOVE, mappedBy = "licenseepracticeineligibilityreason")
    public List<Licenseepracticeineligibilitysubreason> getLicenseepracticeineligibilitysubreasons() {
        return this.licenseepracticeineligibilitysubreasons;
    }

    public void setLicenseepracticeineligibilitysubreasons(List<Licenseepracticeineligibilitysubreason> licenseepracticeineligibilitysubreasons) {
        this.licenseepracticeineligibilitysubreasons = licenseepracticeineligibilitysubreasons;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`LICENSEE_CLASS_PRACTICE_GROUP_FK`", referencedColumnName = "`PK`", insertable = false, updatable = false)
    public Licenseeclasspracticegroup getLicenseeclasspracticegroup() {
        return this.licenseeclasspracticegroup;
    }

    public void setLicenseeclasspracticegroup(Licenseeclasspracticegroup licenseeclasspracticegroup) {
        if(licenseeclasspracticegroup != null) {
            this.licenseeClassPracticeGroupFk = licenseeclasspracticegroup.getPk();
        }

        this.licenseeclasspracticegroup = licenseeclasspracticegroup;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`PRACTICE_INELIGIBILITY_REASON`", referencedColumnName = "`PK`", insertable = false, updatable = false)
    public Practiceinelgibilityreason getPracticeinelgibilityreason() {
        return this.practiceinelgibilityreason;
    }

    public void setPracticeinelgibilityreason(Practiceinelgibilityreason practiceinelgibilityreason) {
        if(practiceinelgibilityreason != null) {
            this.practiceIneligibilityReason = practiceinelgibilityreason.getPk();
        }

        this.practiceinelgibilityreason = practiceinelgibilityreason;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Licenseepracticeineligibilityreason)) return false;
        final Licenseepracticeineligibilityreason licenseepracticeineligibilityreason = (Licenseepracticeineligibilityreason) o;
        return Objects.equals(getPk(), licenseepracticeineligibilityreason.getPk());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getPk());
    }
}

