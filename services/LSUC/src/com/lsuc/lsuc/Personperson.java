/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.lsuc.lsuc;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

/**
 * Personperson generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`PERSONPERSON`", uniqueConstraints = {
        @UniqueConstraint(columnNames = {"`PERSON_FK_PARENT`", "`PERSON_FK_CHILD`"})})
public class Personperson implements Serializable {

    private Integer pk;
    private Integer personFkParent;
    private Integer personFkChild;
    private Integer personRelationshipTypeFk;
    private Person personByPersonFkParent;
    private Person personByPersonFkChild;
    private Personrelationshiptype personrelationshiptype;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`PK`", nullable = false, scale = 0, precision = 10)
    public Integer getPk() {
        return this.pk;
    }

    public void setPk(Integer pk) {
        this.pk = pk;
    }

    @Column(name = "`PERSON_FK_PARENT`", nullable = true, scale = 0, precision = 10)
    public Integer getPersonFkParent() {
        return this.personFkParent;
    }

    public void setPersonFkParent(Integer personFkParent) {
        this.personFkParent = personFkParent;
    }

    @Column(name = "`PERSON_FK_CHILD`", nullable = true, scale = 0, precision = 10)
    public Integer getPersonFkChild() {
        return this.personFkChild;
    }

    public void setPersonFkChild(Integer personFkChild) {
        this.personFkChild = personFkChild;
    }

    @Column(name = "`PERSON_RELATIONSHIP_TYPE_FK`", nullable = true, scale = 0, precision = 10)
    public Integer getPersonRelationshipTypeFk() {
        return this.personRelationshipTypeFk;
    }

    public void setPersonRelationshipTypeFk(Integer personRelationshipTypeFk) {
        this.personRelationshipTypeFk = personRelationshipTypeFk;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`PERSON_FK_PARENT`", referencedColumnName = "`PK`", insertable = false, updatable = false)
    public Person getPersonByPersonFkParent() {
        return this.personByPersonFkParent;
    }

    public void setPersonByPersonFkParent(Person personByPersonFkParent) {
        if(personByPersonFkParent != null) {
            this.personFkParent = personByPersonFkParent.getPk();
        }

        this.personByPersonFkParent = personByPersonFkParent;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`PERSON_FK_CHILD`", referencedColumnName = "`PK`", insertable = false, updatable = false)
    public Person getPersonByPersonFkChild() {
        return this.personByPersonFkChild;
    }

    public void setPersonByPersonFkChild(Person personByPersonFkChild) {
        if(personByPersonFkChild != null) {
            this.personFkChild = personByPersonFkChild.getPk();
        }

        this.personByPersonFkChild = personByPersonFkChild;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`PERSON_RELATIONSHIP_TYPE_FK`", referencedColumnName = "`PK`", insertable = false, updatable = false)
    public Personrelationshiptype getPersonrelationshiptype() {
        return this.personrelationshiptype;
    }

    public void setPersonrelationshiptype(Personrelationshiptype personrelationshiptype) {
        if(personrelationshiptype != null) {
            this.personRelationshipTypeFk = personrelationshiptype.getPk();
        }

        this.personrelationshiptype = personrelationshiptype;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Personperson)) return false;
        final Personperson personperson = (Personperson) o;
        return Objects.equals(getPk(), personperson.getPk());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getPk());
    }
}

