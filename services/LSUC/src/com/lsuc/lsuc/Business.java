/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.lsuc.lsuc;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.util.List;
import java.util.Objects;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;

/**
 * Business generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`BUSINESS`", uniqueConstraints = {
        @UniqueConstraint(columnNames = {"`BUSINESS_NUMBER`"})})
public class Business implements Serializable {

    private Integer pk;
    private String businessNumber;
    private String businessName;
    private Integer numberOfEmployees;
    private Character isActive;
    private Character isBusinessNameSameAsOwner;
    private Integer businessLegalTypeFk;
    private Integer businessTypeFk;
    private Integer businessStatusFk;
    private String alsoKnownAs;
    private List<Businesssocialmediacontact> businesssocialmediacontacts;
    private Businesslegaltype businesslegaltype;
    private Businessstatus businessstatus;
    private Businesstype businesstype;
    private List<Businessbusiness> businessbusinessesForBusinessFkParent;
    private List<Businessbusiness> businessbusinessesForBusinessFkChild;
    private List<Businessphonecontact> businessphonecontacts;
    private List<Businessaddress> businessaddresses;
    private List<Businessperson> businesspersons;
    private List<Organizationalunit> organizationalunits;
    private List<Businessemailcontact> businessemailcontacts;
    private List<Licenseeinsurancepolicy> licenseeinsurancepoliciesForBusinessFkInsuranceCompany;
    private List<Licenseeinsurancepolicy> licenseeinsurancepoliciesForBusinessFkInsuranceBroker;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`PK`", nullable = false, scale = 0, precision = 10)
    public Integer getPk() {
        return this.pk;
    }

    public void setPk(Integer pk) {
        this.pk = pk;
    }

    @Column(name = "`BUSINESS_NUMBER`", nullable = true, length = 10)
    public String getBusinessNumber() {
        return this.businessNumber;
    }

    public void setBusinessNumber(String businessNumber) {
        this.businessNumber = businessNumber;
    }

    @Column(name = "`BUSINESS_NAME`", nullable = true, length = 100)
    public String getBusinessName() {
        return this.businessName;
    }

    public void setBusinessName(String businessName) {
        this.businessName = businessName;
    }

    @Column(name = "`NUMBER_OF_EMPLOYEES_`", nullable = true, scale = 0, precision = 10)
    public Integer getNumberOfEmployees() {
        return this.numberOfEmployees;
    }

    public void setNumberOfEmployees(Integer numberOfEmployees) {
        this.numberOfEmployees = numberOfEmployees;
    }

    @Column(name = "`IS_ACTIVE`", nullable = true, length = 1)
    public Character getIsActive() {
        return this.isActive;
    }

    public void setIsActive(Character isActive) {
        this.isActive = isActive;
    }

    @Column(name = "`IS_BUSINESS_NAME_SAME_AS_OWNER`", nullable = true, length = 1)
    public Character getIsBusinessNameSameAsOwner() {
        return this.isBusinessNameSameAsOwner;
    }

    public void setIsBusinessNameSameAsOwner(Character isBusinessNameSameAsOwner) {
        this.isBusinessNameSameAsOwner = isBusinessNameSameAsOwner;
    }

    @Column(name = "`BUSINESS_LEGAL_TYPE_FK`", nullable = true, scale = 0, precision = 10)
    public Integer getBusinessLegalTypeFk() {
        return this.businessLegalTypeFk;
    }

    public void setBusinessLegalTypeFk(Integer businessLegalTypeFk) {
        this.businessLegalTypeFk = businessLegalTypeFk;
    }

    @Column(name = "`BUSINESS_TYPE_FK`", nullable = true, scale = 0, precision = 10)
    public Integer getBusinessTypeFk() {
        return this.businessTypeFk;
    }

    public void setBusinessTypeFk(Integer businessTypeFk) {
        this.businessTypeFk = businessTypeFk;
    }

    @Column(name = "`BUSINESS_STATUS_FK_`", nullable = true, scale = 0, precision = 10)
    public Integer getBusinessStatusFk() {
        return this.businessStatusFk;
    }

    public void setBusinessStatusFk(Integer businessStatusFk) {
        this.businessStatusFk = businessStatusFk;
    }

    @Column(name = "`ALSO_KNOWN_AS`", nullable = true, length = 100)
    public String getAlsoKnownAs() {
        return this.alsoKnownAs;
    }

    public void setAlsoKnownAs(String alsoKnownAs) {
        this.alsoKnownAs = alsoKnownAs;
    }

    @JsonInclude(Include.NON_EMPTY)
    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.REMOVE, mappedBy = "business")
    public List<Businesssocialmediacontact> getBusinesssocialmediacontacts() {
        return this.businesssocialmediacontacts;
    }

    public void setBusinesssocialmediacontacts(List<Businesssocialmediacontact> businesssocialmediacontacts) {
        this.businesssocialmediacontacts = businesssocialmediacontacts;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`BUSINESS_LEGAL_TYPE_FK`", referencedColumnName = "`PK`", insertable = false, updatable = false)
    public Businesslegaltype getBusinesslegaltype() {
        return this.businesslegaltype;
    }

    public void setBusinesslegaltype(Businesslegaltype businesslegaltype) {
        if(businesslegaltype != null) {
            this.businessLegalTypeFk = businesslegaltype.getPk();
        }

        this.businesslegaltype = businesslegaltype;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`BUSINESS_STATUS_FK_`", referencedColumnName = "`PK`", insertable = false, updatable = false)
    public Businessstatus getBusinessstatus() {
        return this.businessstatus;
    }

    public void setBusinessstatus(Businessstatus businessstatus) {
        if(businessstatus != null) {
            this.businessStatusFk = businessstatus.getPk();
        }

        this.businessstatus = businessstatus;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`BUSINESS_TYPE_FK`", referencedColumnName = "`PK`", insertable = false, updatable = false)
    public Businesstype getBusinesstype() {
        return this.businesstype;
    }

    public void setBusinesstype(Businesstype businesstype) {
        if(businesstype != null) {
            this.businessTypeFk = businesstype.getPk();
        }

        this.businesstype = businesstype;
    }

    @JsonInclude(Include.NON_EMPTY)
    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.REMOVE, mappedBy = "businessByBusinessFkParent")
    public List<Businessbusiness> getBusinessbusinessesForBusinessFkParent() {
        return this.businessbusinessesForBusinessFkParent;
    }

    public void setBusinessbusinessesForBusinessFkParent(List<Businessbusiness> businessbusinessesForBusinessFkParent) {
        this.businessbusinessesForBusinessFkParent = businessbusinessesForBusinessFkParent;
    }

    @JsonInclude(Include.NON_EMPTY)
    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.REMOVE, mappedBy = "businessByBusinessFkChild")
    public List<Businessbusiness> getBusinessbusinessesForBusinessFkChild() {
        return this.businessbusinessesForBusinessFkChild;
    }

    public void setBusinessbusinessesForBusinessFkChild(List<Businessbusiness> businessbusinessesForBusinessFkChild) {
        this.businessbusinessesForBusinessFkChild = businessbusinessesForBusinessFkChild;
    }

    @JsonInclude(Include.NON_EMPTY)
    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.REMOVE, mappedBy = "business")
    public List<Businessphonecontact> getBusinessphonecontacts() {
        return this.businessphonecontacts;
    }

    public void setBusinessphonecontacts(List<Businessphonecontact> businessphonecontacts) {
        this.businessphonecontacts = businessphonecontacts;
    }

    @JsonInclude(Include.NON_EMPTY)
    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.REMOVE, mappedBy = "business")
    public List<Businessaddress> getBusinessaddresses() {
        return this.businessaddresses;
    }

    public void setBusinessaddresses(List<Businessaddress> businessaddresses) {
        this.businessaddresses = businessaddresses;
    }

    @JsonInclude(Include.NON_EMPTY)
    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.REMOVE, mappedBy = "business")
    public List<Businessperson> getBusinesspersons() {
        return this.businesspersons;
    }

    public void setBusinesspersons(List<Businessperson> businesspersons) {
        this.businesspersons = businesspersons;
    }

    @JsonInclude(Include.NON_EMPTY)
    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.REMOVE, mappedBy = "business")
    public List<Organizationalunit> getOrganizationalunits() {
        return this.organizationalunits;
    }

    public void setOrganizationalunits(List<Organizationalunit> organizationalunits) {
        this.organizationalunits = organizationalunits;
    }

    @JsonInclude(Include.NON_EMPTY)
    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.REMOVE, mappedBy = "business")
    public List<Businessemailcontact> getBusinessemailcontacts() {
        return this.businessemailcontacts;
    }

    public void setBusinessemailcontacts(List<Businessemailcontact> businessemailcontacts) {
        this.businessemailcontacts = businessemailcontacts;
    }

    @JsonInclude(Include.NON_EMPTY)
    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.REMOVE, mappedBy = "businessByBusinessFkInsuranceCompany")
    public List<Licenseeinsurancepolicy> getLicenseeinsurancepoliciesForBusinessFkInsuranceCompany() {
        return this.licenseeinsurancepoliciesForBusinessFkInsuranceCompany;
    }

    public void setLicenseeinsurancepoliciesForBusinessFkInsuranceCompany(List<Licenseeinsurancepolicy> licenseeinsurancepoliciesForBusinessFkInsuranceCompany) {
        this.licenseeinsurancepoliciesForBusinessFkInsuranceCompany = licenseeinsurancepoliciesForBusinessFkInsuranceCompany;
    }

    @JsonInclude(Include.NON_EMPTY)
    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.REMOVE, mappedBy = "businessByBusinessFkInsuranceBroker")
    public List<Licenseeinsurancepolicy> getLicenseeinsurancepoliciesForBusinessFkInsuranceBroker() {
        return this.licenseeinsurancepoliciesForBusinessFkInsuranceBroker;
    }

    public void setLicenseeinsurancepoliciesForBusinessFkInsuranceBroker(List<Licenseeinsurancepolicy> licenseeinsurancepoliciesForBusinessFkInsuranceBroker) {
        this.licenseeinsurancepoliciesForBusinessFkInsuranceBroker = licenseeinsurancepoliciesForBusinessFkInsuranceBroker;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Business)) return false;
        final Business business = (Business) o;
        return Objects.equals(getPk(), business.getPk());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getPk());
    }
}

