/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.lsuc.lsuc;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

/**
 * Userpreference generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`USERPREFERENCE`", uniqueConstraints = {
        @UniqueConstraint(columnNames = {"`USER_FK`", "`USER_PREFERENCE_TYPE_FK`"})})
public class Userpreference implements Serializable {

    private Integer pk;
    private Integer userFk;
    private Integer userPreferenceTypeFk;
    private String userPreferenceValue;
    private User user;
    private Userpreferencetype userpreferencetype;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`PK`", nullable = false, scale = 0, precision = 10)
    public Integer getPk() {
        return this.pk;
    }

    public void setPk(Integer pk) {
        this.pk = pk;
    }

    @Column(name = "`USER_FK`", nullable = true, scale = 0, precision = 10)
    public Integer getUserFk() {
        return this.userFk;
    }

    public void setUserFk(Integer userFk) {
        this.userFk = userFk;
    }

    @Column(name = "`USER_PREFERENCE_TYPE_FK`", nullable = true, scale = 0, precision = 10)
    public Integer getUserPreferenceTypeFk() {
        return this.userPreferenceTypeFk;
    }

    public void setUserPreferenceTypeFk(Integer userPreferenceTypeFk) {
        this.userPreferenceTypeFk = userPreferenceTypeFk;
    }

    @Column(name = "`USER_PREFERENCE_VALUE`", nullable = true, length = 20)
    public String getUserPreferenceValue() {
        return this.userPreferenceValue;
    }

    public void setUserPreferenceValue(String userPreferenceValue) {
        this.userPreferenceValue = userPreferenceValue;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`USER_FK`", referencedColumnName = "`PK`", insertable = false, updatable = false)
    public User getUser() {
        return this.user;
    }

    public void setUser(User user) {
        if(user != null) {
            this.userFk = user.getPk();
        }

        this.user = user;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`USER_PREFERENCE_TYPE_FK`", referencedColumnName = "`PK`", insertable = false, updatable = false)
    public Userpreferencetype getUserpreferencetype() {
        return this.userpreferencetype;
    }

    public void setUserpreferencetype(Userpreferencetype userpreferencetype) {
        if(userpreferencetype != null) {
            this.userPreferenceTypeFk = userpreferencetype.getPk();
        }

        this.userpreferencetype = userpreferencetype;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Userpreference)) return false;
        final Userpreference userpreference = (Userpreference) o;
        return Objects.equals(getPk(), userpreference.getPk());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getPk());
    }
}

