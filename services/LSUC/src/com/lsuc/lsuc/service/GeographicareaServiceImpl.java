/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.lsuc.lsuc.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.lsuc.lsuc.Businessaddress;
import com.lsuc.lsuc.Geographicarea;
import com.lsuc.lsuc.Licensee;
import com.lsuc.lsuc.Organizationalunitaddress;
import com.lsuc.lsuc.Personaddress;


/**
 * ServiceImpl object for domain model class Geographicarea.
 *
 * @see Geographicarea
 */
@Service("LSUC.GeographicareaService")
public class GeographicareaServiceImpl implements GeographicareaService {

    private static final Logger LOGGER = LoggerFactory.getLogger(GeographicareaServiceImpl.class);

    @Autowired
	@Qualifier("LSUC.PersonaddressService")
	private PersonaddressService personaddressService;

    @Autowired
	@Qualifier("LSUC.OrganizationalunitaddressService")
	private OrganizationalunitaddressService organizationalunitaddressService;

    @Autowired
	@Qualifier("LSUC.BusinessaddressService")
	private BusinessaddressService businessaddressService;

    @Autowired
	@Qualifier("LSUC.LicenseeService")
	private LicenseeService licenseeService;

    @Autowired
    @Qualifier("LSUC.GeographicareaDao")
    private WMGenericDao<Geographicarea, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Geographicarea, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "LSUCTransactionManager")
    @Override
	public Geographicarea create(Geographicarea geographicarea) {
        LOGGER.debug("Creating a new Geographicarea with information: {}", geographicarea);
        Geographicarea geographicareaCreated = this.wmGenericDao.create(geographicarea);
        if(geographicareaCreated.getLicensees() != null) {
            for(Licensee licensee : geographicareaCreated.getLicensees()) {
                licensee.setGeographicarea(geographicareaCreated);
                LOGGER.debug("Creating a new child Licensee with information: {}", licensee);
                licenseeService.create(licensee);
            }
        }

        if(geographicareaCreated.getBusinessaddresses() != null) {
            for(Businessaddress businessaddresse : geographicareaCreated.getBusinessaddresses()) {
                businessaddresse.setGeographicarea(geographicareaCreated);
                LOGGER.debug("Creating a new child Businessaddress with information: {}", businessaddresse);
                businessaddressService.create(businessaddresse);
            }
        }

        if(geographicareaCreated.getOrganizationalunitaddresses() != null) {
            for(Organizationalunitaddress organizationalunitaddresse : geographicareaCreated.getOrganizationalunitaddresses()) {
                organizationalunitaddresse.setGeographicarea(geographicareaCreated);
                LOGGER.debug("Creating a new child Organizationalunitaddress with information: {}", organizationalunitaddresse);
                organizationalunitaddressService.create(organizationalunitaddresse);
            }
        }

        if(geographicareaCreated.getPersonaddresses() != null) {
            for(Personaddress personaddresse : geographicareaCreated.getPersonaddresses()) {
                personaddresse.setGeographicarea(geographicareaCreated);
                LOGGER.debug("Creating a new child Personaddress with information: {}", personaddresse);
                personaddressService.create(personaddresse);
            }
        }
        return geographicareaCreated;
    }

	@Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public Geographicarea getById(Integer geographicareaId) throws EntityNotFoundException {
        LOGGER.debug("Finding Geographicarea by id: {}", geographicareaId);
        Geographicarea geographicarea = this.wmGenericDao.findById(geographicareaId);
        if (geographicarea == null){
            LOGGER.debug("No Geographicarea found with id: {}", geographicareaId);
            throw new EntityNotFoundException(String.valueOf(geographicareaId));
        }
        return geographicarea;
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public Geographicarea findById(Integer geographicareaId) {
        LOGGER.debug("Finding Geographicarea by id: {}", geographicareaId);
        return this.wmGenericDao.findById(geographicareaId);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Geographicarea getByCode(String code) {
        Map<String, Object> codeMap = new HashMap<>();
        codeMap.put("code", code);

        LOGGER.debug("Finding Geographicarea by unique keys: {}", codeMap);
        Geographicarea geographicarea = this.wmGenericDao.findByUniqueKey(codeMap);

        if (geographicarea == null){
            LOGGER.debug("No Geographicarea found with given unique key values: {}", codeMap);
            throw new EntityNotFoundException(String.valueOf(codeMap));
        }

        return geographicarea;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "LSUCTransactionManager")
	@Override
	public Geographicarea update(Geographicarea geographicarea) throws EntityNotFoundException {
        LOGGER.debug("Updating Geographicarea with information: {}", geographicarea);
        this.wmGenericDao.update(geographicarea);

        Integer geographicareaId = geographicarea.getPk();

        return this.wmGenericDao.findById(geographicareaId);
    }

    @Transactional(value = "LSUCTransactionManager")
	@Override
	public Geographicarea delete(Integer geographicareaId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Geographicarea with id: {}", geographicareaId);
        Geographicarea deleted = this.wmGenericDao.findById(geographicareaId);
        if (deleted == null) {
            LOGGER.debug("No Geographicarea found with id: {}", geographicareaId);
            throw new EntityNotFoundException(String.valueOf(geographicareaId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public Page<Geographicarea> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Geographicareas");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Page<Geographicarea> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Geographicareas");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service LSUC for table Geographicarea to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Page<Licensee> findAssociatedLicensees(Integer pk, Pageable pageable) {
        LOGGER.debug("Fetching all associated licensees");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("geographicarea.pk = '" + pk + "'");

        return licenseeService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Page<Businessaddress> findAssociatedBusinessaddresses(Integer pk, Pageable pageable) {
        LOGGER.debug("Fetching all associated businessaddresses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("geographicarea.pk = '" + pk + "'");

        return businessaddressService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Page<Organizationalunitaddress> findAssociatedOrganizationalunitaddresses(Integer pk, Pageable pageable) {
        LOGGER.debug("Fetching all associated organizationalunitaddresses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("geographicarea.pk = '" + pk + "'");

        return organizationalunitaddressService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Page<Personaddress> findAssociatedPersonaddresses(Integer pk, Pageable pageable) {
        LOGGER.debug("Fetching all associated personaddresses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("geographicarea.pk = '" + pk + "'");

        return personaddressService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PersonaddressService instance
	 */
	protected void setPersonaddressService(PersonaddressService service) {
        this.personaddressService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service OrganizationalunitaddressService instance
	 */
	protected void setOrganizationalunitaddressService(OrganizationalunitaddressService service) {
        this.organizationalunitaddressService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service BusinessaddressService instance
	 */
	protected void setBusinessaddressService(BusinessaddressService service) {
        this.businessaddressService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service LicenseeService instance
	 */
	protected void setLicenseeService(LicenseeService service) {
        this.licenseeService = service;
    }

}

