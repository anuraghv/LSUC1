/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.lsuc.lsuc.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.lsuc.lsuc.LicenseeclasspracticegroupAud;
import com.lsuc.lsuc.LicenseeclasspracticegroupAudId;


/**
 * ServiceImpl object for domain model class LicenseeclasspracticegroupAud.
 *
 * @see LicenseeclasspracticegroupAud
 */
@Service("LSUC.LicenseeclasspracticegroupAudService")
public class LicenseeclasspracticegroupAudServiceImpl implements LicenseeclasspracticegroupAudService {

    private static final Logger LOGGER = LoggerFactory.getLogger(LicenseeclasspracticegroupAudServiceImpl.class);


    @Autowired
    @Qualifier("LSUC.LicenseeclasspracticegroupAudDao")
    private WMGenericDao<LicenseeclasspracticegroupAud, LicenseeclasspracticegroupAudId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<LicenseeclasspracticegroupAud, LicenseeclasspracticegroupAudId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "LSUCTransactionManager")
    @Override
	public LicenseeclasspracticegroupAud create(LicenseeclasspracticegroupAud licenseeclasspracticegroupAud) {
        LOGGER.debug("Creating a new LicenseeclasspracticegroupAud with information: {}", licenseeclasspracticegroupAud);
        LicenseeclasspracticegroupAud licenseeclasspracticegroupAudCreated = this.wmGenericDao.create(licenseeclasspracticegroupAud);
        return licenseeclasspracticegroupAudCreated;
    }

	@Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public LicenseeclasspracticegroupAud getById(LicenseeclasspracticegroupAudId licenseeclasspracticegroupaudId) throws EntityNotFoundException {
        LOGGER.debug("Finding LicenseeclasspracticegroupAud by id: {}", licenseeclasspracticegroupaudId);
        LicenseeclasspracticegroupAud licenseeclasspracticegroupAud = this.wmGenericDao.findById(licenseeclasspracticegroupaudId);
        if (licenseeclasspracticegroupAud == null){
            LOGGER.debug("No LicenseeclasspracticegroupAud found with id: {}", licenseeclasspracticegroupaudId);
            throw new EntityNotFoundException(String.valueOf(licenseeclasspracticegroupaudId));
        }
        return licenseeclasspracticegroupAud;
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public LicenseeclasspracticegroupAud findById(LicenseeclasspracticegroupAudId licenseeclasspracticegroupaudId) {
        LOGGER.debug("Finding LicenseeclasspracticegroupAud by id: {}", licenseeclasspracticegroupaudId);
        return this.wmGenericDao.findById(licenseeclasspracticegroupaudId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "LSUCTransactionManager")
	@Override
	public LicenseeclasspracticegroupAud update(LicenseeclasspracticegroupAud licenseeclasspracticegroupAud) throws EntityNotFoundException {
        LOGGER.debug("Updating LicenseeclasspracticegroupAud with information: {}", licenseeclasspracticegroupAud);
        this.wmGenericDao.update(licenseeclasspracticegroupAud);

        LicenseeclasspracticegroupAudId licenseeclasspracticegroupaudId = new LicenseeclasspracticegroupAudId();
        licenseeclasspracticegroupaudId.setPk(licenseeclasspracticegroupAud.getPk());
        licenseeclasspracticegroupaudId.setRev(licenseeclasspracticegroupAud.getRev());

        return this.wmGenericDao.findById(licenseeclasspracticegroupaudId);
    }

    @Transactional(value = "LSUCTransactionManager")
	@Override
	public LicenseeclasspracticegroupAud delete(LicenseeclasspracticegroupAudId licenseeclasspracticegroupaudId) throws EntityNotFoundException {
        LOGGER.debug("Deleting LicenseeclasspracticegroupAud with id: {}", licenseeclasspracticegroupaudId);
        LicenseeclasspracticegroupAud deleted = this.wmGenericDao.findById(licenseeclasspracticegroupaudId);
        if (deleted == null) {
            LOGGER.debug("No LicenseeclasspracticegroupAud found with id: {}", licenseeclasspracticegroupaudId);
            throw new EntityNotFoundException(String.valueOf(licenseeclasspracticegroupaudId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public Page<LicenseeclasspracticegroupAud> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all LicenseeclasspracticegroupAuds");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Page<LicenseeclasspracticegroupAud> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all LicenseeclasspracticegroupAuds");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service LSUC for table LicenseeclasspracticegroupAud to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

