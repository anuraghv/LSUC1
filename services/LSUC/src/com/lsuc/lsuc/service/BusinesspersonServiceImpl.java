/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.lsuc.lsuc.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.lsuc.lsuc.Businessperson;
import com.lsuc.lsuc.Businesspersonrelationship;


/**
 * ServiceImpl object for domain model class Businessperson.
 *
 * @see Businessperson
 */
@Service("LSUC.BusinesspersonService")
public class BusinesspersonServiceImpl implements BusinesspersonService {

    private static final Logger LOGGER = LoggerFactory.getLogger(BusinesspersonServiceImpl.class);

    @Autowired
	@Qualifier("LSUC.BusinesspersonrelationshipService")
	private BusinesspersonrelationshipService businesspersonrelationshipService;

    @Autowired
    @Qualifier("LSUC.BusinesspersonDao")
    private WMGenericDao<Businessperson, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Businessperson, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "LSUCTransactionManager")
    @Override
	public Businessperson create(Businessperson businessperson) {
        LOGGER.debug("Creating a new Businessperson with information: {}", businessperson);
        Businessperson businesspersonCreated = this.wmGenericDao.create(businessperson);
        if(businesspersonCreated.getBusinesspersonrelationships() != null) {
            for(Businesspersonrelationship businesspersonrelationship : businesspersonCreated.getBusinesspersonrelationships()) {
                businesspersonrelationship.setBusinessperson(businesspersonCreated);
                LOGGER.debug("Creating a new child Businesspersonrelationship with information: {}", businesspersonrelationship);
                businesspersonrelationshipService.create(businesspersonrelationship);
            }
        }
        return businesspersonCreated;
    }

	@Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public Businessperson getById(Integer businesspersonId) throws EntityNotFoundException {
        LOGGER.debug("Finding Businessperson by id: {}", businesspersonId);
        Businessperson businessperson = this.wmGenericDao.findById(businesspersonId);
        if (businessperson == null){
            LOGGER.debug("No Businessperson found with id: {}", businesspersonId);
            throw new EntityNotFoundException(String.valueOf(businesspersonId));
        }
        return businessperson;
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public Businessperson findById(Integer businesspersonId) {
        LOGGER.debug("Finding Businessperson by id: {}", businesspersonId);
        return this.wmGenericDao.findById(businesspersonId);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Businessperson getByBusinessFkAndPersonFk(Integer businessFk, Integer personFk) {
        Map<String, Object> businessFkAndPersonFkMap = new HashMap<>();
        businessFkAndPersonFkMap.put("businessFk", businessFk);
        businessFkAndPersonFkMap.put("personFk", personFk);

        LOGGER.debug("Finding Businessperson by unique keys: {}", businessFkAndPersonFkMap);
        Businessperson businessperson = this.wmGenericDao.findByUniqueKey(businessFkAndPersonFkMap);

        if (businessperson == null){
            LOGGER.debug("No Businessperson found with given unique key values: {}", businessFkAndPersonFkMap);
            throw new EntityNotFoundException(String.valueOf(businessFkAndPersonFkMap));
        }

        return businessperson;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "LSUCTransactionManager")
	@Override
	public Businessperson update(Businessperson businessperson) throws EntityNotFoundException {
        LOGGER.debug("Updating Businessperson with information: {}", businessperson);
        this.wmGenericDao.update(businessperson);

        Integer businesspersonId = businessperson.getPk();

        return this.wmGenericDao.findById(businesspersonId);
    }

    @Transactional(value = "LSUCTransactionManager")
	@Override
	public Businessperson delete(Integer businesspersonId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Businessperson with id: {}", businesspersonId);
        Businessperson deleted = this.wmGenericDao.findById(businesspersonId);
        if (deleted == null) {
            LOGGER.debug("No Businessperson found with id: {}", businesspersonId);
            throw new EntityNotFoundException(String.valueOf(businesspersonId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public Page<Businessperson> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Businesspeople");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Page<Businessperson> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Businesspeople");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service LSUC for table Businessperson to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Page<Businesspersonrelationship> findAssociatedBusinesspersonrelationships(Integer pk, Pageable pageable) {
        LOGGER.debug("Fetching all associated businesspersonrelationships");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("businessperson.pk = '" + pk + "'");

        return businesspersonrelationshipService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service BusinesspersonrelationshipService instance
	 */
	protected void setBusinesspersonrelationshipService(BusinesspersonrelationshipService service) {
        this.businesspersonrelationshipService = service;
    }

}

