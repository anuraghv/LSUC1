/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.lsuc.lsuc.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.lsuc.lsuc.Businesssocialmediacontact;
import com.lsuc.lsuc.Personsocialmediacontact;
import com.lsuc.lsuc.Socialmediatype;


/**
 * ServiceImpl object for domain model class Socialmediatype.
 *
 * @see Socialmediatype
 */
@Service("LSUC.SocialmediatypeService")
public class SocialmediatypeServiceImpl implements SocialmediatypeService {

    private static final Logger LOGGER = LoggerFactory.getLogger(SocialmediatypeServiceImpl.class);

    @Autowired
	@Qualifier("LSUC.PersonsocialmediacontactService")
	private PersonsocialmediacontactService personsocialmediacontactService;

    @Autowired
	@Qualifier("LSUC.BusinesssocialmediacontactService")
	private BusinesssocialmediacontactService businesssocialmediacontactService;

    @Autowired
    @Qualifier("LSUC.SocialmediatypeDao")
    private WMGenericDao<Socialmediatype, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Socialmediatype, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "LSUCTransactionManager")
    @Override
	public Socialmediatype create(Socialmediatype socialmediatype) {
        LOGGER.debug("Creating a new Socialmediatype with information: {}", socialmediatype);
        Socialmediatype socialmediatypeCreated = this.wmGenericDao.create(socialmediatype);
        if(socialmediatypeCreated.getBusinesssocialmediacontacts() != null) {
            for(Businesssocialmediacontact businesssocialmediacontact : socialmediatypeCreated.getBusinesssocialmediacontacts()) {
                businesssocialmediacontact.setSocialmediatype(socialmediatypeCreated);
                LOGGER.debug("Creating a new child Businesssocialmediacontact with information: {}", businesssocialmediacontact);
                businesssocialmediacontactService.create(businesssocialmediacontact);
            }
        }

        if(socialmediatypeCreated.getPersonsocialmediacontacts() != null) {
            for(Personsocialmediacontact personsocialmediacontact : socialmediatypeCreated.getPersonsocialmediacontacts()) {
                personsocialmediacontact.setSocialmediatype(socialmediatypeCreated);
                LOGGER.debug("Creating a new child Personsocialmediacontact with information: {}", personsocialmediacontact);
                personsocialmediacontactService.create(personsocialmediacontact);
            }
        }
        return socialmediatypeCreated;
    }

	@Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public Socialmediatype getById(Integer socialmediatypeId) throws EntityNotFoundException {
        LOGGER.debug("Finding Socialmediatype by id: {}", socialmediatypeId);
        Socialmediatype socialmediatype = this.wmGenericDao.findById(socialmediatypeId);
        if (socialmediatype == null){
            LOGGER.debug("No Socialmediatype found with id: {}", socialmediatypeId);
            throw new EntityNotFoundException(String.valueOf(socialmediatypeId));
        }
        return socialmediatype;
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public Socialmediatype findById(Integer socialmediatypeId) {
        LOGGER.debug("Finding Socialmediatype by id: {}", socialmediatypeId);
        return this.wmGenericDao.findById(socialmediatypeId);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Socialmediatype getByCode(String code) {
        Map<String, Object> codeMap = new HashMap<>();
        codeMap.put("code", code);

        LOGGER.debug("Finding Socialmediatype by unique keys: {}", codeMap);
        Socialmediatype socialmediatype = this.wmGenericDao.findByUniqueKey(codeMap);

        if (socialmediatype == null){
            LOGGER.debug("No Socialmediatype found with given unique key values: {}", codeMap);
            throw new EntityNotFoundException(String.valueOf(codeMap));
        }

        return socialmediatype;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "LSUCTransactionManager")
	@Override
	public Socialmediatype update(Socialmediatype socialmediatype) throws EntityNotFoundException {
        LOGGER.debug("Updating Socialmediatype with information: {}", socialmediatype);
        this.wmGenericDao.update(socialmediatype);

        Integer socialmediatypeId = socialmediatype.getPk();

        return this.wmGenericDao.findById(socialmediatypeId);
    }

    @Transactional(value = "LSUCTransactionManager")
	@Override
	public Socialmediatype delete(Integer socialmediatypeId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Socialmediatype with id: {}", socialmediatypeId);
        Socialmediatype deleted = this.wmGenericDao.findById(socialmediatypeId);
        if (deleted == null) {
            LOGGER.debug("No Socialmediatype found with id: {}", socialmediatypeId);
            throw new EntityNotFoundException(String.valueOf(socialmediatypeId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public Page<Socialmediatype> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Socialmediatypes");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Page<Socialmediatype> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Socialmediatypes");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service LSUC for table Socialmediatype to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Page<Businesssocialmediacontact> findAssociatedBusinesssocialmediacontacts(Integer pk, Pageable pageable) {
        LOGGER.debug("Fetching all associated businesssocialmediacontacts");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("socialmediatype.pk = '" + pk + "'");

        return businesssocialmediacontactService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Page<Personsocialmediacontact> findAssociatedPersonsocialmediacontacts(Integer pk, Pageable pageable) {
        LOGGER.debug("Fetching all associated personsocialmediacontacts");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("socialmediatype.pk = '" + pk + "'");

        return personsocialmediacontactService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PersonsocialmediacontactService instance
	 */
	protected void setPersonsocialmediacontactService(PersonsocialmediacontactService service) {
        this.personsocialmediacontactService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service BusinesssocialmediacontactService instance
	 */
	protected void setBusinesssocialmediacontactService(BusinesssocialmediacontactService service) {
        this.businesssocialmediacontactService = service;
    }

}

