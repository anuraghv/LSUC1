/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.lsuc.lsuc.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.lsuc.lsuc.Businessbusiness;

/**
 * Service object for domain model class {@link Businessbusiness}.
 */
public interface BusinessbusinessService {

    /**
     * Creates a new Businessbusiness. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Businessbusiness if any.
     *
     * @param businessbusiness Details of the Businessbusiness to be created; value cannot be null.
     * @return The newly created Businessbusiness.
     */
	Businessbusiness create(Businessbusiness businessbusiness);


	/**
	 * Returns Businessbusiness by given id if exists.
	 *
	 * @param businessbusinessId The id of the Businessbusiness to get; value cannot be null.
	 * @return Businessbusiness associated with the given businessbusinessId.
     * @throws EntityNotFoundException If no Businessbusiness is found.
	 */
	Businessbusiness getById(Integer businessbusinessId) throws EntityNotFoundException;

    /**
	 * Find and return the Businessbusiness by given id if exists, returns null otherwise.
	 *
	 * @param businessbusinessId The id of the Businessbusiness to get; value cannot be null.
	 * @return Businessbusiness associated with the given businessbusinessId.
	 */
	Businessbusiness findById(Integer businessbusinessId);

    /**
	 * Find and return the Businessbusiness for given businessFkChild  andbusinessFkParent  if exists.
	 *
	 * @param businessFkChild value of businessFkChild; value cannot be null.
	 * @param businessFkParent value of businessFkParent; value cannot be null.
	 * @return Businessbusiness associated with the given inputs.
     * @throws EntityNotFoundException if no matching Businessbusiness found.
	 */
    Businessbusiness getByBusinessFkChildAndBusinessFkParent(int businessFkChild, int businessFkParent)throws EntityNotFoundException;

	/**
	 * Updates the details of an existing Businessbusiness. It replaces all fields of the existing Businessbusiness with the given businessbusiness.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on Businessbusiness if any.
     *
	 * @param businessbusiness The details of the Businessbusiness to be updated; value cannot be null.
	 * @return The updated Businessbusiness.
	 * @throws EntityNotFoundException if no Businessbusiness is found with given input.
	 */
	Businessbusiness update(Businessbusiness businessbusiness) throws EntityNotFoundException;

    /**
	 * Deletes an existing Businessbusiness with the given id.
	 *
	 * @param businessbusinessId The id of the Businessbusiness to be deleted; value cannot be null.
	 * @return The deleted Businessbusiness.
	 * @throws EntityNotFoundException if no Businessbusiness found with the given id.
	 */
	Businessbusiness delete(Integer businessbusinessId) throws EntityNotFoundException;

	/**
	 * Find all Businessbusinesses matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Businessbusinesses.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<Businessbusiness> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all Businessbusinesses matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Businessbusinesses.
     *
     * @see Pageable
     * @see Page
	 */
    Page<Businessbusiness> findAll(String query, Pageable pageable);

    /**
	 * Exports all Businessbusinesses matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the Businessbusinesses in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the Businessbusiness.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}

