/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.lsuc.lsuc.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.lsuc.lsuc.Businessemailcontact;


/**
 * ServiceImpl object for domain model class Businessemailcontact.
 *
 * @see Businessemailcontact
 */
@Service("LSUC.BusinessemailcontactService")
public class BusinessemailcontactServiceImpl implements BusinessemailcontactService {

    private static final Logger LOGGER = LoggerFactory.getLogger(BusinessemailcontactServiceImpl.class);


    @Autowired
    @Qualifier("LSUC.BusinessemailcontactDao")
    private WMGenericDao<Businessemailcontact, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Businessemailcontact, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "LSUCTransactionManager")
    @Override
	public Businessemailcontact create(Businessemailcontact businessemailcontact) {
        LOGGER.debug("Creating a new Businessemailcontact with information: {}", businessemailcontact);
        Businessemailcontact businessemailcontactCreated = this.wmGenericDao.create(businessemailcontact);
        return businessemailcontactCreated;
    }

	@Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public Businessemailcontact getById(Integer businessemailcontactId) throws EntityNotFoundException {
        LOGGER.debug("Finding Businessemailcontact by id: {}", businessemailcontactId);
        Businessemailcontact businessemailcontact = this.wmGenericDao.findById(businessemailcontactId);
        if (businessemailcontact == null){
            LOGGER.debug("No Businessemailcontact found with id: {}", businessemailcontactId);
            throw new EntityNotFoundException(String.valueOf(businessemailcontactId));
        }
        return businessemailcontact;
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public Businessemailcontact findById(Integer businessemailcontactId) {
        LOGGER.debug("Finding Businessemailcontact by id: {}", businessemailcontactId);
        return this.wmGenericDao.findById(businessemailcontactId);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Businessemailcontact getByBusinessFkAndEmailPurposeFk(Integer businessFk, Integer emailPurposeFk) {
        Map<String, Object> businessFkAndEmailPurposeFkMap = new HashMap<>();
        businessFkAndEmailPurposeFkMap.put("businessFk", businessFk);
        businessFkAndEmailPurposeFkMap.put("emailPurposeFk", emailPurposeFk);

        LOGGER.debug("Finding Businessemailcontact by unique keys: {}", businessFkAndEmailPurposeFkMap);
        Businessemailcontact businessemailcontact = this.wmGenericDao.findByUniqueKey(businessFkAndEmailPurposeFkMap);

        if (businessemailcontact == null){
            LOGGER.debug("No Businessemailcontact found with given unique key values: {}", businessFkAndEmailPurposeFkMap);
            throw new EntityNotFoundException(String.valueOf(businessFkAndEmailPurposeFkMap));
        }

        return businessemailcontact;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "LSUCTransactionManager")
	@Override
	public Businessemailcontact update(Businessemailcontact businessemailcontact) throws EntityNotFoundException {
        LOGGER.debug("Updating Businessemailcontact with information: {}", businessemailcontact);
        this.wmGenericDao.update(businessemailcontact);

        Integer businessemailcontactId = businessemailcontact.getPk();

        return this.wmGenericDao.findById(businessemailcontactId);
    }

    @Transactional(value = "LSUCTransactionManager")
	@Override
	public Businessemailcontact delete(Integer businessemailcontactId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Businessemailcontact with id: {}", businessemailcontactId);
        Businessemailcontact deleted = this.wmGenericDao.findById(businessemailcontactId);
        if (deleted == null) {
            LOGGER.debug("No Businessemailcontact found with id: {}", businessemailcontactId);
            throw new EntityNotFoundException(String.valueOf(businessemailcontactId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public Page<Businessemailcontact> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Businessemailcontacts");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Page<Businessemailcontact> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Businessemailcontacts");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service LSUC for table Businessemailcontact to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

