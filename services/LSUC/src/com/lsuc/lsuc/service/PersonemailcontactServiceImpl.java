/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.lsuc.lsuc.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.lsuc.lsuc.Personemailcontact;


/**
 * ServiceImpl object for domain model class Personemailcontact.
 *
 * @see Personemailcontact
 */
@Service("LSUC.PersonemailcontactService")
public class PersonemailcontactServiceImpl implements PersonemailcontactService {

    private static final Logger LOGGER = LoggerFactory.getLogger(PersonemailcontactServiceImpl.class);


    @Autowired
    @Qualifier("LSUC.PersonemailcontactDao")
    private WMGenericDao<Personemailcontact, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Personemailcontact, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "LSUCTransactionManager")
    @Override
	public Personemailcontact create(Personemailcontact personemailcontact) {
        LOGGER.debug("Creating a new Personemailcontact with information: {}", personemailcontact);
        Personemailcontact personemailcontactCreated = this.wmGenericDao.create(personemailcontact);
        return personemailcontactCreated;
    }

	@Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public Personemailcontact getById(Integer personemailcontactId) throws EntityNotFoundException {
        LOGGER.debug("Finding Personemailcontact by id: {}", personemailcontactId);
        Personemailcontact personemailcontact = this.wmGenericDao.findById(personemailcontactId);
        if (personemailcontact == null){
            LOGGER.debug("No Personemailcontact found with id: {}", personemailcontactId);
            throw new EntityNotFoundException(String.valueOf(personemailcontactId));
        }
        return personemailcontact;
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public Personemailcontact findById(Integer personemailcontactId) {
        LOGGER.debug("Finding Personemailcontact by id: {}", personemailcontactId);
        return this.wmGenericDao.findById(personemailcontactId);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Personemailcontact getByPersonFkAndEmailPurposeFk(Integer personFk, Integer emailPurposeFk) {
        Map<String, Object> personFkAndEmailPurposeFkMap = new HashMap<>();
        personFkAndEmailPurposeFkMap.put("personFk", personFk);
        personFkAndEmailPurposeFkMap.put("emailPurposeFk", emailPurposeFk);

        LOGGER.debug("Finding Personemailcontact by unique keys: {}", personFkAndEmailPurposeFkMap);
        Personemailcontact personemailcontact = this.wmGenericDao.findByUniqueKey(personFkAndEmailPurposeFkMap);

        if (personemailcontact == null){
            LOGGER.debug("No Personemailcontact found with given unique key values: {}", personFkAndEmailPurposeFkMap);
            throw new EntityNotFoundException(String.valueOf(personFkAndEmailPurposeFkMap));
        }

        return personemailcontact;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "LSUCTransactionManager")
	@Override
	public Personemailcontact update(Personemailcontact personemailcontact) throws EntityNotFoundException {
        LOGGER.debug("Updating Personemailcontact with information: {}", personemailcontact);
        this.wmGenericDao.update(personemailcontact);

        Integer personemailcontactId = personemailcontact.getPk();

        return this.wmGenericDao.findById(personemailcontactId);
    }

    @Transactional(value = "LSUCTransactionManager")
	@Override
	public Personemailcontact delete(Integer personemailcontactId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Personemailcontact with id: {}", personemailcontactId);
        Personemailcontact deleted = this.wmGenericDao.findById(personemailcontactId);
        if (deleted == null) {
            LOGGER.debug("No Personemailcontact found with id: {}", personemailcontactId);
            throw new EntityNotFoundException(String.valueOf(personemailcontactId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public Page<Personemailcontact> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Personemailcontacts");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Page<Personemailcontact> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Personemailcontacts");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service LSUC for table Personemailcontact to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

