/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.lsuc.lsuc.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.lsuc.lsuc.LicenseeAud;
import com.lsuc.lsuc.LicenseeclasspracticegroupAud;
import com.lsuc.lsuc.PersonAud;
import com.lsuc.lsuc.PersonaddressAud;
import com.lsuc.lsuc.Revinfo;


/**
 * ServiceImpl object for domain model class Revinfo.
 *
 * @see Revinfo
 */
@Service("LSUC.RevinfoService")
public class RevinfoServiceImpl implements RevinfoService {

    private static final Logger LOGGER = LoggerFactory.getLogger(RevinfoServiceImpl.class);

    @Autowired
	@Qualifier("LSUC.PersonaddressAudService")
	private PersonaddressAudService personaddressAudService;

    @Autowired
	@Qualifier("LSUC.LicenseeclasspracticegroupAudService")
	private LicenseeclasspracticegroupAudService licenseeclasspracticegroupAudService;

    @Autowired
	@Qualifier("LSUC.PersonAudService")
	private PersonAudService personAudService;

    @Autowired
	@Qualifier("LSUC.LicenseeAudService")
	private LicenseeAudService licenseeAudService;

    @Autowired
    @Qualifier("LSUC.RevinfoDao")
    private WMGenericDao<Revinfo, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Revinfo, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "LSUCTransactionManager")
    @Override
	public Revinfo create(Revinfo revinfo) {
        LOGGER.debug("Creating a new Revinfo with information: {}", revinfo);
        Revinfo revinfoCreated = this.wmGenericDao.create(revinfo);
        if(revinfoCreated.getLicenseeclasspracticegroupAuds() != null) {
            for(LicenseeclasspracticegroupAud licenseeclasspracticegroupAud : revinfoCreated.getLicenseeclasspracticegroupAuds()) {
                licenseeclasspracticegroupAud.setRevinfo(revinfoCreated);
                LOGGER.debug("Creating a new child LicenseeclasspracticegroupAud with information: {}", licenseeclasspracticegroupAud);
                licenseeclasspracticegroupAudService.create(licenseeclasspracticegroupAud);
            }
        }

        if(revinfoCreated.getPersonAuds() != null) {
            for(PersonAud personAud : revinfoCreated.getPersonAuds()) {
                personAud.setRevinfo(revinfoCreated);
                LOGGER.debug("Creating a new child PersonAud with information: {}", personAud);
                personAudService.create(personAud);
            }
        }

        if(revinfoCreated.getPersonaddressAuds() != null) {
            for(PersonaddressAud personaddressAud : revinfoCreated.getPersonaddressAuds()) {
                personaddressAud.setRevinfo(revinfoCreated);
                LOGGER.debug("Creating a new child PersonaddressAud with information: {}", personaddressAud);
                personaddressAudService.create(personaddressAud);
            }
        }

        if(revinfoCreated.getLicenseeAuds() != null) {
            for(LicenseeAud licenseeAud : revinfoCreated.getLicenseeAuds()) {
                licenseeAud.setRevinfo(revinfoCreated);
                LOGGER.debug("Creating a new child LicenseeAud with information: {}", licenseeAud);
                licenseeAudService.create(licenseeAud);
            }
        }
        return revinfoCreated;
    }

	@Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public Revinfo getById(Integer revinfoId) throws EntityNotFoundException {
        LOGGER.debug("Finding Revinfo by id: {}", revinfoId);
        Revinfo revinfo = this.wmGenericDao.findById(revinfoId);
        if (revinfo == null){
            LOGGER.debug("No Revinfo found with id: {}", revinfoId);
            throw new EntityNotFoundException(String.valueOf(revinfoId));
        }
        return revinfo;
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public Revinfo findById(Integer revinfoId) {
        LOGGER.debug("Finding Revinfo by id: {}", revinfoId);
        return this.wmGenericDao.findById(revinfoId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "LSUCTransactionManager")
	@Override
	public Revinfo update(Revinfo revinfo) throws EntityNotFoundException {
        LOGGER.debug("Updating Revinfo with information: {}", revinfo);
        this.wmGenericDao.update(revinfo);

        Integer revinfoId = revinfo.getRev();

        return this.wmGenericDao.findById(revinfoId);
    }

    @Transactional(value = "LSUCTransactionManager")
	@Override
	public Revinfo delete(Integer revinfoId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Revinfo with id: {}", revinfoId);
        Revinfo deleted = this.wmGenericDao.findById(revinfoId);
        if (deleted == null) {
            LOGGER.debug("No Revinfo found with id: {}", revinfoId);
            throw new EntityNotFoundException(String.valueOf(revinfoId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public Page<Revinfo> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Revinfos");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Page<Revinfo> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Revinfos");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service LSUC for table Revinfo to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Page<LicenseeclasspracticegroupAud> findAssociatedLicenseeclasspracticegroupAuds(Integer rev, Pageable pageable) {
        LOGGER.debug("Fetching all associated licenseeclasspracticegroupAuds");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("revinfo.rev = '" + rev + "'");

        return licenseeclasspracticegroupAudService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Page<PersonAud> findAssociatedPersonAuds(Integer rev, Pageable pageable) {
        LOGGER.debug("Fetching all associated personAuds");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("revinfo.rev = '" + rev + "'");

        return personAudService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Page<PersonaddressAud> findAssociatedPersonaddressAuds(Integer rev, Pageable pageable) {
        LOGGER.debug("Fetching all associated personaddressAuds");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("revinfo.rev = '" + rev + "'");

        return personaddressAudService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Page<LicenseeAud> findAssociatedLicenseeAuds(Integer rev, Pageable pageable) {
        LOGGER.debug("Fetching all associated licenseeAuds");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("revinfo.rev = '" + rev + "'");

        return licenseeAudService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PersonaddressAudService instance
	 */
	protected void setPersonaddressAudService(PersonaddressAudService service) {
        this.personaddressAudService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service LicenseeclasspracticegroupAudService instance
	 */
	protected void setLicenseeclasspracticegroupAudService(LicenseeclasspracticegroupAudService service) {
        this.licenseeclasspracticegroupAudService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PersonAudService instance
	 */
	protected void setPersonAudService(PersonAudService service) {
        this.personAudService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service LicenseeAudService instance
	 */
	protected void setLicenseeAudService(LicenseeAudService service) {
        this.licenseeAudService = service;
    }

}

