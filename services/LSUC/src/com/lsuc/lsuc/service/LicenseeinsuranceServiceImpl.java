/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.lsuc.lsuc.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.lsuc.lsuc.Licenseeinsurance;
import com.lsuc.lsuc.Licenseeinsurancepolicy;


/**
 * ServiceImpl object for domain model class Licenseeinsurance.
 *
 * @see Licenseeinsurance
 */
@Service("LSUC.LicenseeinsuranceService")
public class LicenseeinsuranceServiceImpl implements LicenseeinsuranceService {

    private static final Logger LOGGER = LoggerFactory.getLogger(LicenseeinsuranceServiceImpl.class);

    @Autowired
	@Qualifier("LSUC.LicenseeinsurancepolicyService")
	private LicenseeinsurancepolicyService licenseeinsurancepolicyService;

    @Autowired
    @Qualifier("LSUC.LicenseeinsuranceDao")
    private WMGenericDao<Licenseeinsurance, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Licenseeinsurance, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "LSUCTransactionManager")
    @Override
	public Licenseeinsurance create(Licenseeinsurance licenseeinsurance) {
        LOGGER.debug("Creating a new Licenseeinsurance with information: {}", licenseeinsurance);
        Licenseeinsurance licenseeinsuranceCreated = this.wmGenericDao.create(licenseeinsurance);
        if(licenseeinsuranceCreated.getLicenseeinsurancepolicies() != null) {
            for(Licenseeinsurancepolicy licenseeinsurancepolicie : licenseeinsuranceCreated.getLicenseeinsurancepolicies()) {
                licenseeinsurancepolicie.setLicenseeinsurance(licenseeinsuranceCreated);
                LOGGER.debug("Creating a new child Licenseeinsurancepolicy with information: {}", licenseeinsurancepolicie);
                licenseeinsurancepolicyService.create(licenseeinsurancepolicie);
            }
        }
        return licenseeinsuranceCreated;
    }

	@Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public Licenseeinsurance getById(Integer licenseeinsuranceId) throws EntityNotFoundException {
        LOGGER.debug("Finding Licenseeinsurance by id: {}", licenseeinsuranceId);
        Licenseeinsurance licenseeinsurance = this.wmGenericDao.findById(licenseeinsuranceId);
        if (licenseeinsurance == null){
            LOGGER.debug("No Licenseeinsurance found with id: {}", licenseeinsuranceId);
            throw new EntityNotFoundException(String.valueOf(licenseeinsuranceId));
        }
        return licenseeinsurance;
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public Licenseeinsurance findById(Integer licenseeinsuranceId) {
        LOGGER.debug("Finding Licenseeinsurance by id: {}", licenseeinsuranceId);
        return this.wmGenericDao.findById(licenseeinsuranceId);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Licenseeinsurance getByLicenseeFkAndInsuranceCoverageTypeFk(Integer licenseeFk, Integer insuranceCoverageTypeFk) {
        Map<String, Object> licenseeFkAndInsuranceCoverageTypeFkMap = new HashMap<>();
        licenseeFkAndInsuranceCoverageTypeFkMap.put("licenseeFk", licenseeFk);
        licenseeFkAndInsuranceCoverageTypeFkMap.put("insuranceCoverageTypeFk", insuranceCoverageTypeFk);

        LOGGER.debug("Finding Licenseeinsurance by unique keys: {}", licenseeFkAndInsuranceCoverageTypeFkMap);
        Licenseeinsurance licenseeinsurance = this.wmGenericDao.findByUniqueKey(licenseeFkAndInsuranceCoverageTypeFkMap);

        if (licenseeinsurance == null){
            LOGGER.debug("No Licenseeinsurance found with given unique key values: {}", licenseeFkAndInsuranceCoverageTypeFkMap);
            throw new EntityNotFoundException(String.valueOf(licenseeFkAndInsuranceCoverageTypeFkMap));
        }

        return licenseeinsurance;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "LSUCTransactionManager")
	@Override
	public Licenseeinsurance update(Licenseeinsurance licenseeinsurance) throws EntityNotFoundException {
        LOGGER.debug("Updating Licenseeinsurance with information: {}", licenseeinsurance);
        this.wmGenericDao.update(licenseeinsurance);

        Integer licenseeinsuranceId = licenseeinsurance.getPk();

        return this.wmGenericDao.findById(licenseeinsuranceId);
    }

    @Transactional(value = "LSUCTransactionManager")
	@Override
	public Licenseeinsurance delete(Integer licenseeinsuranceId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Licenseeinsurance with id: {}", licenseeinsuranceId);
        Licenseeinsurance deleted = this.wmGenericDao.findById(licenseeinsuranceId);
        if (deleted == null) {
            LOGGER.debug("No Licenseeinsurance found with id: {}", licenseeinsuranceId);
            throw new EntityNotFoundException(String.valueOf(licenseeinsuranceId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public Page<Licenseeinsurance> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Licenseeinsurances");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Page<Licenseeinsurance> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Licenseeinsurances");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service LSUC for table Licenseeinsurance to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Page<Licenseeinsurancepolicy> findAssociatedLicenseeinsurancepolicies(Integer pk, Pageable pageable) {
        LOGGER.debug("Fetching all associated licenseeinsurancepolicies");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("licenseeinsurance.pk = '" + pk + "'");

        return licenseeinsurancepolicyService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service LicenseeinsurancepolicyService instance
	 */
	protected void setLicenseeinsurancepolicyService(LicenseeinsurancepolicyService service) {
        this.licenseeinsurancepolicyService = service;
    }

}

