/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.lsuc.lsuc.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.lsuc.lsuc.Personaddress;


/**
 * ServiceImpl object for domain model class Personaddress.
 *
 * @see Personaddress
 */
@Service("LSUC.PersonaddressService")
public class PersonaddressServiceImpl implements PersonaddressService {

    private static final Logger LOGGER = LoggerFactory.getLogger(PersonaddressServiceImpl.class);


    @Autowired
    @Qualifier("LSUC.PersonaddressDao")
    private WMGenericDao<Personaddress, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Personaddress, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "LSUCTransactionManager")
    @Override
	public Personaddress create(Personaddress personaddress) {
        LOGGER.debug("Creating a new Personaddress with information: {}", personaddress);
        Personaddress personaddressCreated = this.wmGenericDao.create(personaddress);
        return personaddressCreated;
    }

	@Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public Personaddress getById(Integer personaddressId) throws EntityNotFoundException {
        LOGGER.debug("Finding Personaddress by id: {}", personaddressId);
        Personaddress personaddress = this.wmGenericDao.findById(personaddressId);
        if (personaddress == null){
            LOGGER.debug("No Personaddress found with id: {}", personaddressId);
            throw new EntityNotFoundException(String.valueOf(personaddressId));
        }
        return personaddress;
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public Personaddress findById(Integer personaddressId) {
        LOGGER.debug("Finding Personaddress by id: {}", personaddressId);
        return this.wmGenericDao.findById(personaddressId);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Personaddress getByPersonFkAndAddresstypeFk(Integer personFk, Integer addresstypeFk) {
        Map<String, Object> personFkAndAddresstypeFkMap = new HashMap<>();
        personFkAndAddresstypeFkMap.put("personFk", personFk);
        personFkAndAddresstypeFkMap.put("addresstypeFk", addresstypeFk);

        LOGGER.debug("Finding Personaddress by unique keys: {}", personFkAndAddresstypeFkMap);
        Personaddress personaddress = this.wmGenericDao.findByUniqueKey(personFkAndAddresstypeFkMap);

        if (personaddress == null){
            LOGGER.debug("No Personaddress found with given unique key values: {}", personFkAndAddresstypeFkMap);
            throw new EntityNotFoundException(String.valueOf(personFkAndAddresstypeFkMap));
        }

        return personaddress;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "LSUCTransactionManager")
	@Override
	public Personaddress update(Personaddress personaddress) throws EntityNotFoundException {
        LOGGER.debug("Updating Personaddress with information: {}", personaddress);
        this.wmGenericDao.update(personaddress);

        Integer personaddressId = personaddress.getPk();

        return this.wmGenericDao.findById(personaddressId);
    }

    @Transactional(value = "LSUCTransactionManager")
	@Override
	public Personaddress delete(Integer personaddressId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Personaddress with id: {}", personaddressId);
        Personaddress deleted = this.wmGenericDao.findById(personaddressId);
        if (deleted == null) {
            LOGGER.debug("No Personaddress found with id: {}", personaddressId);
            throw new EntityNotFoundException(String.valueOf(personaddressId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public Page<Personaddress> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Personaddresses");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Page<Personaddress> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Personaddresses");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service LSUC for table Personaddress to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

