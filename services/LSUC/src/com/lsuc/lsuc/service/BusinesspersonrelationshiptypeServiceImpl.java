/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.lsuc.lsuc.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.lsuc.lsuc.Businesspersonrelationship;
import com.lsuc.lsuc.Businesspersonrelationshiptype;


/**
 * ServiceImpl object for domain model class Businesspersonrelationshiptype.
 *
 * @see Businesspersonrelationshiptype
 */
@Service("LSUC.BusinesspersonrelationshiptypeService")
public class BusinesspersonrelationshiptypeServiceImpl implements BusinesspersonrelationshiptypeService {

    private static final Logger LOGGER = LoggerFactory.getLogger(BusinesspersonrelationshiptypeServiceImpl.class);

    @Autowired
	@Qualifier("LSUC.BusinesspersonrelationshipService")
	private BusinesspersonrelationshipService businesspersonrelationshipService;

    @Autowired
    @Qualifier("LSUC.BusinesspersonrelationshiptypeDao")
    private WMGenericDao<Businesspersonrelationshiptype, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Businesspersonrelationshiptype, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "LSUCTransactionManager")
    @Override
	public Businesspersonrelationshiptype create(Businesspersonrelationshiptype businesspersonrelationshiptype) {
        LOGGER.debug("Creating a new Businesspersonrelationshiptype with information: {}", businesspersonrelationshiptype);
        Businesspersonrelationshiptype businesspersonrelationshiptypeCreated = this.wmGenericDao.create(businesspersonrelationshiptype);
        if(businesspersonrelationshiptypeCreated.getBusinesspersonrelationships() != null) {
            for(Businesspersonrelationship businesspersonrelationship : businesspersonrelationshiptypeCreated.getBusinesspersonrelationships()) {
                businesspersonrelationship.setBusinesspersonrelationshiptype(businesspersonrelationshiptypeCreated);
                LOGGER.debug("Creating a new child Businesspersonrelationship with information: {}", businesspersonrelationship);
                businesspersonrelationshipService.create(businesspersonrelationship);
            }
        }
        return businesspersonrelationshiptypeCreated;
    }

	@Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public Businesspersonrelationshiptype getById(Integer businesspersonrelationshiptypeId) throws EntityNotFoundException {
        LOGGER.debug("Finding Businesspersonrelationshiptype by id: {}", businesspersonrelationshiptypeId);
        Businesspersonrelationshiptype businesspersonrelationshiptype = this.wmGenericDao.findById(businesspersonrelationshiptypeId);
        if (businesspersonrelationshiptype == null){
            LOGGER.debug("No Businesspersonrelationshiptype found with id: {}", businesspersonrelationshiptypeId);
            throw new EntityNotFoundException(String.valueOf(businesspersonrelationshiptypeId));
        }
        return businesspersonrelationshiptype;
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public Businesspersonrelationshiptype findById(Integer businesspersonrelationshiptypeId) {
        LOGGER.debug("Finding Businesspersonrelationshiptype by id: {}", businesspersonrelationshiptypeId);
        return this.wmGenericDao.findById(businesspersonrelationshiptypeId);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Businesspersonrelationshiptype getByCode(String code) {
        Map<String, Object> codeMap = new HashMap<>();
        codeMap.put("code", code);

        LOGGER.debug("Finding Businesspersonrelationshiptype by unique keys: {}", codeMap);
        Businesspersonrelationshiptype businesspersonrelationshiptype = this.wmGenericDao.findByUniqueKey(codeMap);

        if (businesspersonrelationshiptype == null){
            LOGGER.debug("No Businesspersonrelationshiptype found with given unique key values: {}", codeMap);
            throw new EntityNotFoundException(String.valueOf(codeMap));
        }

        return businesspersonrelationshiptype;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "LSUCTransactionManager")
	@Override
	public Businesspersonrelationshiptype update(Businesspersonrelationshiptype businesspersonrelationshiptype) throws EntityNotFoundException {
        LOGGER.debug("Updating Businesspersonrelationshiptype with information: {}", businesspersonrelationshiptype);
        this.wmGenericDao.update(businesspersonrelationshiptype);

        Integer businesspersonrelationshiptypeId = businesspersonrelationshiptype.getPk();

        return this.wmGenericDao.findById(businesspersonrelationshiptypeId);
    }

    @Transactional(value = "LSUCTransactionManager")
	@Override
	public Businesspersonrelationshiptype delete(Integer businesspersonrelationshiptypeId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Businesspersonrelationshiptype with id: {}", businesspersonrelationshiptypeId);
        Businesspersonrelationshiptype deleted = this.wmGenericDao.findById(businesspersonrelationshiptypeId);
        if (deleted == null) {
            LOGGER.debug("No Businesspersonrelationshiptype found with id: {}", businesspersonrelationshiptypeId);
            throw new EntityNotFoundException(String.valueOf(businesspersonrelationshiptypeId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public Page<Businesspersonrelationshiptype> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Businesspersonrelationshiptypes");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Page<Businesspersonrelationshiptype> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Businesspersonrelationshiptypes");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service LSUC for table Businesspersonrelationshiptype to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Page<Businesspersonrelationship> findAssociatedBusinesspersonrelationships(Integer pk, Pageable pageable) {
        LOGGER.debug("Fetching all associated businesspersonrelationships");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("businesspersonrelationshiptype.pk = '" + pk + "'");

        return businesspersonrelationshipService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service BusinesspersonrelationshipService instance
	 */
	protected void setBusinesspersonrelationshipService(BusinesspersonrelationshipService service) {
        this.businesspersonrelationshipService = service;
    }

}

