/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.lsuc.lsuc.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.lsuc.lsuc.Personperson;

/**
 * Service object for domain model class {@link Personperson}.
 */
public interface PersonpersonService {

    /**
     * Creates a new Personperson. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Personperson if any.
     *
     * @param personperson Details of the Personperson to be created; value cannot be null.
     * @return The newly created Personperson.
     */
	Personperson create(Personperson personperson);


	/**
	 * Returns Personperson by given id if exists.
	 *
	 * @param personpersonId The id of the Personperson to get; value cannot be null.
	 * @return Personperson associated with the given personpersonId.
     * @throws EntityNotFoundException If no Personperson is found.
	 */
	Personperson getById(Integer personpersonId) throws EntityNotFoundException;

    /**
	 * Find and return the Personperson by given id if exists, returns null otherwise.
	 *
	 * @param personpersonId The id of the Personperson to get; value cannot be null.
	 * @return Personperson associated with the given personpersonId.
	 */
	Personperson findById(Integer personpersonId);

    /**
	 * Find and return the Personperson for given personFkParent  andpersonFkChild  if exists.
	 *
	 * @param personFkParent value of personFkParent; value cannot be null.
	 * @param personFkChild value of personFkChild; value cannot be null.
	 * @return Personperson associated with the given inputs.
     * @throws EntityNotFoundException if no matching Personperson found.
	 */
    Personperson getByPersonFkParentAndPersonFkChild(Integer personFkParent, Integer personFkChild)throws EntityNotFoundException;

	/**
	 * Updates the details of an existing Personperson. It replaces all fields of the existing Personperson with the given personperson.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on Personperson if any.
     *
	 * @param personperson The details of the Personperson to be updated; value cannot be null.
	 * @return The updated Personperson.
	 * @throws EntityNotFoundException if no Personperson is found with given input.
	 */
	Personperson update(Personperson personperson) throws EntityNotFoundException;

    /**
	 * Deletes an existing Personperson with the given id.
	 *
	 * @param personpersonId The id of the Personperson to be deleted; value cannot be null.
	 * @return The deleted Personperson.
	 * @throws EntityNotFoundException if no Personperson found with the given id.
	 */
	Personperson delete(Integer personpersonId) throws EntityNotFoundException;

	/**
	 * Find all Personpeople matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Personpeople.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<Personperson> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all Personpeople matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Personpeople.
     *
     * @see Pageable
     * @see Page
	 */
    Page<Personperson> findAll(String query, Pageable pageable);

    /**
	 * Exports all Personpeople matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the Personpeople in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the Personperson.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}

