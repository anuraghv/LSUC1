/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.lsuc.lsuc.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.lsuc.lsuc.Businessphonecontact;
import com.lsuc.lsuc.Personphonecontact;
import com.lsuc.lsuc.Phonetype;


/**
 * ServiceImpl object for domain model class Phonetype.
 *
 * @see Phonetype
 */
@Service("LSUC.PhonetypeService")
public class PhonetypeServiceImpl implements PhonetypeService {

    private static final Logger LOGGER = LoggerFactory.getLogger(PhonetypeServiceImpl.class);

    @Autowired
	@Qualifier("LSUC.PersonphonecontactService")
	private PersonphonecontactService personphonecontactService;

    @Autowired
	@Qualifier("LSUC.BusinessphonecontactService")
	private BusinessphonecontactService businessphonecontactService;

    @Autowired
    @Qualifier("LSUC.PhonetypeDao")
    private WMGenericDao<Phonetype, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Phonetype, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "LSUCTransactionManager")
    @Override
	public Phonetype create(Phonetype phonetype) {
        LOGGER.debug("Creating a new Phonetype with information: {}", phonetype);
        Phonetype phonetypeCreated = this.wmGenericDao.create(phonetype);
        if(phonetypeCreated.getPersonphonecontacts() != null) {
            for(Personphonecontact personphonecontact : phonetypeCreated.getPersonphonecontacts()) {
                personphonecontact.setPhonetype(phonetypeCreated);
                LOGGER.debug("Creating a new child Personphonecontact with information: {}", personphonecontact);
                personphonecontactService.create(personphonecontact);
            }
        }

        if(phonetypeCreated.getBusinessphonecontacts() != null) {
            for(Businessphonecontact businessphonecontact : phonetypeCreated.getBusinessphonecontacts()) {
                businessphonecontact.setPhonetype(phonetypeCreated);
                LOGGER.debug("Creating a new child Businessphonecontact with information: {}", businessphonecontact);
                businessphonecontactService.create(businessphonecontact);
            }
        }
        return phonetypeCreated;
    }

	@Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public Phonetype getById(Integer phonetypeId) throws EntityNotFoundException {
        LOGGER.debug("Finding Phonetype by id: {}", phonetypeId);
        Phonetype phonetype = this.wmGenericDao.findById(phonetypeId);
        if (phonetype == null){
            LOGGER.debug("No Phonetype found with id: {}", phonetypeId);
            throw new EntityNotFoundException(String.valueOf(phonetypeId));
        }
        return phonetype;
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public Phonetype findById(Integer phonetypeId) {
        LOGGER.debug("Finding Phonetype by id: {}", phonetypeId);
        return this.wmGenericDao.findById(phonetypeId);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Phonetype getByCode(String code) {
        Map<String, Object> codeMap = new HashMap<>();
        codeMap.put("code", code);

        LOGGER.debug("Finding Phonetype by unique keys: {}", codeMap);
        Phonetype phonetype = this.wmGenericDao.findByUniqueKey(codeMap);

        if (phonetype == null){
            LOGGER.debug("No Phonetype found with given unique key values: {}", codeMap);
            throw new EntityNotFoundException(String.valueOf(codeMap));
        }

        return phonetype;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "LSUCTransactionManager")
	@Override
	public Phonetype update(Phonetype phonetype) throws EntityNotFoundException {
        LOGGER.debug("Updating Phonetype with information: {}", phonetype);
        this.wmGenericDao.update(phonetype);

        Integer phonetypeId = phonetype.getPk();

        return this.wmGenericDao.findById(phonetypeId);
    }

    @Transactional(value = "LSUCTransactionManager")
	@Override
	public Phonetype delete(Integer phonetypeId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Phonetype with id: {}", phonetypeId);
        Phonetype deleted = this.wmGenericDao.findById(phonetypeId);
        if (deleted == null) {
            LOGGER.debug("No Phonetype found with id: {}", phonetypeId);
            throw new EntityNotFoundException(String.valueOf(phonetypeId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public Page<Phonetype> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Phonetypes");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Page<Phonetype> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Phonetypes");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service LSUC for table Phonetype to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Page<Personphonecontact> findAssociatedPersonphonecontacts(Integer pk, Pageable pageable) {
        LOGGER.debug("Fetching all associated personphonecontacts");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("phonetype.pk = '" + pk + "'");

        return personphonecontactService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Page<Businessphonecontact> findAssociatedBusinessphonecontacts(Integer pk, Pageable pageable) {
        LOGGER.debug("Fetching all associated businessphonecontacts");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("phonetype.pk = '" + pk + "'");

        return businessphonecontactService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PersonphonecontactService instance
	 */
	protected void setPersonphonecontactService(PersonphonecontactService service) {
        this.personphonecontactService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service BusinessphonecontactService instance
	 */
	protected void setBusinessphonecontactService(BusinessphonecontactService service) {
        this.businessphonecontactService = service;
    }

}

