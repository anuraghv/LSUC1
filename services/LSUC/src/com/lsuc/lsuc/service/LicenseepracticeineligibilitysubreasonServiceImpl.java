/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.lsuc.lsuc.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.sql.Date;
import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.lsuc.lsuc.Licenseepracticeineligibilitysubreason;


/**
 * ServiceImpl object for domain model class Licenseepracticeineligibilitysubreason.
 *
 * @see Licenseepracticeineligibilitysubreason
 */
@Service("LSUC.LicenseepracticeineligibilitysubreasonService")
public class LicenseepracticeineligibilitysubreasonServiceImpl implements LicenseepracticeineligibilitysubreasonService {

    private static final Logger LOGGER = LoggerFactory.getLogger(LicenseepracticeineligibilitysubreasonServiceImpl.class);


    @Autowired
    @Qualifier("LSUC.LicenseepracticeineligibilitysubreasonDao")
    private WMGenericDao<Licenseepracticeineligibilitysubreason, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Licenseepracticeineligibilitysubreason, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "LSUCTransactionManager")
    @Override
	public Licenseepracticeineligibilitysubreason create(Licenseepracticeineligibilitysubreason licenseepracticeineligibilitysubreason) {
        LOGGER.debug("Creating a new Licenseepracticeineligibilitysubreason with information: {}", licenseepracticeineligibilitysubreason);
        Licenseepracticeineligibilitysubreason licenseepracticeineligibilitysubreasonCreated = this.wmGenericDao.create(licenseepracticeineligibilitysubreason);
        return licenseepracticeineligibilitysubreasonCreated;
    }

	@Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public Licenseepracticeineligibilitysubreason getById(Integer licenseepracticeineligibilitysubreasonId) throws EntityNotFoundException {
        LOGGER.debug("Finding Licenseepracticeineligibilitysubreason by id: {}", licenseepracticeineligibilitysubreasonId);
        Licenseepracticeineligibilitysubreason licenseepracticeineligibilitysubreason = this.wmGenericDao.findById(licenseepracticeineligibilitysubreasonId);
        if (licenseepracticeineligibilitysubreason == null){
            LOGGER.debug("No Licenseepracticeineligibilitysubreason found with id: {}", licenseepracticeineligibilitysubreasonId);
            throw new EntityNotFoundException(String.valueOf(licenseepracticeineligibilitysubreasonId));
        }
        return licenseepracticeineligibilitysubreason;
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public Licenseepracticeineligibilitysubreason findById(Integer licenseepracticeineligibilitysubreasonId) {
        LOGGER.debug("Finding Licenseepracticeineligibilitysubreason by id: {}", licenseepracticeineligibilitysubreasonId);
        return this.wmGenericDao.findById(licenseepracticeineligibilitysubreasonId);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Licenseepracticeineligibilitysubreason getByEffectiveFromDateAndEffectiveToDateAndLicenseePracticeIneligibilityReasonFkAndPracticeIneligibilitySubReasonFk(Date effectiveFromDate, Date effectiveToDate, Integer licenseePracticeIneligibilityReasonFk, Integer practiceIneligibilitySubReasonFk) {
        Map<String, Object> effectiveFromDateAndEffectiveToDateAndLicenseePracticeIneligibilityReasonFkAndPracticeIneligibilitySubReasonFkMap = new HashMap<>();
        effectiveFromDateAndEffectiveToDateAndLicenseePracticeIneligibilityReasonFkAndPracticeIneligibilitySubReasonFkMap.put("effectiveFromDate", effectiveFromDate);
        effectiveFromDateAndEffectiveToDateAndLicenseePracticeIneligibilityReasonFkAndPracticeIneligibilitySubReasonFkMap.put("effectiveToDate", effectiveToDate);
        effectiveFromDateAndEffectiveToDateAndLicenseePracticeIneligibilityReasonFkAndPracticeIneligibilitySubReasonFkMap.put("licenseePracticeIneligibilityReasonFk", licenseePracticeIneligibilityReasonFk);
        effectiveFromDateAndEffectiveToDateAndLicenseePracticeIneligibilityReasonFkAndPracticeIneligibilitySubReasonFkMap.put("practiceIneligibilitySubReasonFk", practiceIneligibilitySubReasonFk);

        LOGGER.debug("Finding Licenseepracticeineligibilitysubreason by unique keys: {}", effectiveFromDateAndEffectiveToDateAndLicenseePracticeIneligibilityReasonFkAndPracticeIneligibilitySubReasonFkMap);
        Licenseepracticeineligibilitysubreason licenseepracticeineligibilitysubreason = this.wmGenericDao.findByUniqueKey(effectiveFromDateAndEffectiveToDateAndLicenseePracticeIneligibilityReasonFkAndPracticeIneligibilitySubReasonFkMap);

        if (licenseepracticeineligibilitysubreason == null){
            LOGGER.debug("No Licenseepracticeineligibilitysubreason found with given unique key values: {}", effectiveFromDateAndEffectiveToDateAndLicenseePracticeIneligibilityReasonFkAndPracticeIneligibilitySubReasonFkMap);
            throw new EntityNotFoundException(String.valueOf(effectiveFromDateAndEffectiveToDateAndLicenseePracticeIneligibilityReasonFkAndPracticeIneligibilitySubReasonFkMap));
        }

        return licenseepracticeineligibilitysubreason;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "LSUCTransactionManager")
	@Override
	public Licenseepracticeineligibilitysubreason update(Licenseepracticeineligibilitysubreason licenseepracticeineligibilitysubreason) throws EntityNotFoundException {
        LOGGER.debug("Updating Licenseepracticeineligibilitysubreason with information: {}", licenseepracticeineligibilitysubreason);
        this.wmGenericDao.update(licenseepracticeineligibilitysubreason);

        Integer licenseepracticeineligibilitysubreasonId = licenseepracticeineligibilitysubreason.getPk();

        return this.wmGenericDao.findById(licenseepracticeineligibilitysubreasonId);
    }

    @Transactional(value = "LSUCTransactionManager")
	@Override
	public Licenseepracticeineligibilitysubreason delete(Integer licenseepracticeineligibilitysubreasonId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Licenseepracticeineligibilitysubreason with id: {}", licenseepracticeineligibilitysubreasonId);
        Licenseepracticeineligibilitysubreason deleted = this.wmGenericDao.findById(licenseepracticeineligibilitysubreasonId);
        if (deleted == null) {
            LOGGER.debug("No Licenseepracticeineligibilitysubreason found with id: {}", licenseepracticeineligibilitysubreasonId);
            throw new EntityNotFoundException(String.valueOf(licenseepracticeineligibilitysubreasonId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public Page<Licenseepracticeineligibilitysubreason> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Licenseepracticeineligibilitysubreasons");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Page<Licenseepracticeineligibilitysubreason> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Licenseepracticeineligibilitysubreasons");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service LSUC for table Licenseepracticeineligibilitysubreason to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

