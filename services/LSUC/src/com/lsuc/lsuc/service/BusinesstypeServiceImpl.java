/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.lsuc.lsuc.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.lsuc.lsuc.Business;
import com.lsuc.lsuc.Businesstype;


/**
 * ServiceImpl object for domain model class Businesstype.
 *
 * @see Businesstype
 */
@Service("LSUC.BusinesstypeService")
public class BusinesstypeServiceImpl implements BusinesstypeService {

    private static final Logger LOGGER = LoggerFactory.getLogger(BusinesstypeServiceImpl.class);

    @Autowired
	@Qualifier("LSUC.BusinessService")
	private BusinessService businessService;

    @Autowired
    @Qualifier("LSUC.BusinesstypeDao")
    private WMGenericDao<Businesstype, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Businesstype, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "LSUCTransactionManager")
    @Override
	public Businesstype create(Businesstype businesstype) {
        LOGGER.debug("Creating a new Businesstype with information: {}", businesstype);
        Businesstype businesstypeCreated = this.wmGenericDao.create(businesstype);
        if(businesstypeCreated.getBusinesses() != null) {
            for(Business businesse : businesstypeCreated.getBusinesses()) {
                businesse.setBusinesstype(businesstypeCreated);
                LOGGER.debug("Creating a new child Business with information: {}", businesse);
                businessService.create(businesse);
            }
        }
        return businesstypeCreated;
    }

	@Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public Businesstype getById(Integer businesstypeId) throws EntityNotFoundException {
        LOGGER.debug("Finding Businesstype by id: {}", businesstypeId);
        Businesstype businesstype = this.wmGenericDao.findById(businesstypeId);
        if (businesstype == null){
            LOGGER.debug("No Businesstype found with id: {}", businesstypeId);
            throw new EntityNotFoundException(String.valueOf(businesstypeId));
        }
        return businesstype;
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public Businesstype findById(Integer businesstypeId) {
        LOGGER.debug("Finding Businesstype by id: {}", businesstypeId);
        return this.wmGenericDao.findById(businesstypeId);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Businesstype getByCode(String code) {
        Map<String, Object> codeMap = new HashMap<>();
        codeMap.put("code", code);

        LOGGER.debug("Finding Businesstype by unique keys: {}", codeMap);
        Businesstype businesstype = this.wmGenericDao.findByUniqueKey(codeMap);

        if (businesstype == null){
            LOGGER.debug("No Businesstype found with given unique key values: {}", codeMap);
            throw new EntityNotFoundException(String.valueOf(codeMap));
        }

        return businesstype;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "LSUCTransactionManager")
	@Override
	public Businesstype update(Businesstype businesstype) throws EntityNotFoundException {
        LOGGER.debug("Updating Businesstype with information: {}", businesstype);
        this.wmGenericDao.update(businesstype);

        Integer businesstypeId = businesstype.getPk();

        return this.wmGenericDao.findById(businesstypeId);
    }

    @Transactional(value = "LSUCTransactionManager")
	@Override
	public Businesstype delete(Integer businesstypeId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Businesstype with id: {}", businesstypeId);
        Businesstype deleted = this.wmGenericDao.findById(businesstypeId);
        if (deleted == null) {
            LOGGER.debug("No Businesstype found with id: {}", businesstypeId);
            throw new EntityNotFoundException(String.valueOf(businesstypeId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public Page<Businesstype> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Businesstypes");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Page<Businesstype> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Businesstypes");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service LSUC for table Businesstype to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Page<Business> findAssociatedBusinesses(Integer pk, Pageable pageable) {
        LOGGER.debug("Fetching all associated businesses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("businesstype.pk = '" + pk + "'");

        return businessService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service BusinessService instance
	 */
	protected void setBusinessService(BusinessService service) {
        this.businessService = service;
    }

}

