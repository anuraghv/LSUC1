/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.lsuc.lsuc.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.lsuc.lsuc.Addresstype;
import com.lsuc.lsuc.Businessaddress;
import com.lsuc.lsuc.Organizationalunitaddress;
import com.lsuc.lsuc.Personaddress;


/**
 * ServiceImpl object for domain model class Addresstype.
 *
 * @see Addresstype
 */
@Service("LSUC.AddresstypeService")
public class AddresstypeServiceImpl implements AddresstypeService {

    private static final Logger LOGGER = LoggerFactory.getLogger(AddresstypeServiceImpl.class);

    @Autowired
	@Qualifier("LSUC.PersonaddressService")
	private PersonaddressService personaddressService;

    @Autowired
	@Qualifier("LSUC.OrganizationalunitaddressService")
	private OrganizationalunitaddressService organizationalunitaddressService;

    @Autowired
	@Qualifier("LSUC.BusinessaddressService")
	private BusinessaddressService businessaddressService;

    @Autowired
    @Qualifier("LSUC.AddresstypeDao")
    private WMGenericDao<Addresstype, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Addresstype, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "LSUCTransactionManager")
    @Override
	public Addresstype create(Addresstype addresstype) {
        LOGGER.debug("Creating a new Addresstype with information: {}", addresstype);
        Addresstype addresstypeCreated = this.wmGenericDao.create(addresstype);
        if(addresstypeCreated.getBusinessaddresses() != null) {
            for(Businessaddress businessaddresse : addresstypeCreated.getBusinessaddresses()) {
                businessaddresse.setAddresstype(addresstypeCreated);
                LOGGER.debug("Creating a new child Businessaddress with information: {}", businessaddresse);
                businessaddressService.create(businessaddresse);
            }
        }

        if(addresstypeCreated.getOrganizationalunitaddresses() != null) {
            for(Organizationalunitaddress organizationalunitaddresse : addresstypeCreated.getOrganizationalunitaddresses()) {
                organizationalunitaddresse.setAddresstype(addresstypeCreated);
                LOGGER.debug("Creating a new child Organizationalunitaddress with information: {}", organizationalunitaddresse);
                organizationalunitaddressService.create(organizationalunitaddresse);
            }
        }

        if(addresstypeCreated.getPersonaddresses() != null) {
            for(Personaddress personaddresse : addresstypeCreated.getPersonaddresses()) {
                personaddresse.setAddresstype(addresstypeCreated);
                LOGGER.debug("Creating a new child Personaddress with information: {}", personaddresse);
                personaddressService.create(personaddresse);
            }
        }
        return addresstypeCreated;
    }

	@Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public Addresstype getById(Integer addresstypeId) throws EntityNotFoundException {
        LOGGER.debug("Finding Addresstype by id: {}", addresstypeId);
        Addresstype addresstype = this.wmGenericDao.findById(addresstypeId);
        if (addresstype == null){
            LOGGER.debug("No Addresstype found with id: {}", addresstypeId);
            throw new EntityNotFoundException(String.valueOf(addresstypeId));
        }
        return addresstype;
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public Addresstype findById(Integer addresstypeId) {
        LOGGER.debug("Finding Addresstype by id: {}", addresstypeId);
        return this.wmGenericDao.findById(addresstypeId);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Addresstype getByCode(String code) {
        Map<String, Object> codeMap = new HashMap<>();
        codeMap.put("code", code);

        LOGGER.debug("Finding Addresstype by unique keys: {}", codeMap);
        Addresstype addresstype = this.wmGenericDao.findByUniqueKey(codeMap);

        if (addresstype == null){
            LOGGER.debug("No Addresstype found with given unique key values: {}", codeMap);
            throw new EntityNotFoundException(String.valueOf(codeMap));
        }

        return addresstype;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "LSUCTransactionManager")
	@Override
	public Addresstype update(Addresstype addresstype) throws EntityNotFoundException {
        LOGGER.debug("Updating Addresstype with information: {}", addresstype);
        this.wmGenericDao.update(addresstype);

        Integer addresstypeId = addresstype.getPk();

        return this.wmGenericDao.findById(addresstypeId);
    }

    @Transactional(value = "LSUCTransactionManager")
	@Override
	public Addresstype delete(Integer addresstypeId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Addresstype with id: {}", addresstypeId);
        Addresstype deleted = this.wmGenericDao.findById(addresstypeId);
        if (deleted == null) {
            LOGGER.debug("No Addresstype found with id: {}", addresstypeId);
            throw new EntityNotFoundException(String.valueOf(addresstypeId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public Page<Addresstype> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Addresstypes");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Page<Addresstype> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Addresstypes");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service LSUC for table Addresstype to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Page<Businessaddress> findAssociatedBusinessaddresses(Integer pk, Pageable pageable) {
        LOGGER.debug("Fetching all associated businessaddresses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("addresstype.pk = '" + pk + "'");

        return businessaddressService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Page<Organizationalunitaddress> findAssociatedOrganizationalunitaddresses(Integer pk, Pageable pageable) {
        LOGGER.debug("Fetching all associated organizationalunitaddresses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("addresstype.pk = '" + pk + "'");

        return organizationalunitaddressService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Page<Personaddress> findAssociatedPersonaddresses(Integer pk, Pageable pageable) {
        LOGGER.debug("Fetching all associated personaddresses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("addresstype.pk = '" + pk + "'");

        return personaddressService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PersonaddressService instance
	 */
	protected void setPersonaddressService(PersonaddressService service) {
        this.personaddressService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service OrganizationalunitaddressService instance
	 */
	protected void setOrganizationalunitaddressService(OrganizationalunitaddressService service) {
        this.organizationalunitaddressService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service BusinessaddressService instance
	 */
	protected void setBusinessaddressService(BusinessaddressService service) {
        this.businessaddressService = service;
    }

}

