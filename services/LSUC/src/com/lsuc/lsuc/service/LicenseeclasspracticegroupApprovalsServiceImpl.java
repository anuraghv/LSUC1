/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.lsuc.lsuc.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.sql.Date;
import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.lsuc.lsuc.LicenseeclasspracticegroupApprovals;


/**
 * ServiceImpl object for domain model class LicenseeclasspracticegroupApprovals.
 *
 * @see LicenseeclasspracticegroupApprovals
 */
@Service("LSUC.LicenseeclasspracticegroupApprovalsService")
public class LicenseeclasspracticegroupApprovalsServiceImpl implements LicenseeclasspracticegroupApprovalsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(LicenseeclasspracticegroupApprovalsServiceImpl.class);


    @Autowired
    @Qualifier("LSUC.LicenseeclasspracticegroupApprovalsDao")
    private WMGenericDao<LicenseeclasspracticegroupApprovals, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<LicenseeclasspracticegroupApprovals, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "LSUCTransactionManager")
    @Override
	public LicenseeclasspracticegroupApprovals create(LicenseeclasspracticegroupApprovals licenseeclasspracticegroupApprovals) {
        LOGGER.debug("Creating a new LicenseeclasspracticegroupApprovals with information: {}", licenseeclasspracticegroupApprovals);
        LicenseeclasspracticegroupApprovals licenseeclasspracticegroupApprovalsCreated = this.wmGenericDao.create(licenseeclasspracticegroupApprovals);
        return licenseeclasspracticegroupApprovalsCreated;
    }

	@Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public LicenseeclasspracticegroupApprovals getById(Integer licenseeclasspracticegroupapprovalsId) throws EntityNotFoundException {
        LOGGER.debug("Finding LicenseeclasspracticegroupApprovals by id: {}", licenseeclasspracticegroupapprovalsId);
        LicenseeclasspracticegroupApprovals licenseeclasspracticegroupApprovals = this.wmGenericDao.findById(licenseeclasspracticegroupapprovalsId);
        if (licenseeclasspracticegroupApprovals == null){
            LOGGER.debug("No LicenseeclasspracticegroupApprovals found with id: {}", licenseeclasspracticegroupapprovalsId);
            throw new EntityNotFoundException(String.valueOf(licenseeclasspracticegroupapprovalsId));
        }
        return licenseeclasspracticegroupApprovals;
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public LicenseeclasspracticegroupApprovals findById(Integer licenseeclasspracticegroupapprovalsId) {
        LOGGER.debug("Finding LicenseeclasspracticegroupApprovals by id: {}", licenseeclasspracticegroupapprovalsId);
        return this.wmGenericDao.findById(licenseeclasspracticegroupapprovalsId);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public LicenseeclasspracticegroupApprovals getByLicenseeFkAndNewClassPracticeGroupFkAndNewEffectiveFromDateAndNewEffectiveToDate(Integer licenseeFk, Integer newClassPracticeGroupFk, Date newEffectiveFromDate, Date newEffectiveToDate) {
        Map<String, Object> licenseeFkAndNewClassPracticeGroupFkAndNewEffectiveFromDateAndNewEffectiveToDateMap = new HashMap<>();
        licenseeFkAndNewClassPracticeGroupFkAndNewEffectiveFromDateAndNewEffectiveToDateMap.put("licenseeFk", licenseeFk);
        licenseeFkAndNewClassPracticeGroupFkAndNewEffectiveFromDateAndNewEffectiveToDateMap.put("newClassPracticeGroupFk", newClassPracticeGroupFk);
        licenseeFkAndNewClassPracticeGroupFkAndNewEffectiveFromDateAndNewEffectiveToDateMap.put("newEffectiveFromDate", newEffectiveFromDate);
        licenseeFkAndNewClassPracticeGroupFkAndNewEffectiveFromDateAndNewEffectiveToDateMap.put("newEffectiveToDate", newEffectiveToDate);

        LOGGER.debug("Finding LicenseeclasspracticegroupApprovals by unique keys: {}", licenseeFkAndNewClassPracticeGroupFkAndNewEffectiveFromDateAndNewEffectiveToDateMap);
        LicenseeclasspracticegroupApprovals licenseeclasspracticegroupApprovals = this.wmGenericDao.findByUniqueKey(licenseeFkAndNewClassPracticeGroupFkAndNewEffectiveFromDateAndNewEffectiveToDateMap);

        if (licenseeclasspracticegroupApprovals == null){
            LOGGER.debug("No LicenseeclasspracticegroupApprovals found with given unique key values: {}", licenseeFkAndNewClassPracticeGroupFkAndNewEffectiveFromDateAndNewEffectiveToDateMap);
            throw new EntityNotFoundException(String.valueOf(licenseeFkAndNewClassPracticeGroupFkAndNewEffectiveFromDateAndNewEffectiveToDateMap));
        }

        return licenseeclasspracticegroupApprovals;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "LSUCTransactionManager")
	@Override
	public LicenseeclasspracticegroupApprovals update(LicenseeclasspracticegroupApprovals licenseeclasspracticegroupApprovals) throws EntityNotFoundException {
        LOGGER.debug("Updating LicenseeclasspracticegroupApprovals with information: {}", licenseeclasspracticegroupApprovals);
        this.wmGenericDao.update(licenseeclasspracticegroupApprovals);

        Integer licenseeclasspracticegroupapprovalsId = licenseeclasspracticegroupApprovals.getPk();

        return this.wmGenericDao.findById(licenseeclasspracticegroupapprovalsId);
    }

    @Transactional(value = "LSUCTransactionManager")
	@Override
	public LicenseeclasspracticegroupApprovals delete(Integer licenseeclasspracticegroupapprovalsId) throws EntityNotFoundException {
        LOGGER.debug("Deleting LicenseeclasspracticegroupApprovals with id: {}", licenseeclasspracticegroupapprovalsId);
        LicenseeclasspracticegroupApprovals deleted = this.wmGenericDao.findById(licenseeclasspracticegroupapprovalsId);
        if (deleted == null) {
            LOGGER.debug("No LicenseeclasspracticegroupApprovals found with id: {}", licenseeclasspracticegroupapprovalsId);
            throw new EntityNotFoundException(String.valueOf(licenseeclasspracticegroupapprovalsId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public Page<LicenseeclasspracticegroupApprovals> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all LicenseeclasspracticegroupApprovals");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Page<LicenseeclasspracticegroupApprovals> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all LicenseeclasspracticegroupApprovals");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service LSUC for table LicenseeclasspracticegroupApprovals to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

