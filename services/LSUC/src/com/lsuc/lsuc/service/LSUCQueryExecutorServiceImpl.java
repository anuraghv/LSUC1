/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/

package com.lsuc.lsuc.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.query.WMQueryExecutor;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.file.model.Downloadable;

import com.lsuc.lsuc.models.query.*;

@Service
public class LSUCQueryExecutorServiceImpl implements LSUCQueryExecutorService {

    private static final Logger LOGGER = LoggerFactory.getLogger(LSUCQueryExecutorServiceImpl.class);

    @Autowired
    @Qualifier("LSUCWMQueryExecutor")
    private WMQueryExecutor queryExecutor;

    @Transactional(value = "LSUCTransactionManager")
    @Override
    public Integer executeUpdateStatus(UpdateStatusRequest updateStatusRequest) {
        Map params = new HashMap(2);

        params.put("status", updateStatusRequest.getStatus());
        params.put("pk", updateStatusRequest.getPk());

        return queryExecutor.executeNamedQueryForUpdate("updateStatus", params);
    }

    @Transactional(value = "LSUCTransactionManager")
    @Override
    public Integer executeApproveEditRecord(ApproveEditRecordRequest approveEditRecordRequest) {
        Map params = new HashMap(1);

        params.put("approvalPk", approveEditRecordRequest.getApprovalPk());

        return queryExecutor.executeNamedQueryForUpdate("approveEditRecord", params);
    }

    @Transactional(value = "LSUCTransactionManager")
    @Override
    public Integer executeApprovedNewRecord(ApprovedNewRecordRequest approvedNewRecordRequest) {
        Map params = new HashMap(1);

        params.put("primaryKey", approvedNewRecordRequest.getPrimaryKey());

        return queryExecutor.executeNamedQueryForUpdate("approvedNewRecord", params);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Page<GetStatusChangeDetailsResponse> executeGetStatusChangeDetails(Integer personId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("personID", personId);

        return queryExecutor.executeNamedQuery("getStatusChangeDetails", params, GetStatusChangeDetailsResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Downloadable exportGetStatusChangeDetails(ExportType exportType, Integer personId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("personID", personId);

        return queryExecutor.exportNamedQueryData("getStatusChangeDetails", params, exportType, GetStatusChangeDetailsResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Page<ExpirationStatusResponse> executeExpirationStatus(Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.executeNamedQuery("expirationStatus", params, ExpirationStatusResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Downloadable exportExpirationStatus(ExportType exportType, Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.exportNamedQueryData("expirationStatus", params, exportType, ExpirationStatusResponse.class, pageable);
    }

}


