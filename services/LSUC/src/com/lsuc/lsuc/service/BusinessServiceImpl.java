/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.lsuc.lsuc.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.lsuc.lsuc.Business;
import com.lsuc.lsuc.Businessaddress;
import com.lsuc.lsuc.Businessbusiness;
import com.lsuc.lsuc.Businessemailcontact;
import com.lsuc.lsuc.Businessperson;
import com.lsuc.lsuc.Businessphonecontact;
import com.lsuc.lsuc.Businesssocialmediacontact;
import com.lsuc.lsuc.Licenseeinsurancepolicy;
import com.lsuc.lsuc.Organizationalunit;


/**
 * ServiceImpl object for domain model class Business.
 *
 * @see Business
 */
@Service("LSUC.BusinessService")
public class BusinessServiceImpl implements BusinessService {

    private static final Logger LOGGER = LoggerFactory.getLogger(BusinessServiceImpl.class);

    @Autowired
	@Qualifier("LSUC.BusinessemailcontactService")
	private BusinessemailcontactService businessemailcontactService;

    @Autowired
	@Qualifier("LSUC.BusinessaddressService")
	private BusinessaddressService businessaddressService;

    @Autowired
	@Qualifier("LSUC.BusinessbusinessService")
	private BusinessbusinessService businessbusinessService;

    @Autowired
	@Qualifier("LSUC.LicenseeinsurancepolicyService")
	private LicenseeinsurancepolicyService licenseeinsurancepolicyService;

    @Autowired
	@Qualifier("LSUC.BusinesspersonService")
	private BusinesspersonService businesspersonService;

    @Autowired
	@Qualifier("LSUC.BusinessphonecontactService")
	private BusinessphonecontactService businessphonecontactService;

    @Autowired
	@Qualifier("LSUC.OrganizationalunitService")
	private OrganizationalunitService organizationalunitService;

    @Autowired
	@Qualifier("LSUC.BusinesssocialmediacontactService")
	private BusinesssocialmediacontactService businesssocialmediacontactService;

    @Autowired
    @Qualifier("LSUC.BusinessDao")
    private WMGenericDao<Business, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Business, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "LSUCTransactionManager")
    @Override
	public Business create(Business business) {
        LOGGER.debug("Creating a new Business with information: {}", business);
        Business businessCreated = this.wmGenericDao.create(business);
        if(businessCreated.getBusinesssocialmediacontacts() != null) {
            for(Businesssocialmediacontact businesssocialmediacontact : businessCreated.getBusinesssocialmediacontacts()) {
                businesssocialmediacontact.setBusiness(businessCreated);
                LOGGER.debug("Creating a new child Businesssocialmediacontact with information: {}", businesssocialmediacontact);
                businesssocialmediacontactService.create(businesssocialmediacontact);
            }
        }

        if(businessCreated.getBusinessbusinessesForBusinessFkParent() != null) {
            for(Businessbusiness businessbusinessesForBusinessFkParent : businessCreated.getBusinessbusinessesForBusinessFkParent()) {
                businessbusinessesForBusinessFkParent.setBusinessByBusinessFkParent(businessCreated);
                LOGGER.debug("Creating a new child Businessbusiness with information: {}", businessbusinessesForBusinessFkParent);
                businessbusinessService.create(businessbusinessesForBusinessFkParent);
            }
        }

        if(businessCreated.getBusinessbusinessesForBusinessFkChild() != null) {
            for(Businessbusiness businessbusinessesForBusinessFkChild : businessCreated.getBusinessbusinessesForBusinessFkChild()) {
                businessbusinessesForBusinessFkChild.setBusinessByBusinessFkChild(businessCreated);
                LOGGER.debug("Creating a new child Businessbusiness with information: {}", businessbusinessesForBusinessFkChild);
                businessbusinessService.create(businessbusinessesForBusinessFkChild);
            }
        }

        if(businessCreated.getBusinessphonecontacts() != null) {
            for(Businessphonecontact businessphonecontact : businessCreated.getBusinessphonecontacts()) {
                businessphonecontact.setBusiness(businessCreated);
                LOGGER.debug("Creating a new child Businessphonecontact with information: {}", businessphonecontact);
                businessphonecontactService.create(businessphonecontact);
            }
        }

        if(businessCreated.getBusinessaddresses() != null) {
            for(Businessaddress businessaddresse : businessCreated.getBusinessaddresses()) {
                businessaddresse.setBusiness(businessCreated);
                LOGGER.debug("Creating a new child Businessaddress with information: {}", businessaddresse);
                businessaddressService.create(businessaddresse);
            }
        }

        if(businessCreated.getBusinesspersons() != null) {
            for(Businessperson businessperson : businessCreated.getBusinesspersons()) {
                businessperson.setBusiness(businessCreated);
                LOGGER.debug("Creating a new child Businessperson with information: {}", businessperson);
                businesspersonService.create(businessperson);
            }
        }

        if(businessCreated.getOrganizationalunits() != null) {
            for(Organizationalunit organizationalunit : businessCreated.getOrganizationalunits()) {
                organizationalunit.setBusiness(businessCreated);
                LOGGER.debug("Creating a new child Organizationalunit with information: {}", organizationalunit);
                organizationalunitService.create(organizationalunit);
            }
        }

        if(businessCreated.getBusinessemailcontacts() != null) {
            for(Businessemailcontact businessemailcontact : businessCreated.getBusinessemailcontacts()) {
                businessemailcontact.setBusiness(businessCreated);
                LOGGER.debug("Creating a new child Businessemailcontact with information: {}", businessemailcontact);
                businessemailcontactService.create(businessemailcontact);
            }
        }

        if(businessCreated.getLicenseeinsurancepoliciesForBusinessFkInsuranceCompany() != null) {
            for(Licenseeinsurancepolicy licenseeinsurancepoliciesForBusinessFkInsuranceCompany : businessCreated.getLicenseeinsurancepoliciesForBusinessFkInsuranceCompany()) {
                licenseeinsurancepoliciesForBusinessFkInsuranceCompany.setBusinessByBusinessFkInsuranceCompany(businessCreated);
                LOGGER.debug("Creating a new child Licenseeinsurancepolicy with information: {}", licenseeinsurancepoliciesForBusinessFkInsuranceCompany);
                licenseeinsurancepolicyService.create(licenseeinsurancepoliciesForBusinessFkInsuranceCompany);
            }
        }

        if(businessCreated.getLicenseeinsurancepoliciesForBusinessFkInsuranceBroker() != null) {
            for(Licenseeinsurancepolicy licenseeinsurancepoliciesForBusinessFkInsuranceBroker : businessCreated.getLicenseeinsurancepoliciesForBusinessFkInsuranceBroker()) {
                licenseeinsurancepoliciesForBusinessFkInsuranceBroker.setBusinessByBusinessFkInsuranceBroker(businessCreated);
                LOGGER.debug("Creating a new child Licenseeinsurancepolicy with information: {}", licenseeinsurancepoliciesForBusinessFkInsuranceBroker);
                licenseeinsurancepolicyService.create(licenseeinsurancepoliciesForBusinessFkInsuranceBroker);
            }
        }
        return businessCreated;
    }

	@Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public Business getById(Integer businessId) throws EntityNotFoundException {
        LOGGER.debug("Finding Business by id: {}", businessId);
        Business business = this.wmGenericDao.findById(businessId);
        if (business == null){
            LOGGER.debug("No Business found with id: {}", businessId);
            throw new EntityNotFoundException(String.valueOf(businessId));
        }
        return business;
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public Business findById(Integer businessId) {
        LOGGER.debug("Finding Business by id: {}", businessId);
        return this.wmGenericDao.findById(businessId);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Business getByBusinessNumber(String businessNumber) {
        Map<String, Object> businessNumberMap = new HashMap<>();
        businessNumberMap.put("businessNumber", businessNumber);

        LOGGER.debug("Finding Business by unique keys: {}", businessNumberMap);
        Business business = this.wmGenericDao.findByUniqueKey(businessNumberMap);

        if (business == null){
            LOGGER.debug("No Business found with given unique key values: {}", businessNumberMap);
            throw new EntityNotFoundException(String.valueOf(businessNumberMap));
        }

        return business;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "LSUCTransactionManager")
	@Override
	public Business update(Business business) throws EntityNotFoundException {
        LOGGER.debug("Updating Business with information: {}", business);
        this.wmGenericDao.update(business);

        Integer businessId = business.getPk();

        return this.wmGenericDao.findById(businessId);
    }

    @Transactional(value = "LSUCTransactionManager")
	@Override
	public Business delete(Integer businessId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Business with id: {}", businessId);
        Business deleted = this.wmGenericDao.findById(businessId);
        if (deleted == null) {
            LOGGER.debug("No Business found with id: {}", businessId);
            throw new EntityNotFoundException(String.valueOf(businessId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public Page<Business> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Businesses");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Page<Business> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Businesses");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service LSUC for table Business to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Page<Businesssocialmediacontact> findAssociatedBusinesssocialmediacontacts(Integer pk, Pageable pageable) {
        LOGGER.debug("Fetching all associated businesssocialmediacontacts");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("business.pk = '" + pk + "'");

        return businesssocialmediacontactService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Page<Businessbusiness> findAssociatedBusinessbusinessesForBusinessFkParent(Integer pk, Pageable pageable) {
        LOGGER.debug("Fetching all associated businessbusinessesForBusinessFkParent");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("businessByBusinessFkParent.pk = '" + pk + "'");

        return businessbusinessService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Page<Businessbusiness> findAssociatedBusinessbusinessesForBusinessFkChild(Integer pk, Pageable pageable) {
        LOGGER.debug("Fetching all associated businessbusinessesForBusinessFkChild");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("businessByBusinessFkChild.pk = '" + pk + "'");

        return businessbusinessService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Page<Businessphonecontact> findAssociatedBusinessphonecontacts(Integer pk, Pageable pageable) {
        LOGGER.debug("Fetching all associated businessphonecontacts");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("business.pk = '" + pk + "'");

        return businessphonecontactService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Page<Businessaddress> findAssociatedBusinessaddresses(Integer pk, Pageable pageable) {
        LOGGER.debug("Fetching all associated businessaddresses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("business.pk = '" + pk + "'");

        return businessaddressService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Page<Businessperson> findAssociatedBusinesspersons(Integer pk, Pageable pageable) {
        LOGGER.debug("Fetching all associated businesspersons");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("business.pk = '" + pk + "'");

        return businesspersonService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Page<Organizationalunit> findAssociatedOrganizationalunits(Integer pk, Pageable pageable) {
        LOGGER.debug("Fetching all associated organizationalunits");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("business.pk = '" + pk + "'");

        return organizationalunitService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Page<Businessemailcontact> findAssociatedBusinessemailcontacts(Integer pk, Pageable pageable) {
        LOGGER.debug("Fetching all associated businessemailcontacts");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("business.pk = '" + pk + "'");

        return businessemailcontactService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Page<Licenseeinsurancepolicy> findAssociatedLicenseeinsurancepoliciesForBusinessFkInsuranceCompany(Integer pk, Pageable pageable) {
        LOGGER.debug("Fetching all associated licenseeinsurancepoliciesForBusinessFkInsuranceCompany");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("businessByBusinessFkInsuranceCompany.pk = '" + pk + "'");

        return licenseeinsurancepolicyService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Page<Licenseeinsurancepolicy> findAssociatedLicenseeinsurancepoliciesForBusinessFkInsuranceBroker(Integer pk, Pageable pageable) {
        LOGGER.debug("Fetching all associated licenseeinsurancepoliciesForBusinessFkInsuranceBroker");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("businessByBusinessFkInsuranceBroker.pk = '" + pk + "'");

        return licenseeinsurancepolicyService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service BusinessemailcontactService instance
	 */
	protected void setBusinessemailcontactService(BusinessemailcontactService service) {
        this.businessemailcontactService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service BusinessaddressService instance
	 */
	protected void setBusinessaddressService(BusinessaddressService service) {
        this.businessaddressService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service BusinessbusinessService instance
	 */
	protected void setBusinessbusinessService(BusinessbusinessService service) {
        this.businessbusinessService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service LicenseeinsurancepolicyService instance
	 */
	protected void setLicenseeinsurancepolicyService(LicenseeinsurancepolicyService service) {
        this.licenseeinsurancepolicyService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service BusinesspersonService instance
	 */
	protected void setBusinesspersonService(BusinesspersonService service) {
        this.businesspersonService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service BusinessphonecontactService instance
	 */
	protected void setBusinessphonecontactService(BusinessphonecontactService service) {
        this.businessphonecontactService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service OrganizationalunitService instance
	 */
	protected void setOrganizationalunitService(OrganizationalunitService service) {
        this.organizationalunitService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service BusinesssocialmediacontactService instance
	 */
	protected void setBusinesssocialmediacontactService(BusinesssocialmediacontactService service) {
        this.businesssocialmediacontactService = service;
    }

}

