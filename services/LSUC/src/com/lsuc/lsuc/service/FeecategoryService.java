/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.lsuc.lsuc.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.lsuc.lsuc.Feecategory;
import com.lsuc.lsuc.Licensee;

/**
 * Service object for domain model class {@link Feecategory}.
 */
public interface FeecategoryService {

    /**
     * Creates a new Feecategory. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Feecategory if any.
     *
     * @param feecategory Details of the Feecategory to be created; value cannot be null.
     * @return The newly created Feecategory.
     */
	Feecategory create(Feecategory feecategory);


	/**
	 * Returns Feecategory by given id if exists.
	 *
	 * @param feecategoryId The id of the Feecategory to get; value cannot be null.
	 * @return Feecategory associated with the given feecategoryId.
     * @throws EntityNotFoundException If no Feecategory is found.
	 */
	Feecategory getById(Integer feecategoryId) throws EntityNotFoundException;

    /**
	 * Find and return the Feecategory by given id if exists, returns null otherwise.
	 *
	 * @param feecategoryId The id of the Feecategory to get; value cannot be null.
	 * @return Feecategory associated with the given feecategoryId.
	 */
	Feecategory findById(Integer feecategoryId);

    /**
	 * Find and return the Feecategory for given code  if exists.
	 *
	 * @param code value of code; value cannot be null.
	 * @return Feecategory associated with the given inputs.
     * @throws EntityNotFoundException if no matching Feecategory found.
	 */
    Feecategory getByCode(String code)throws EntityNotFoundException;

	/**
	 * Updates the details of an existing Feecategory. It replaces all fields of the existing Feecategory with the given feecategory.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on Feecategory if any.
     *
	 * @param feecategory The details of the Feecategory to be updated; value cannot be null.
	 * @return The updated Feecategory.
	 * @throws EntityNotFoundException if no Feecategory is found with given input.
	 */
	Feecategory update(Feecategory feecategory) throws EntityNotFoundException;

    /**
	 * Deletes an existing Feecategory with the given id.
	 *
	 * @param feecategoryId The id of the Feecategory to be deleted; value cannot be null.
	 * @return The deleted Feecategory.
	 * @throws EntityNotFoundException if no Feecategory found with the given id.
	 */
	Feecategory delete(Integer feecategoryId) throws EntityNotFoundException;

	/**
	 * Find all Feecategories matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Feecategories.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<Feecategory> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all Feecategories matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Feecategories.
     *
     * @see Pageable
     * @see Page
	 */
    Page<Feecategory> findAll(String query, Pageable pageable);

    /**
	 * Exports all Feecategories matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the Feecategories in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the Feecategory.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated licensees for given Feecategory id.
     *
     * @param pk value of pk; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Licensee instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Licensee> findAssociatedLicensees(Integer pk, Pageable pageable);

}

