/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.lsuc.lsuc.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.sql.Date;
import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.lsuc.lsuc.Licenseeclasspracticegroup;
import com.lsuc.lsuc.LicenseeclasspracticegroupApprovals;
import com.lsuc.lsuc.Licenseepracticeineligibilityreason;


/**
 * ServiceImpl object for domain model class Licenseeclasspracticegroup.
 *
 * @see Licenseeclasspracticegroup
 */
@Service("LSUC.LicenseeclasspracticegroupService")
public class LicenseeclasspracticegroupServiceImpl implements LicenseeclasspracticegroupService {

    private static final Logger LOGGER = LoggerFactory.getLogger(LicenseeclasspracticegroupServiceImpl.class);

    @Autowired
	@Qualifier("LSUC.LicenseeclasspracticegroupApprovalsService")
	private LicenseeclasspracticegroupApprovalsService licenseeclasspracticegroupApprovalsService;

    @Autowired
	@Qualifier("LSUC.LicenseepracticeineligibilityreasonService")
	private LicenseepracticeineligibilityreasonService licenseepracticeineligibilityreasonService;

    @Autowired
    @Qualifier("LSUC.LicenseeclasspracticegroupDao")
    private WMGenericDao<Licenseeclasspracticegroup, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Licenseeclasspracticegroup, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "LSUCTransactionManager")
    @Override
	public Licenseeclasspracticegroup create(Licenseeclasspracticegroup licenseeclasspracticegroup) {
        LOGGER.debug("Creating a new Licenseeclasspracticegroup with information: {}", licenseeclasspracticegroup);
        Licenseeclasspracticegroup licenseeclasspracticegroupCreated = this.wmGenericDao.create(licenseeclasspracticegroup);
        if(licenseeclasspracticegroupCreated.getLicenseeclasspracticegroupApprovalses() != null) {
            for(LicenseeclasspracticegroupApprovals licenseeclasspracticegroupApprovalse : licenseeclasspracticegroupCreated.getLicenseeclasspracticegroupApprovalses()) {
                licenseeclasspracticegroupApprovalse.setLicenseeclasspracticegroup(licenseeclasspracticegroupCreated);
                LOGGER.debug("Creating a new child LicenseeclasspracticegroupApprovals with information: {}", licenseeclasspracticegroupApprovalse);
                licenseeclasspracticegroupApprovalsService.create(licenseeclasspracticegroupApprovalse);
            }
        }

        if(licenseeclasspracticegroupCreated.getLicenseepracticeineligibilityreasons() != null) {
            for(Licenseepracticeineligibilityreason licenseepracticeineligibilityreason : licenseeclasspracticegroupCreated.getLicenseepracticeineligibilityreasons()) {
                licenseepracticeineligibilityreason.setLicenseeclasspracticegroup(licenseeclasspracticegroupCreated);
                LOGGER.debug("Creating a new child Licenseepracticeineligibilityreason with information: {}", licenseepracticeineligibilityreason);
                licenseepracticeineligibilityreasonService.create(licenseepracticeineligibilityreason);
            }
        }
        return licenseeclasspracticegroupCreated;
    }

	@Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public Licenseeclasspracticegroup getById(Integer licenseeclasspracticegroupId) throws EntityNotFoundException {
        LOGGER.debug("Finding Licenseeclasspracticegroup by id: {}", licenseeclasspracticegroupId);
        Licenseeclasspracticegroup licenseeclasspracticegroup = this.wmGenericDao.findById(licenseeclasspracticegroupId);
        if (licenseeclasspracticegroup == null){
            LOGGER.debug("No Licenseeclasspracticegroup found with id: {}", licenseeclasspracticegroupId);
            throw new EntityNotFoundException(String.valueOf(licenseeclasspracticegroupId));
        }
        return licenseeclasspracticegroup;
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public Licenseeclasspracticegroup findById(Integer licenseeclasspracticegroupId) {
        LOGGER.debug("Finding Licenseeclasspracticegroup by id: {}", licenseeclasspracticegroupId);
        return this.wmGenericDao.findById(licenseeclasspracticegroupId);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Licenseeclasspracticegroup getByLicenseeFkAndEffectiveFromDateAndEffectiveToDateAndClassPracticeGroupFk(Integer licenseeFk, Date effectiveFromDate, Date effectiveToDate, Integer classPracticeGroupFk) {
        Map<String, Object> licenseeFkAndEffectiveFromDateAndEffectiveToDateAndClassPracticeGroupFkMap = new HashMap<>();
        licenseeFkAndEffectiveFromDateAndEffectiveToDateAndClassPracticeGroupFkMap.put("licenseeFk", licenseeFk);
        licenseeFkAndEffectiveFromDateAndEffectiveToDateAndClassPracticeGroupFkMap.put("effectiveFromDate", effectiveFromDate);
        licenseeFkAndEffectiveFromDateAndEffectiveToDateAndClassPracticeGroupFkMap.put("effectiveToDate", effectiveToDate);
        licenseeFkAndEffectiveFromDateAndEffectiveToDateAndClassPracticeGroupFkMap.put("classPracticeGroupFk", classPracticeGroupFk);

        LOGGER.debug("Finding Licenseeclasspracticegroup by unique keys: {}", licenseeFkAndEffectiveFromDateAndEffectiveToDateAndClassPracticeGroupFkMap);
        Licenseeclasspracticegroup licenseeclasspracticegroup = this.wmGenericDao.findByUniqueKey(licenseeFkAndEffectiveFromDateAndEffectiveToDateAndClassPracticeGroupFkMap);

        if (licenseeclasspracticegroup == null){
            LOGGER.debug("No Licenseeclasspracticegroup found with given unique key values: {}", licenseeFkAndEffectiveFromDateAndEffectiveToDateAndClassPracticeGroupFkMap);
            throw new EntityNotFoundException(String.valueOf(licenseeFkAndEffectiveFromDateAndEffectiveToDateAndClassPracticeGroupFkMap));
        }

        return licenseeclasspracticegroup;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "LSUCTransactionManager")
	@Override
	public Licenseeclasspracticegroup update(Licenseeclasspracticegroup licenseeclasspracticegroup) throws EntityNotFoundException {
        LOGGER.debug("Updating Licenseeclasspracticegroup with information: {}", licenseeclasspracticegroup);
        this.wmGenericDao.update(licenseeclasspracticegroup);

        Integer licenseeclasspracticegroupId = licenseeclasspracticegroup.getPk();

        return this.wmGenericDao.findById(licenseeclasspracticegroupId);
    }

    @Transactional(value = "LSUCTransactionManager")
	@Override
	public Licenseeclasspracticegroup delete(Integer licenseeclasspracticegroupId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Licenseeclasspracticegroup with id: {}", licenseeclasspracticegroupId);
        Licenseeclasspracticegroup deleted = this.wmGenericDao.findById(licenseeclasspracticegroupId);
        if (deleted == null) {
            LOGGER.debug("No Licenseeclasspracticegroup found with id: {}", licenseeclasspracticegroupId);
            throw new EntityNotFoundException(String.valueOf(licenseeclasspracticegroupId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public Page<Licenseeclasspracticegroup> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Licenseeclasspracticegroups");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Page<Licenseeclasspracticegroup> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Licenseeclasspracticegroups");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service LSUC for table Licenseeclasspracticegroup to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Page<LicenseeclasspracticegroupApprovals> findAssociatedLicenseeclasspracticegroupApprovalses(Integer pk, Pageable pageable) {
        LOGGER.debug("Fetching all associated licenseeclasspracticegroupApprovalses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("licenseeclasspracticegroup.pk = '" + pk + "'");

        return licenseeclasspracticegroupApprovalsService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Page<Licenseepracticeineligibilityreason> findAssociatedLicenseepracticeineligibilityreasons(Integer pk, Pageable pageable) {
        LOGGER.debug("Fetching all associated licenseepracticeineligibilityreasons");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("licenseeclasspracticegroup.pk = '" + pk + "'");

        return licenseepracticeineligibilityreasonService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service LicenseeclasspracticegroupApprovalsService instance
	 */
	protected void setLicenseeclasspracticegroupApprovalsService(LicenseeclasspracticegroupApprovalsService service) {
        this.licenseeclasspracticegroupApprovalsService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service LicenseepracticeineligibilityreasonService instance
	 */
	protected void setLicenseepracticeineligibilityreasonService(LicenseepracticeineligibilityreasonService service) {
        this.licenseepracticeineligibilityreasonService = service;
    }

}

