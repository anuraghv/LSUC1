/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.lsuc.lsuc.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.lsuc.lsuc.PersonAud;
import com.lsuc.lsuc.PersonAudId;


/**
 * ServiceImpl object for domain model class PersonAud.
 *
 * @see PersonAud
 */
@Service("LSUC.PersonAudService")
public class PersonAudServiceImpl implements PersonAudService {

    private static final Logger LOGGER = LoggerFactory.getLogger(PersonAudServiceImpl.class);


    @Autowired
    @Qualifier("LSUC.PersonAudDao")
    private WMGenericDao<PersonAud, PersonAudId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<PersonAud, PersonAudId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "LSUCTransactionManager")
    @Override
	public PersonAud create(PersonAud personAud) {
        LOGGER.debug("Creating a new PersonAud with information: {}", personAud);
        PersonAud personAudCreated = this.wmGenericDao.create(personAud);
        return personAudCreated;
    }

	@Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public PersonAud getById(PersonAudId personaudId) throws EntityNotFoundException {
        LOGGER.debug("Finding PersonAud by id: {}", personaudId);
        PersonAud personAud = this.wmGenericDao.findById(personaudId);
        if (personAud == null){
            LOGGER.debug("No PersonAud found with id: {}", personaudId);
            throw new EntityNotFoundException(String.valueOf(personaudId));
        }
        return personAud;
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public PersonAud findById(PersonAudId personaudId) {
        LOGGER.debug("Finding PersonAud by id: {}", personaudId);
        return this.wmGenericDao.findById(personaudId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "LSUCTransactionManager")
	@Override
	public PersonAud update(PersonAud personAud) throws EntityNotFoundException {
        LOGGER.debug("Updating PersonAud with information: {}", personAud);
        this.wmGenericDao.update(personAud);

        PersonAudId personaudId = new PersonAudId();
        personaudId.setPk(personAud.getPk());
        personaudId.setRev(personAud.getRev());

        return this.wmGenericDao.findById(personaudId);
    }

    @Transactional(value = "LSUCTransactionManager")
	@Override
	public PersonAud delete(PersonAudId personaudId) throws EntityNotFoundException {
        LOGGER.debug("Deleting PersonAud with id: {}", personaudId);
        PersonAud deleted = this.wmGenericDao.findById(personaudId);
        if (deleted == null) {
            LOGGER.debug("No PersonAud found with id: {}", personaudId);
            throw new EntityNotFoundException(String.valueOf(personaudId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public Page<PersonAud> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all PersonAuds");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Page<PersonAud> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all PersonAuds");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service LSUC for table PersonAud to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

