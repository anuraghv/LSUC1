/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.lsuc.lsuc.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.lsuc.lsuc.Language;
import com.lsuc.lsuc.Personlanguage;
import com.lsuc.lsuc.Personnameotherlanguage;


/**
 * ServiceImpl object for domain model class Language.
 *
 * @see Language
 */
@Service("LSUC.LanguageService")
public class LanguageServiceImpl implements LanguageService {

    private static final Logger LOGGER = LoggerFactory.getLogger(LanguageServiceImpl.class);

    @Autowired
	@Qualifier("LSUC.PersonlanguageService")
	private PersonlanguageService personlanguageService;

    @Autowired
	@Qualifier("LSUC.PersonnameotherlanguageService")
	private PersonnameotherlanguageService personnameotherlanguageService;

    @Autowired
    @Qualifier("LSUC.LanguageDao")
    private WMGenericDao<Language, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Language, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "LSUCTransactionManager")
    @Override
	public Language create(Language language) {
        LOGGER.debug("Creating a new Language with information: {}", language);
        Language languageCreated = this.wmGenericDao.create(language);
        if(languageCreated.getPersonnameotherlanguages() != null) {
            for(Personnameotherlanguage personnameotherlanguage : languageCreated.getPersonnameotherlanguages()) {
                personnameotherlanguage.setLanguage(languageCreated);
                LOGGER.debug("Creating a new child Personnameotherlanguage with information: {}", personnameotherlanguage);
                personnameotherlanguageService.create(personnameotherlanguage);
            }
        }

        if(languageCreated.getPersonlanguages() != null) {
            for(Personlanguage personlanguage : languageCreated.getPersonlanguages()) {
                personlanguage.setLanguage(languageCreated);
                LOGGER.debug("Creating a new child Personlanguage with information: {}", personlanguage);
                personlanguageService.create(personlanguage);
            }
        }
        return languageCreated;
    }

	@Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public Language getById(Integer languageId) throws EntityNotFoundException {
        LOGGER.debug("Finding Language by id: {}", languageId);
        Language language = this.wmGenericDao.findById(languageId);
        if (language == null){
            LOGGER.debug("No Language found with id: {}", languageId);
            throw new EntityNotFoundException(String.valueOf(languageId));
        }
        return language;
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public Language findById(Integer languageId) {
        LOGGER.debug("Finding Language by id: {}", languageId);
        return this.wmGenericDao.findById(languageId);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Language getByCode(String code) {
        Map<String, Object> codeMap = new HashMap<>();
        codeMap.put("code", code);

        LOGGER.debug("Finding Language by unique keys: {}", codeMap);
        Language language = this.wmGenericDao.findByUniqueKey(codeMap);

        if (language == null){
            LOGGER.debug("No Language found with given unique key values: {}", codeMap);
            throw new EntityNotFoundException(String.valueOf(codeMap));
        }

        return language;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "LSUCTransactionManager")
	@Override
	public Language update(Language language) throws EntityNotFoundException {
        LOGGER.debug("Updating Language with information: {}", language);
        this.wmGenericDao.update(language);

        Integer languageId = language.getPk();

        return this.wmGenericDao.findById(languageId);
    }

    @Transactional(value = "LSUCTransactionManager")
	@Override
	public Language delete(Integer languageId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Language with id: {}", languageId);
        Language deleted = this.wmGenericDao.findById(languageId);
        if (deleted == null) {
            LOGGER.debug("No Language found with id: {}", languageId);
            throw new EntityNotFoundException(String.valueOf(languageId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public Page<Language> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Languages");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Page<Language> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Languages");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service LSUC for table Language to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Page<Personnameotherlanguage> findAssociatedPersonnameotherlanguages(Integer pk, Pageable pageable) {
        LOGGER.debug("Fetching all associated personnameotherlanguages");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("language.pk = '" + pk + "'");

        return personnameotherlanguageService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Page<Personlanguage> findAssociatedPersonlanguages(Integer pk, Pageable pageable) {
        LOGGER.debug("Fetching all associated personlanguages");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("language.pk = '" + pk + "'");

        return personlanguageService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PersonlanguageService instance
	 */
	protected void setPersonlanguageService(PersonlanguageService service) {
        this.personlanguageService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PersonnameotherlanguageService instance
	 */
	protected void setPersonnameotherlanguageService(PersonnameotherlanguageService service) {
        this.personnameotherlanguageService = service;
    }

}

