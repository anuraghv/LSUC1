/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.lsuc.lsuc.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.lsuc.lsuc.Person;
import com.lsuc.lsuc.Prefix;


/**
 * ServiceImpl object for domain model class Prefix.
 *
 * @see Prefix
 */
@Service("LSUC.PrefixService")
public class PrefixServiceImpl implements PrefixService {

    private static final Logger LOGGER = LoggerFactory.getLogger(PrefixServiceImpl.class);

    @Autowired
	@Qualifier("LSUC.PersonService")
	private PersonService personService;

    @Autowired
    @Qualifier("LSUC.PrefixDao")
    private WMGenericDao<Prefix, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Prefix, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "LSUCTransactionManager")
    @Override
	public Prefix create(Prefix prefix) {
        LOGGER.debug("Creating a new Prefix with information: {}", prefix);
        Prefix prefixCreated = this.wmGenericDao.create(prefix);
        if(prefixCreated.getPersons() != null) {
            for(Person person : prefixCreated.getPersons()) {
                person.setPrefix(prefixCreated);
                LOGGER.debug("Creating a new child Person with information: {}", person);
                personService.create(person);
            }
        }
        return prefixCreated;
    }

	@Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public Prefix getById(Integer prefixId) throws EntityNotFoundException {
        LOGGER.debug("Finding Prefix by id: {}", prefixId);
        Prefix prefix = this.wmGenericDao.findById(prefixId);
        if (prefix == null){
            LOGGER.debug("No Prefix found with id: {}", prefixId);
            throw new EntityNotFoundException(String.valueOf(prefixId));
        }
        return prefix;
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public Prefix findById(Integer prefixId) {
        LOGGER.debug("Finding Prefix by id: {}", prefixId);
        return this.wmGenericDao.findById(prefixId);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Prefix getByCode(String code) {
        Map<String, Object> codeMap = new HashMap<>();
        codeMap.put("code", code);

        LOGGER.debug("Finding Prefix by unique keys: {}", codeMap);
        Prefix prefix = this.wmGenericDao.findByUniqueKey(codeMap);

        if (prefix == null){
            LOGGER.debug("No Prefix found with given unique key values: {}", codeMap);
            throw new EntityNotFoundException(String.valueOf(codeMap));
        }

        return prefix;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "LSUCTransactionManager")
	@Override
	public Prefix update(Prefix prefix) throws EntityNotFoundException {
        LOGGER.debug("Updating Prefix with information: {}", prefix);
        this.wmGenericDao.update(prefix);

        Integer prefixId = prefix.getPk();

        return this.wmGenericDao.findById(prefixId);
    }

    @Transactional(value = "LSUCTransactionManager")
	@Override
	public Prefix delete(Integer prefixId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Prefix with id: {}", prefixId);
        Prefix deleted = this.wmGenericDao.findById(prefixId);
        if (deleted == null) {
            LOGGER.debug("No Prefix found with id: {}", prefixId);
            throw new EntityNotFoundException(String.valueOf(prefixId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public Page<Prefix> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Prefixes");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Page<Prefix> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Prefixes");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service LSUC for table Prefix to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Page<Person> findAssociatedPersons(Integer pk, Pageable pageable) {
        LOGGER.debug("Fetching all associated persons");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("prefix.pk = '" + pk + "'");

        return personService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PersonService instance
	 */
	protected void setPersonService(PersonService service) {
        this.personService = service;
    }

}

