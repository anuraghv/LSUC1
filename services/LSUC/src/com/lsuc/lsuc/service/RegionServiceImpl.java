/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.lsuc.lsuc.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.lsuc.lsuc.Geographicarea;
import com.lsuc.lsuc.Region;


/**
 * ServiceImpl object for domain model class Region.
 *
 * @see Region
 */
@Service("LSUC.RegionService")
public class RegionServiceImpl implements RegionService {

    private static final Logger LOGGER = LoggerFactory.getLogger(RegionServiceImpl.class);

    @Autowired
	@Qualifier("LSUC.GeographicareaService")
	private GeographicareaService geographicareaService;

    @Autowired
    @Qualifier("LSUC.RegionDao")
    private WMGenericDao<Region, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Region, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "LSUCTransactionManager")
    @Override
	public Region create(Region region) {
        LOGGER.debug("Creating a new Region with information: {}", region);
        Region regionCreated = this.wmGenericDao.create(region);
        if(regionCreated.getGeographicareas() != null) {
            for(Geographicarea geographicarea : regionCreated.getGeographicareas()) {
                geographicarea.setRegion(regionCreated);
                LOGGER.debug("Creating a new child Geographicarea with information: {}", geographicarea);
                geographicareaService.create(geographicarea);
            }
        }
        return regionCreated;
    }

	@Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public Region getById(Integer regionId) throws EntityNotFoundException {
        LOGGER.debug("Finding Region by id: {}", regionId);
        Region region = this.wmGenericDao.findById(regionId);
        if (region == null){
            LOGGER.debug("No Region found with id: {}", regionId);
            throw new EntityNotFoundException(String.valueOf(regionId));
        }
        return region;
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public Region findById(Integer regionId) {
        LOGGER.debug("Finding Region by id: {}", regionId);
        return this.wmGenericDao.findById(regionId);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Region getByCode(String code) {
        Map<String, Object> codeMap = new HashMap<>();
        codeMap.put("code", code);

        LOGGER.debug("Finding Region by unique keys: {}", codeMap);
        Region region = this.wmGenericDao.findByUniqueKey(codeMap);

        if (region == null){
            LOGGER.debug("No Region found with given unique key values: {}", codeMap);
            throw new EntityNotFoundException(String.valueOf(codeMap));
        }

        return region;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "LSUCTransactionManager")
	@Override
	public Region update(Region region) throws EntityNotFoundException {
        LOGGER.debug("Updating Region with information: {}", region);
        this.wmGenericDao.update(region);

        Integer regionId = region.getPk();

        return this.wmGenericDao.findById(regionId);
    }

    @Transactional(value = "LSUCTransactionManager")
	@Override
	public Region delete(Integer regionId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Region with id: {}", regionId);
        Region deleted = this.wmGenericDao.findById(regionId);
        if (deleted == null) {
            LOGGER.debug("No Region found with id: {}", regionId);
            throw new EntityNotFoundException(String.valueOf(regionId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public Page<Region> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Regions");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Page<Region> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Regions");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service LSUC for table Region to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Page<Geographicarea> findAssociatedGeographicareas(Integer pk, Pageable pageable) {
        LOGGER.debug("Fetching all associated geographicareas");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("region.pk = '" + pk + "'");

        return geographicareaService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service GeographicareaService instance
	 */
	protected void setGeographicareaService(GeographicareaService service) {
        this.geographicareaService = service;
    }

}

