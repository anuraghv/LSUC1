/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.lsuc.lsuc.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.sql.Date;
import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.lsuc.lsuc.Licenseephotoidcard;


/**
 * ServiceImpl object for domain model class Licenseephotoidcard.
 *
 * @see Licenseephotoidcard
 */
@Service("LSUC.LicenseephotoidcardService")
public class LicenseephotoidcardServiceImpl implements LicenseephotoidcardService {

    private static final Logger LOGGER = LoggerFactory.getLogger(LicenseephotoidcardServiceImpl.class);


    @Autowired
    @Qualifier("LSUC.LicenseephotoidcardDao")
    private WMGenericDao<Licenseephotoidcard, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Licenseephotoidcard, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "LSUCTransactionManager")
    @Override
	public Licenseephotoidcard create(Licenseephotoidcard licenseephotoidcard) {
        LOGGER.debug("Creating a new Licenseephotoidcard with information: {}", licenseephotoidcard);
        Licenseephotoidcard licenseephotoidcardCreated = this.wmGenericDao.create(licenseephotoidcard);
        return licenseephotoidcardCreated;
    }

	@Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public Licenseephotoidcard getById(Integer licenseephotoidcardId) throws EntityNotFoundException {
        LOGGER.debug("Finding Licenseephotoidcard by id: {}", licenseephotoidcardId);
        Licenseephotoidcard licenseephotoidcard = this.wmGenericDao.findById(licenseephotoidcardId);
        if (licenseephotoidcard == null){
            LOGGER.debug("No Licenseephotoidcard found with id: {}", licenseephotoidcardId);
            throw new EntityNotFoundException(String.valueOf(licenseephotoidcardId));
        }
        return licenseephotoidcard;
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public Licenseephotoidcard findById(Integer licenseephotoidcardId) {
        LOGGER.debug("Finding Licenseephotoidcard by id: {}", licenseephotoidcardId);
        return this.wmGenericDao.findById(licenseephotoidcardId);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Licenseephotoidcard getByLicenseeFkAndExpiryDate(Integer licenseeFk, Date expiryDate) {
        Map<String, Object> licenseeFkAndExpiryDateMap = new HashMap<>();
        licenseeFkAndExpiryDateMap.put("licenseeFk", licenseeFk);
        licenseeFkAndExpiryDateMap.put("expiryDate", expiryDate);

        LOGGER.debug("Finding Licenseephotoidcard by unique keys: {}", licenseeFkAndExpiryDateMap);
        Licenseephotoidcard licenseephotoidcard = this.wmGenericDao.findByUniqueKey(licenseeFkAndExpiryDateMap);

        if (licenseephotoidcard == null){
            LOGGER.debug("No Licenseephotoidcard found with given unique key values: {}", licenseeFkAndExpiryDateMap);
            throw new EntityNotFoundException(String.valueOf(licenseeFkAndExpiryDateMap));
        }

        return licenseephotoidcard;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "LSUCTransactionManager")
	@Override
	public Licenseephotoidcard update(Licenseephotoidcard licenseephotoidcard) throws EntityNotFoundException {
        LOGGER.debug("Updating Licenseephotoidcard with information: {}", licenseephotoidcard);
        this.wmGenericDao.update(licenseephotoidcard);

        Integer licenseephotoidcardId = licenseephotoidcard.getPk();

        return this.wmGenericDao.findById(licenseephotoidcardId);
    }

    @Transactional(value = "LSUCTransactionManager")
	@Override
	public Licenseephotoidcard delete(Integer licenseephotoidcardId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Licenseephotoidcard with id: {}", licenseephotoidcardId);
        Licenseephotoidcard deleted = this.wmGenericDao.findById(licenseephotoidcardId);
        if (deleted == null) {
            LOGGER.debug("No Licenseephotoidcard found with id: {}", licenseephotoidcardId);
            throw new EntityNotFoundException(String.valueOf(licenseephotoidcardId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public Page<Licenseephotoidcard> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Licenseephotoidcards");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Page<Licenseephotoidcard> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Licenseephotoidcards");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service LSUC for table Licenseephotoidcard to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

