/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.lsuc.lsuc.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.lsuc.lsuc.ClassEntity;
import com.lsuc.lsuc.Practiceeligibility;
import com.lsuc.lsuc.Practicegroup;


/**
 * ServiceImpl object for domain model class Practiceeligibility.
 *
 * @see Practiceeligibility
 */
@Service("LSUC.PracticeeligibilityService")
public class PracticeeligibilityServiceImpl implements PracticeeligibilityService {

    private static final Logger LOGGER = LoggerFactory.getLogger(PracticeeligibilityServiceImpl.class);

    @Autowired
	@Qualifier("LSUC.PracticegroupService")
	private PracticegroupService practicegroupService;

    @Autowired
	@Qualifier("LSUC.ClassEntityService")
	private ClassEntityService classEntityService;

    @Autowired
    @Qualifier("LSUC.PracticeeligibilityDao")
    private WMGenericDao<Practiceeligibility, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Practiceeligibility, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "LSUCTransactionManager")
    @Override
	public Practiceeligibility create(Practiceeligibility practiceeligibility) {
        LOGGER.debug("Creating a new Practiceeligibility with information: {}", practiceeligibility);
        Practiceeligibility practiceeligibilityCreated = this.wmGenericDao.create(practiceeligibility);
        if(practiceeligibilityCreated.getPracticegroups() != null) {
            for(Practicegroup practicegroup : practiceeligibilityCreated.getPracticegroups()) {
                practicegroup.setPracticeeligibility(practiceeligibilityCreated);
                LOGGER.debug("Creating a new child Practicegroup with information: {}", practicegroup);
                practicegroupService.create(practicegroup);
            }
        }

        if(practiceeligibilityCreated.getClassEntities() != null) {
            for(ClassEntity classEntitie : practiceeligibilityCreated.getClassEntities()) {
                classEntitie.setPracticeeligibility(practiceeligibilityCreated);
                LOGGER.debug("Creating a new child ClassEntity with information: {}", classEntitie);
                classEntityService.create(classEntitie);
            }
        }
        return practiceeligibilityCreated;
    }

	@Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public Practiceeligibility getById(Integer practiceeligibilityId) throws EntityNotFoundException {
        LOGGER.debug("Finding Practiceeligibility by id: {}", practiceeligibilityId);
        Practiceeligibility practiceeligibility = this.wmGenericDao.findById(practiceeligibilityId);
        if (practiceeligibility == null){
            LOGGER.debug("No Practiceeligibility found with id: {}", practiceeligibilityId);
            throw new EntityNotFoundException(String.valueOf(practiceeligibilityId));
        }
        return practiceeligibility;
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public Practiceeligibility findById(Integer practiceeligibilityId) {
        LOGGER.debug("Finding Practiceeligibility by id: {}", practiceeligibilityId);
        return this.wmGenericDao.findById(practiceeligibilityId);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Practiceeligibility getByCode(String code) {
        Map<String, Object> codeMap = new HashMap<>();
        codeMap.put("code", code);

        LOGGER.debug("Finding Practiceeligibility by unique keys: {}", codeMap);
        Practiceeligibility practiceeligibility = this.wmGenericDao.findByUniqueKey(codeMap);

        if (practiceeligibility == null){
            LOGGER.debug("No Practiceeligibility found with given unique key values: {}", codeMap);
            throw new EntityNotFoundException(String.valueOf(codeMap));
        }

        return practiceeligibility;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "LSUCTransactionManager")
	@Override
	public Practiceeligibility update(Practiceeligibility practiceeligibility) throws EntityNotFoundException {
        LOGGER.debug("Updating Practiceeligibility with information: {}", practiceeligibility);
        this.wmGenericDao.update(practiceeligibility);

        Integer practiceeligibilityId = practiceeligibility.getPk();

        return this.wmGenericDao.findById(practiceeligibilityId);
    }

    @Transactional(value = "LSUCTransactionManager")
	@Override
	public Practiceeligibility delete(Integer practiceeligibilityId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Practiceeligibility with id: {}", practiceeligibilityId);
        Practiceeligibility deleted = this.wmGenericDao.findById(practiceeligibilityId);
        if (deleted == null) {
            LOGGER.debug("No Practiceeligibility found with id: {}", practiceeligibilityId);
            throw new EntityNotFoundException(String.valueOf(practiceeligibilityId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public Page<Practiceeligibility> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Practiceeligibilities");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Page<Practiceeligibility> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Practiceeligibilities");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service LSUC for table Practiceeligibility to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Page<Practicegroup> findAssociatedPracticegroups(Integer pk, Pageable pageable) {
        LOGGER.debug("Fetching all associated practicegroups");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("practiceeligibility.pk = '" + pk + "'");

        return practicegroupService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Page<ClassEntity> findAssociatedClassEntities(Integer pk, Pageable pageable) {
        LOGGER.debug("Fetching all associated classEntities");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("practiceeligibility.pk = '" + pk + "'");

        return classEntityService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PracticegroupService instance
	 */
	protected void setPracticegroupService(PracticegroupService service) {
        this.practicegroupService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ClassEntityService instance
	 */
	protected void setClassEntityService(ClassEntityService service) {
        this.classEntityService = service;
    }

}

