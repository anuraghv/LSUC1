/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.lsuc.lsuc.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.lsuc.lsuc.Licenseeinsurancepolicy;


/**
 * ServiceImpl object for domain model class Licenseeinsurancepolicy.
 *
 * @see Licenseeinsurancepolicy
 */
@Service("LSUC.LicenseeinsurancepolicyService")
public class LicenseeinsurancepolicyServiceImpl implements LicenseeinsurancepolicyService {

    private static final Logger LOGGER = LoggerFactory.getLogger(LicenseeinsurancepolicyServiceImpl.class);


    @Autowired
    @Qualifier("LSUC.LicenseeinsurancepolicyDao")
    private WMGenericDao<Licenseeinsurancepolicy, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Licenseeinsurancepolicy, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "LSUCTransactionManager")
    @Override
	public Licenseeinsurancepolicy create(Licenseeinsurancepolicy licenseeinsurancepolicy) {
        LOGGER.debug("Creating a new Licenseeinsurancepolicy with information: {}", licenseeinsurancepolicy);
        Licenseeinsurancepolicy licenseeinsurancepolicyCreated = this.wmGenericDao.create(licenseeinsurancepolicy);
        return licenseeinsurancepolicyCreated;
    }

	@Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public Licenseeinsurancepolicy getById(Integer licenseeinsurancepolicyId) throws EntityNotFoundException {
        LOGGER.debug("Finding Licenseeinsurancepolicy by id: {}", licenseeinsurancepolicyId);
        Licenseeinsurancepolicy licenseeinsurancepolicy = this.wmGenericDao.findById(licenseeinsurancepolicyId);
        if (licenseeinsurancepolicy == null){
            LOGGER.debug("No Licenseeinsurancepolicy found with id: {}", licenseeinsurancepolicyId);
            throw new EntityNotFoundException(String.valueOf(licenseeinsurancepolicyId));
        }
        return licenseeinsurancepolicy;
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public Licenseeinsurancepolicy findById(Integer licenseeinsurancepolicyId) {
        LOGGER.debug("Finding Licenseeinsurancepolicy by id: {}", licenseeinsurancepolicyId);
        return this.wmGenericDao.findById(licenseeinsurancepolicyId);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Licenseeinsurancepolicy getByLicenseeInsuranceFkAndBusinessFkInsuranceCompanyAndInsurancePolicyNumberAndInsurancePolicySequenceNumber(Integer licenseeInsuranceFk, Integer businessFkInsuranceCompany, String insurancePolicyNumber, Short insurancePolicySequenceNumber) {
        Map<String, Object> licenseeInsuranceFkAndBusinessFkInsuranceCompanyAndInsurancePolicyNumberAndInsurancePolicySequenceNumberMap = new HashMap<>();
        licenseeInsuranceFkAndBusinessFkInsuranceCompanyAndInsurancePolicyNumberAndInsurancePolicySequenceNumberMap.put("licenseeInsuranceFk", licenseeInsuranceFk);
        licenseeInsuranceFkAndBusinessFkInsuranceCompanyAndInsurancePolicyNumberAndInsurancePolicySequenceNumberMap.put("businessFkInsuranceCompany", businessFkInsuranceCompany);
        licenseeInsuranceFkAndBusinessFkInsuranceCompanyAndInsurancePolicyNumberAndInsurancePolicySequenceNumberMap.put("insurancePolicyNumber", insurancePolicyNumber);
        licenseeInsuranceFkAndBusinessFkInsuranceCompanyAndInsurancePolicyNumberAndInsurancePolicySequenceNumberMap.put("insurancePolicySequenceNumber", insurancePolicySequenceNumber);

        LOGGER.debug("Finding Licenseeinsurancepolicy by unique keys: {}", licenseeInsuranceFkAndBusinessFkInsuranceCompanyAndInsurancePolicyNumberAndInsurancePolicySequenceNumberMap);
        Licenseeinsurancepolicy licenseeinsurancepolicy = this.wmGenericDao.findByUniqueKey(licenseeInsuranceFkAndBusinessFkInsuranceCompanyAndInsurancePolicyNumberAndInsurancePolicySequenceNumberMap);

        if (licenseeinsurancepolicy == null){
            LOGGER.debug("No Licenseeinsurancepolicy found with given unique key values: {}", licenseeInsuranceFkAndBusinessFkInsuranceCompanyAndInsurancePolicyNumberAndInsurancePolicySequenceNumberMap);
            throw new EntityNotFoundException(String.valueOf(licenseeInsuranceFkAndBusinessFkInsuranceCompanyAndInsurancePolicyNumberAndInsurancePolicySequenceNumberMap));
        }

        return licenseeinsurancepolicy;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "LSUCTransactionManager")
	@Override
	public Licenseeinsurancepolicy update(Licenseeinsurancepolicy licenseeinsurancepolicy) throws EntityNotFoundException {
        LOGGER.debug("Updating Licenseeinsurancepolicy with information: {}", licenseeinsurancepolicy);
        this.wmGenericDao.update(licenseeinsurancepolicy);

        Integer licenseeinsurancepolicyId = licenseeinsurancepolicy.getPk();

        return this.wmGenericDao.findById(licenseeinsurancepolicyId);
    }

    @Transactional(value = "LSUCTransactionManager")
	@Override
	public Licenseeinsurancepolicy delete(Integer licenseeinsurancepolicyId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Licenseeinsurancepolicy with id: {}", licenseeinsurancepolicyId);
        Licenseeinsurancepolicy deleted = this.wmGenericDao.findById(licenseeinsurancepolicyId);
        if (deleted == null) {
            LOGGER.debug("No Licenseeinsurancepolicy found with id: {}", licenseeinsurancepolicyId);
            throw new EntityNotFoundException(String.valueOf(licenseeinsurancepolicyId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public Page<Licenseeinsurancepolicy> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Licenseeinsurancepolicies");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Page<Licenseeinsurancepolicy> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Licenseeinsurancepolicies");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service LSUC for table Licenseeinsurancepolicy to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

