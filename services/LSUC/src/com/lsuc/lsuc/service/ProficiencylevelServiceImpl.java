/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.lsuc.lsuc.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.lsuc.lsuc.Personlanguagecommunicationchannel;
import com.lsuc.lsuc.Proficiencylevel;


/**
 * ServiceImpl object for domain model class Proficiencylevel.
 *
 * @see Proficiencylevel
 */
@Service("LSUC.ProficiencylevelService")
public class ProficiencylevelServiceImpl implements ProficiencylevelService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ProficiencylevelServiceImpl.class);

    @Autowired
	@Qualifier("LSUC.PersonlanguagecommunicationchannelService")
	private PersonlanguagecommunicationchannelService personlanguagecommunicationchannelService;

    @Autowired
    @Qualifier("LSUC.ProficiencylevelDao")
    private WMGenericDao<Proficiencylevel, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Proficiencylevel, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "LSUCTransactionManager")
    @Override
	public Proficiencylevel create(Proficiencylevel proficiencylevel) {
        LOGGER.debug("Creating a new Proficiencylevel with information: {}", proficiencylevel);
        Proficiencylevel proficiencylevelCreated = this.wmGenericDao.create(proficiencylevel);
        if(proficiencylevelCreated.getPersonlanguagecommunicationchannels() != null) {
            for(Personlanguagecommunicationchannel personlanguagecommunicationchannel : proficiencylevelCreated.getPersonlanguagecommunicationchannels()) {
                personlanguagecommunicationchannel.setProficiencylevel(proficiencylevelCreated);
                LOGGER.debug("Creating a new child Personlanguagecommunicationchannel with information: {}", personlanguagecommunicationchannel);
                personlanguagecommunicationchannelService.create(personlanguagecommunicationchannel);
            }
        }
        return proficiencylevelCreated;
    }

	@Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public Proficiencylevel getById(Integer proficiencylevelId) throws EntityNotFoundException {
        LOGGER.debug("Finding Proficiencylevel by id: {}", proficiencylevelId);
        Proficiencylevel proficiencylevel = this.wmGenericDao.findById(proficiencylevelId);
        if (proficiencylevel == null){
            LOGGER.debug("No Proficiencylevel found with id: {}", proficiencylevelId);
            throw new EntityNotFoundException(String.valueOf(proficiencylevelId));
        }
        return proficiencylevel;
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public Proficiencylevel findById(Integer proficiencylevelId) {
        LOGGER.debug("Finding Proficiencylevel by id: {}", proficiencylevelId);
        return this.wmGenericDao.findById(proficiencylevelId);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Proficiencylevel getByCode(String code) {
        Map<String, Object> codeMap = new HashMap<>();
        codeMap.put("code", code);

        LOGGER.debug("Finding Proficiencylevel by unique keys: {}", codeMap);
        Proficiencylevel proficiencylevel = this.wmGenericDao.findByUniqueKey(codeMap);

        if (proficiencylevel == null){
            LOGGER.debug("No Proficiencylevel found with given unique key values: {}", codeMap);
            throw new EntityNotFoundException(String.valueOf(codeMap));
        }

        return proficiencylevel;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "LSUCTransactionManager")
	@Override
	public Proficiencylevel update(Proficiencylevel proficiencylevel) throws EntityNotFoundException {
        LOGGER.debug("Updating Proficiencylevel with information: {}", proficiencylevel);
        this.wmGenericDao.update(proficiencylevel);

        Integer proficiencylevelId = proficiencylevel.getPk();

        return this.wmGenericDao.findById(proficiencylevelId);
    }

    @Transactional(value = "LSUCTransactionManager")
	@Override
	public Proficiencylevel delete(Integer proficiencylevelId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Proficiencylevel with id: {}", proficiencylevelId);
        Proficiencylevel deleted = this.wmGenericDao.findById(proficiencylevelId);
        if (deleted == null) {
            LOGGER.debug("No Proficiencylevel found with id: {}", proficiencylevelId);
            throw new EntityNotFoundException(String.valueOf(proficiencylevelId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public Page<Proficiencylevel> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Proficiencylevels");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Page<Proficiencylevel> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Proficiencylevels");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service LSUC for table Proficiencylevel to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Page<Personlanguagecommunicationchannel> findAssociatedPersonlanguagecommunicationchannels(Integer pk, Pageable pageable) {
        LOGGER.debug("Fetching all associated personlanguagecommunicationchannels");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("proficiencylevel.pk = '" + pk + "'");

        return personlanguagecommunicationchannelService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PersonlanguagecommunicationchannelService instance
	 */
	protected void setPersonlanguagecommunicationchannelService(PersonlanguagecommunicationchannelService service) {
        this.personlanguagecommunicationchannelService = service;
    }

}

