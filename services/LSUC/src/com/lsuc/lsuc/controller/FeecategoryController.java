/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.lsuc.lsuc.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.lsuc.lsuc.Feecategory;
import com.lsuc.lsuc.Licensee;
import com.lsuc.lsuc.service.FeecategoryService;


/**
 * Controller object for domain model class Feecategory.
 * @see Feecategory
 */
@RestController("LSUC.FeecategoryController")
@Api(value = "FeecategoryController", description = "Exposes APIs to work with Feecategory resource.")
@RequestMapping("/LSUC/Feecategory")
public class FeecategoryController {

    private static final Logger LOGGER = LoggerFactory.getLogger(FeecategoryController.class);

    @Autowired
	@Qualifier("LSUC.FeecategoryService")
	private FeecategoryService feecategoryService;

	@ApiOperation(value = "Creates a new Feecategory instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Feecategory createFeecategory(@RequestBody Feecategory feecategory) {
		LOGGER.debug("Create Feecategory with information: {}" , feecategory);

		feecategory = feecategoryService.create(feecategory);
		LOGGER.debug("Created Feecategory with information: {}" , feecategory);

	    return feecategory;
	}


    @ApiOperation(value = "Returns the Feecategory instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Feecategory getFeecategory(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Feecategory with id: {}" , id);

        Feecategory foundFeecategory = feecategoryService.getById(id);
        LOGGER.debug("Feecategory details with id: {}" , foundFeecategory);

        return foundFeecategory;
    }

    @ApiOperation(value = "Updates the Feecategory instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Feecategory editFeecategory(@PathVariable("id") Integer id, @RequestBody Feecategory feecategory) throws EntityNotFoundException {
        LOGGER.debug("Editing Feecategory with id: {}" , feecategory.getPk());

        feecategory.setPk(id);
        feecategory = feecategoryService.update(feecategory);
        LOGGER.debug("Feecategory details with id: {}" , feecategory);

        return feecategory;
    }

    @ApiOperation(value = "Deletes the Feecategory instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteFeecategory(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Feecategory with id: {}" , id);

        Feecategory deletedFeecategory = feecategoryService.delete(id);

        return deletedFeecategory != null;
    }

    @RequestMapping(value = "/code/{code}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching Feecategory with given unique key values.")
    public Feecategory getByCode(@PathVariable("code") String code) {
        LOGGER.debug("Getting Feecategory with uniques key Code");
        return feecategoryService.getByCode(code);
    }

    /**
     * @deprecated Use {@link #findFeecategories(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Feecategory instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Feecategory> searchFeecategoriesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Feecategories list");
        return feecategoryService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Feecategory instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Feecategory> findFeecategories(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Feecategories list");
        return feecategoryService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Feecategory instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Feecategory> filterFeecategories(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Feecategories list");
        return feecategoryService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportFeecategories(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return feecategoryService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Feecategory instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countFeecategories( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Feecategories");
		return feecategoryService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getFeecategoryAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return feecategoryService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/licensees", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the licensees instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Licensee> findAssociatedLicensees(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated licensees");
        return feecategoryService.findAssociatedLicensees(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service FeecategoryService instance
	 */
	protected void setFeecategoryService(FeecategoryService service) {
		this.feecategoryService = service;
	}

}

