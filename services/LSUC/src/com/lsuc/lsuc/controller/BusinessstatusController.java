/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.lsuc.lsuc.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.lsuc.lsuc.Business;
import com.lsuc.lsuc.Businessstatus;
import com.lsuc.lsuc.service.BusinessstatusService;


/**
 * Controller object for domain model class Businessstatus.
 * @see Businessstatus
 */
@RestController("LSUC.BusinessstatusController")
@Api(value = "BusinessstatusController", description = "Exposes APIs to work with Businessstatus resource.")
@RequestMapping("/LSUC/Businessstatus")
public class BusinessstatusController {

    private static final Logger LOGGER = LoggerFactory.getLogger(BusinessstatusController.class);

    @Autowired
	@Qualifier("LSUC.BusinessstatusService")
	private BusinessstatusService businessstatusService;

	@ApiOperation(value = "Creates a new Businessstatus instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Businessstatus createBusinessstatus(@RequestBody Businessstatus businessstatus) {
		LOGGER.debug("Create Businessstatus with information: {}" , businessstatus);

		businessstatus = businessstatusService.create(businessstatus);
		LOGGER.debug("Created Businessstatus with information: {}" , businessstatus);

	    return businessstatus;
	}


    @ApiOperation(value = "Returns the Businessstatus instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Businessstatus getBusinessstatus(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Businessstatus with id: {}" , id);

        Businessstatus foundBusinessstatus = businessstatusService.getById(id);
        LOGGER.debug("Businessstatus details with id: {}" , foundBusinessstatus);

        return foundBusinessstatus;
    }

    @ApiOperation(value = "Updates the Businessstatus instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Businessstatus editBusinessstatus(@PathVariable("id") Integer id, @RequestBody Businessstatus businessstatus) throws EntityNotFoundException {
        LOGGER.debug("Editing Businessstatus with id: {}" , businessstatus.getPk());

        businessstatus.setPk(id);
        businessstatus = businessstatusService.update(businessstatus);
        LOGGER.debug("Businessstatus details with id: {}" , businessstatus);

        return businessstatus;
    }

    @ApiOperation(value = "Deletes the Businessstatus instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteBusinessstatus(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Businessstatus with id: {}" , id);

        Businessstatus deletedBusinessstatus = businessstatusService.delete(id);

        return deletedBusinessstatus != null;
    }

    @RequestMapping(value = "/code/{code}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching Businessstatus with given unique key values.")
    public Businessstatus getByCode(@PathVariable("code") String code) {
        LOGGER.debug("Getting Businessstatus with uniques key Code");
        return businessstatusService.getByCode(code);
    }

    /**
     * @deprecated Use {@link #findBusinessstatuses(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Businessstatus instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Businessstatus> searchBusinessstatusesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Businessstatuses list");
        return businessstatusService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Businessstatus instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Businessstatus> findBusinessstatuses(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Businessstatuses list");
        return businessstatusService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Businessstatus instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Businessstatus> filterBusinessstatuses(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Businessstatuses list");
        return businessstatusService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportBusinessstatuses(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return businessstatusService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Businessstatus instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countBusinessstatuses( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Businessstatuses");
		return businessstatusService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getBusinessstatusAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return businessstatusService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/businesses", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the businesses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Business> findAssociatedBusinesses(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated businesses");
        return businessstatusService.findAssociatedBusinesses(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service BusinessstatusService instance
	 */
	protected void setBusinessstatusService(BusinessstatusService service) {
		this.businessstatusService = service;
	}

}

