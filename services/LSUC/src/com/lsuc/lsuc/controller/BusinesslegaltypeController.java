/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.lsuc.lsuc.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.lsuc.lsuc.Business;
import com.lsuc.lsuc.Businesslegaltype;
import com.lsuc.lsuc.service.BusinesslegaltypeService;


/**
 * Controller object for domain model class Businesslegaltype.
 * @see Businesslegaltype
 */
@RestController("LSUC.BusinesslegaltypeController")
@Api(value = "BusinesslegaltypeController", description = "Exposes APIs to work with Businesslegaltype resource.")
@RequestMapping("/LSUC/Businesslegaltype")
public class BusinesslegaltypeController {

    private static final Logger LOGGER = LoggerFactory.getLogger(BusinesslegaltypeController.class);

    @Autowired
	@Qualifier("LSUC.BusinesslegaltypeService")
	private BusinesslegaltypeService businesslegaltypeService;

	@ApiOperation(value = "Creates a new Businesslegaltype instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Businesslegaltype createBusinesslegaltype(@RequestBody Businesslegaltype businesslegaltype) {
		LOGGER.debug("Create Businesslegaltype with information: {}" , businesslegaltype);

		businesslegaltype = businesslegaltypeService.create(businesslegaltype);
		LOGGER.debug("Created Businesslegaltype with information: {}" , businesslegaltype);

	    return businesslegaltype;
	}


    @ApiOperation(value = "Returns the Businesslegaltype instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Businesslegaltype getBusinesslegaltype(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Businesslegaltype with id: {}" , id);

        Businesslegaltype foundBusinesslegaltype = businesslegaltypeService.getById(id);
        LOGGER.debug("Businesslegaltype details with id: {}" , foundBusinesslegaltype);

        return foundBusinesslegaltype;
    }

    @ApiOperation(value = "Updates the Businesslegaltype instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Businesslegaltype editBusinesslegaltype(@PathVariable("id") Integer id, @RequestBody Businesslegaltype businesslegaltype) throws EntityNotFoundException {
        LOGGER.debug("Editing Businesslegaltype with id: {}" , businesslegaltype.getPk());

        businesslegaltype.setPk(id);
        businesslegaltype = businesslegaltypeService.update(businesslegaltype);
        LOGGER.debug("Businesslegaltype details with id: {}" , businesslegaltype);

        return businesslegaltype;
    }

    @ApiOperation(value = "Deletes the Businesslegaltype instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteBusinesslegaltype(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Businesslegaltype with id: {}" , id);

        Businesslegaltype deletedBusinesslegaltype = businesslegaltypeService.delete(id);

        return deletedBusinesslegaltype != null;
    }

    @RequestMapping(value = "/code/{code}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching Businesslegaltype with given unique key values.")
    public Businesslegaltype getByCode(@PathVariable("code") String code) {
        LOGGER.debug("Getting Businesslegaltype with uniques key Code");
        return businesslegaltypeService.getByCode(code);
    }

    /**
     * @deprecated Use {@link #findBusinesslegaltypes(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Businesslegaltype instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Businesslegaltype> searchBusinesslegaltypesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Businesslegaltypes list");
        return businesslegaltypeService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Businesslegaltype instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Businesslegaltype> findBusinesslegaltypes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Businesslegaltypes list");
        return businesslegaltypeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Businesslegaltype instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Businesslegaltype> filterBusinesslegaltypes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Businesslegaltypes list");
        return businesslegaltypeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportBusinesslegaltypes(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return businesslegaltypeService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Businesslegaltype instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countBusinesslegaltypes( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Businesslegaltypes");
		return businesslegaltypeService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getBusinesslegaltypeAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return businesslegaltypeService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/businesses", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the businesses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Business> findAssociatedBusinesses(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated businesses");
        return businesslegaltypeService.findAssociatedBusinesses(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service BusinesslegaltypeService instance
	 */
	protected void setBusinesslegaltypeService(BusinesslegaltypeService service) {
		this.businesslegaltypeService = service;
	}

}

