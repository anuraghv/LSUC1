/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.lsuc.lsuc.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.lsuc.lsuc.Insurancepolicystatus;
import com.lsuc.lsuc.Licenseeinsurancepolicy;
import com.lsuc.lsuc.service.InsurancepolicystatusService;


/**
 * Controller object for domain model class Insurancepolicystatus.
 * @see Insurancepolicystatus
 */
@RestController("LSUC.InsurancepolicystatusController")
@Api(value = "InsurancepolicystatusController", description = "Exposes APIs to work with Insurancepolicystatus resource.")
@RequestMapping("/LSUC/Insurancepolicystatus")
public class InsurancepolicystatusController {

    private static final Logger LOGGER = LoggerFactory.getLogger(InsurancepolicystatusController.class);

    @Autowired
	@Qualifier("LSUC.InsurancepolicystatusService")
	private InsurancepolicystatusService insurancepolicystatusService;

	@ApiOperation(value = "Creates a new Insurancepolicystatus instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Insurancepolicystatus createInsurancepolicystatus(@RequestBody Insurancepolicystatus insurancepolicystatus) {
		LOGGER.debug("Create Insurancepolicystatus with information: {}" , insurancepolicystatus);

		insurancepolicystatus = insurancepolicystatusService.create(insurancepolicystatus);
		LOGGER.debug("Created Insurancepolicystatus with information: {}" , insurancepolicystatus);

	    return insurancepolicystatus;
	}


    @ApiOperation(value = "Returns the Insurancepolicystatus instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Insurancepolicystatus getInsurancepolicystatus(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Insurancepolicystatus with id: {}" , id);

        Insurancepolicystatus foundInsurancepolicystatus = insurancepolicystatusService.getById(id);
        LOGGER.debug("Insurancepolicystatus details with id: {}" , foundInsurancepolicystatus);

        return foundInsurancepolicystatus;
    }

    @ApiOperation(value = "Updates the Insurancepolicystatus instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Insurancepolicystatus editInsurancepolicystatus(@PathVariable("id") Integer id, @RequestBody Insurancepolicystatus insurancepolicystatus) throws EntityNotFoundException {
        LOGGER.debug("Editing Insurancepolicystatus with id: {}" , insurancepolicystatus.getPk());

        insurancepolicystatus.setPk(id);
        insurancepolicystatus = insurancepolicystatusService.update(insurancepolicystatus);
        LOGGER.debug("Insurancepolicystatus details with id: {}" , insurancepolicystatus);

        return insurancepolicystatus;
    }

    @ApiOperation(value = "Deletes the Insurancepolicystatus instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteInsurancepolicystatus(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Insurancepolicystatus with id: {}" , id);

        Insurancepolicystatus deletedInsurancepolicystatus = insurancepolicystatusService.delete(id);

        return deletedInsurancepolicystatus != null;
    }

    @RequestMapping(value = "/code/{code}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching Insurancepolicystatus with given unique key values.")
    public Insurancepolicystatus getByCode(@PathVariable("code") String code) {
        LOGGER.debug("Getting Insurancepolicystatus with uniques key Code");
        return insurancepolicystatusService.getByCode(code);
    }

    /**
     * @deprecated Use {@link #findInsurancepolicystatuses(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Insurancepolicystatus instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Insurancepolicystatus> searchInsurancepolicystatusesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Insurancepolicystatuses list");
        return insurancepolicystatusService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Insurancepolicystatus instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Insurancepolicystatus> findInsurancepolicystatuses(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Insurancepolicystatuses list");
        return insurancepolicystatusService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Insurancepolicystatus instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Insurancepolicystatus> filterInsurancepolicystatuses(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Insurancepolicystatuses list");
        return insurancepolicystatusService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportInsurancepolicystatuses(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return insurancepolicystatusService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Insurancepolicystatus instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countInsurancepolicystatuses( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Insurancepolicystatuses");
		return insurancepolicystatusService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getInsurancepolicystatusAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return insurancepolicystatusService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/licenseeinsurancepolicies", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the licenseeinsurancepolicies instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Licenseeinsurancepolicy> findAssociatedLicenseeinsurancepolicies(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated licenseeinsurancepolicies");
        return insurancepolicystatusService.findAssociatedLicenseeinsurancepolicies(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service InsurancepolicystatusService instance
	 */
	protected void setInsurancepolicystatusService(InsurancepolicystatusService service) {
		this.insurancepolicystatusService = service;
	}

}

