/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.lsuc.lsuc.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.lsuc.lsuc.Businesspersonrelationship;
import com.lsuc.lsuc.service.BusinesspersonrelationshipService;


/**
 * Controller object for domain model class Businesspersonrelationship.
 * @see Businesspersonrelationship
 */
@RestController("LSUC.BusinesspersonrelationshipController")
@Api(value = "BusinesspersonrelationshipController", description = "Exposes APIs to work with Businesspersonrelationship resource.")
@RequestMapping("/LSUC/Businesspersonrelationship")
public class BusinesspersonrelationshipController {

    private static final Logger LOGGER = LoggerFactory.getLogger(BusinesspersonrelationshipController.class);

    @Autowired
	@Qualifier("LSUC.BusinesspersonrelationshipService")
	private BusinesspersonrelationshipService businesspersonrelationshipService;

	@ApiOperation(value = "Creates a new Businesspersonrelationship instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Businesspersonrelationship createBusinesspersonrelationship(@RequestBody Businesspersonrelationship businesspersonrelationship) {
		LOGGER.debug("Create Businesspersonrelationship with information: {}" , businesspersonrelationship);

		businesspersonrelationship = businesspersonrelationshipService.create(businesspersonrelationship);
		LOGGER.debug("Created Businesspersonrelationship with information: {}" , businesspersonrelationship);

	    return businesspersonrelationship;
	}


    @ApiOperation(value = "Returns the Businesspersonrelationship instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Businesspersonrelationship getBusinesspersonrelationship(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Businesspersonrelationship with id: {}" , id);

        Businesspersonrelationship foundBusinesspersonrelationship = businesspersonrelationshipService.getById(id);
        LOGGER.debug("Businesspersonrelationship details with id: {}" , foundBusinesspersonrelationship);

        return foundBusinesspersonrelationship;
    }

    @ApiOperation(value = "Updates the Businesspersonrelationship instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Businesspersonrelationship editBusinesspersonrelationship(@PathVariable("id") Integer id, @RequestBody Businesspersonrelationship businesspersonrelationship) throws EntityNotFoundException {
        LOGGER.debug("Editing Businesspersonrelationship with id: {}" , businesspersonrelationship.getPk());

        businesspersonrelationship.setPk(id);
        businesspersonrelationship = businesspersonrelationshipService.update(businesspersonrelationship);
        LOGGER.debug("Businesspersonrelationship details with id: {}" , businesspersonrelationship);

        return businesspersonrelationship;
    }

    @ApiOperation(value = "Deletes the Businesspersonrelationship instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteBusinesspersonrelationship(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Businesspersonrelationship with id: {}" , id);

        Businesspersonrelationship deletedBusinesspersonrelationship = businesspersonrelationshipService.delete(id);

        return deletedBusinesspersonrelationship != null;
    }

    @RequestMapping(value = "/businessPersonFk-businessPersonRelationshipTypeFk", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching Businesspersonrelationship with given unique key values.")
    public Businesspersonrelationship getByBusinessPersonFkAndBusinessPersonRelationshipTypeFk(@RequestParam("businessPersonFk") Integer businessPersonFk, @RequestParam("businessPersonRelationshipTypeFk") Integer businessPersonRelationshipTypeFk) {
        LOGGER.debug("Getting Businesspersonrelationship with uniques key BusinessPersonFkAndBusinessPersonRelationshipTypeFk");
        return businesspersonrelationshipService.getByBusinessPersonFkAndBusinessPersonRelationshipTypeFk(businessPersonFk, businessPersonRelationshipTypeFk);
    }

    /**
     * @deprecated Use {@link #findBusinesspersonrelationships(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Businesspersonrelationship instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Businesspersonrelationship> searchBusinesspersonrelationshipsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Businesspersonrelationships list");
        return businesspersonrelationshipService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Businesspersonrelationship instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Businesspersonrelationship> findBusinesspersonrelationships(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Businesspersonrelationships list");
        return businesspersonrelationshipService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Businesspersonrelationship instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Businesspersonrelationship> filterBusinesspersonrelationships(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Businesspersonrelationships list");
        return businesspersonrelationshipService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportBusinesspersonrelationships(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return businesspersonrelationshipService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Businesspersonrelationship instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countBusinesspersonrelationships( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Businesspersonrelationships");
		return businesspersonrelationshipService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getBusinesspersonrelationshipAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return businesspersonrelationshipService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service BusinesspersonrelationshipService instance
	 */
	protected void setBusinesspersonrelationshipService(BusinesspersonrelationshipService service) {
		this.businesspersonrelationshipService = service;
	}

}

