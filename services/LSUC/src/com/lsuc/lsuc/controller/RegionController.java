/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.lsuc.lsuc.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.lsuc.lsuc.Geographicarea;
import com.lsuc.lsuc.Region;
import com.lsuc.lsuc.service.RegionService;


/**
 * Controller object for domain model class Region.
 * @see Region
 */
@RestController("LSUC.RegionController")
@Api(value = "RegionController", description = "Exposes APIs to work with Region resource.")
@RequestMapping("/LSUC/Region")
public class RegionController {

    private static final Logger LOGGER = LoggerFactory.getLogger(RegionController.class);

    @Autowired
	@Qualifier("LSUC.RegionService")
	private RegionService regionService;

	@ApiOperation(value = "Creates a new Region instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Region createRegion(@RequestBody Region region) {
		LOGGER.debug("Create Region with information: {}" , region);

		region = regionService.create(region);
		LOGGER.debug("Created Region with information: {}" , region);

	    return region;
	}


    @ApiOperation(value = "Returns the Region instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Region getRegion(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Region with id: {}" , id);

        Region foundRegion = regionService.getById(id);
        LOGGER.debug("Region details with id: {}" , foundRegion);

        return foundRegion;
    }

    @ApiOperation(value = "Updates the Region instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Region editRegion(@PathVariable("id") Integer id, @RequestBody Region region) throws EntityNotFoundException {
        LOGGER.debug("Editing Region with id: {}" , region.getPk());

        region.setPk(id);
        region = regionService.update(region);
        LOGGER.debug("Region details with id: {}" , region);

        return region;
    }

    @ApiOperation(value = "Deletes the Region instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteRegion(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Region with id: {}" , id);

        Region deletedRegion = regionService.delete(id);

        return deletedRegion != null;
    }

    @RequestMapping(value = "/code/{code}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching Region with given unique key values.")
    public Region getByCode(@PathVariable("code") String code) {
        LOGGER.debug("Getting Region with uniques key Code");
        return regionService.getByCode(code);
    }

    /**
     * @deprecated Use {@link #findRegions(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Region instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Region> searchRegionsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Regions list");
        return regionService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Region instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Region> findRegions(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Regions list");
        return regionService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Region instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Region> filterRegions(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Regions list");
        return regionService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportRegions(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return regionService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Region instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countRegions( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Regions");
		return regionService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getRegionAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return regionService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/geographicareas", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the geographicareas instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Geographicarea> findAssociatedGeographicareas(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated geographicareas");
        return regionService.findAssociatedGeographicareas(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service RegionService instance
	 */
	protected void setRegionService(RegionService service) {
		this.regionService = service;
	}

}

