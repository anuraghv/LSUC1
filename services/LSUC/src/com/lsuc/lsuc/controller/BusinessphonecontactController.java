/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.lsuc.lsuc.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.lsuc.lsuc.Businessphonecontact;
import com.lsuc.lsuc.service.BusinessphonecontactService;


/**
 * Controller object for domain model class Businessphonecontact.
 * @see Businessphonecontact
 */
@RestController("LSUC.BusinessphonecontactController")
@Api(value = "BusinessphonecontactController", description = "Exposes APIs to work with Businessphonecontact resource.")
@RequestMapping("/LSUC/Businessphonecontact")
public class BusinessphonecontactController {

    private static final Logger LOGGER = LoggerFactory.getLogger(BusinessphonecontactController.class);

    @Autowired
	@Qualifier("LSUC.BusinessphonecontactService")
	private BusinessphonecontactService businessphonecontactService;

	@ApiOperation(value = "Creates a new Businessphonecontact instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Businessphonecontact createBusinessphonecontact(@RequestBody Businessphonecontact businessphonecontact) {
		LOGGER.debug("Create Businessphonecontact with information: {}" , businessphonecontact);

		businessphonecontact = businessphonecontactService.create(businessphonecontact);
		LOGGER.debug("Created Businessphonecontact with information: {}" , businessphonecontact);

	    return businessphonecontact;
	}


    @ApiOperation(value = "Returns the Businessphonecontact instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Businessphonecontact getBusinessphonecontact(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Businessphonecontact with id: {}" , id);

        Businessphonecontact foundBusinessphonecontact = businessphonecontactService.getById(id);
        LOGGER.debug("Businessphonecontact details with id: {}" , foundBusinessphonecontact);

        return foundBusinessphonecontact;
    }

    @ApiOperation(value = "Updates the Businessphonecontact instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Businessphonecontact editBusinessphonecontact(@PathVariable("id") Integer id, @RequestBody Businessphonecontact businessphonecontact) throws EntityNotFoundException {
        LOGGER.debug("Editing Businessphonecontact with id: {}" , businessphonecontact.getPk());

        businessphonecontact.setPk(id);
        businessphonecontact = businessphonecontactService.update(businessphonecontact);
        LOGGER.debug("Businessphonecontact details with id: {}" , businessphonecontact);

        return businessphonecontact;
    }

    @ApiOperation(value = "Deletes the Businessphonecontact instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteBusinessphonecontact(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Businessphonecontact with id: {}" , id);

        Businessphonecontact deletedBusinessphonecontact = businessphonecontactService.delete(id);

        return deletedBusinessphonecontact != null;
    }

    @RequestMapping(value = "/businessFk-phonePurposeFk-phoneTypeFk", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching Businessphonecontact with given unique key values.")
    public Businessphonecontact getByBusinessFkAndPhonePurposeFkAndPhoneTypeFk(@RequestParam("businessFk") Integer businessFk, @RequestParam("phonePurposeFk") Integer phonePurposeFk, @RequestParam("phoneTypeFk") Integer phoneTypeFk) {
        LOGGER.debug("Getting Businessphonecontact with uniques key BusinessFkAndPhonePurposeFkAndPhoneTypeFk");
        return businessphonecontactService.getByBusinessFkAndPhonePurposeFkAndPhoneTypeFk(businessFk, phonePurposeFk, phoneTypeFk);
    }

    /**
     * @deprecated Use {@link #findBusinessphonecontacts(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Businessphonecontact instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Businessphonecontact> searchBusinessphonecontactsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Businessphonecontacts list");
        return businessphonecontactService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Businessphonecontact instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Businessphonecontact> findBusinessphonecontacts(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Businessphonecontacts list");
        return businessphonecontactService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Businessphonecontact instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Businessphonecontact> filterBusinessphonecontacts(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Businessphonecontacts list");
        return businessphonecontactService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportBusinessphonecontacts(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return businessphonecontactService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Businessphonecontact instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countBusinessphonecontacts( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Businessphonecontacts");
		return businessphonecontactService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getBusinessphonecontactAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return businessphonecontactService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service BusinessphonecontactService instance
	 */
	protected void setBusinessphonecontactService(BusinessphonecontactService service) {
		this.businessphonecontactService = service;
	}

}

