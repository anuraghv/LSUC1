/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.lsuc.lsuc.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.lsuc.lsuc.Businessaddress;
import com.lsuc.lsuc.Country;
import com.lsuc.lsuc.Mailinglabel;
import com.lsuc.lsuc.Organizationalunitaddress;
import com.lsuc.lsuc.Personaddress;
import com.lsuc.lsuc.Province;
import com.lsuc.lsuc.service.CountryService;


/**
 * Controller object for domain model class Country.
 * @see Country
 */
@RestController("LSUC.CountryController")
@Api(value = "CountryController", description = "Exposes APIs to work with Country resource.")
@RequestMapping("/LSUC/Country")
public class CountryController {

    private static final Logger LOGGER = LoggerFactory.getLogger(CountryController.class);

    @Autowired
	@Qualifier("LSUC.CountryService")
	private CountryService countryService;

	@ApiOperation(value = "Creates a new Country instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Country createCountry(@RequestBody Country country) {
		LOGGER.debug("Create Country with information: {}" , country);

		country = countryService.create(country);
		LOGGER.debug("Created Country with information: {}" , country);

	    return country;
	}


    @ApiOperation(value = "Returns the Country instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Country getCountry(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Country with id: {}" , id);

        Country foundCountry = countryService.getById(id);
        LOGGER.debug("Country details with id: {}" , foundCountry);

        return foundCountry;
    }

    @ApiOperation(value = "Updates the Country instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Country editCountry(@PathVariable("id") Integer id, @RequestBody Country country) throws EntityNotFoundException {
        LOGGER.debug("Editing Country with id: {}" , country.getPk());

        country.setPk(id);
        country = countryService.update(country);
        LOGGER.debug("Country details with id: {}" , country);

        return country;
    }

    @ApiOperation(value = "Deletes the Country instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteCountry(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Country with id: {}" , id);

        Country deletedCountry = countryService.delete(id);

        return deletedCountry != null;
    }

    @RequestMapping(value = "/code/{code}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching Country with given unique key values.")
    public Country getByCode(@PathVariable("code") String code) {
        LOGGER.debug("Getting Country with uniques key Code");
        return countryService.getByCode(code);
    }

    /**
     * @deprecated Use {@link #findCountries(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Country instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Country> searchCountriesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Countries list");
        return countryService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Country instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Country> findCountries(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Countries list");
        return countryService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Country instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Country> filterCountries(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Countries list");
        return countryService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportCountries(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return countryService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Country instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countCountries( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Countries");
		return countryService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getCountryAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return countryService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/mailinglabels", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the mailinglabels instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Mailinglabel> findAssociatedMailinglabels(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated mailinglabels");
        return countryService.findAssociatedMailinglabels(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/provinces", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the provinces instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Province> findAssociatedProvinces(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated provinces");
        return countryService.findAssociatedProvinces(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/businessaddresses", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the businessaddresses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Businessaddress> findAssociatedBusinessaddresses(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated businessaddresses");
        return countryService.findAssociatedBusinessaddresses(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/organizationalunitaddresses", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the organizationalunitaddresses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Organizationalunitaddress> findAssociatedOrganizationalunitaddresses(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated organizationalunitaddresses");
        return countryService.findAssociatedOrganizationalunitaddresses(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/personaddresses", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the personaddresses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Personaddress> findAssociatedPersonaddresses(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated personaddresses");
        return countryService.findAssociatedPersonaddresses(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service CountryService instance
	 */
	protected void setCountryService(CountryService service) {
		this.countryService = service;
	}

}

