/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.lsuc.lsuc.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.sql.Date;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.lsuc.lsuc.Licenseeclasspracticegroup;
import com.lsuc.lsuc.LicenseeclasspracticegroupApprovals;
import com.lsuc.lsuc.Licenseepracticeineligibilityreason;
import com.lsuc.lsuc.service.LicenseeclasspracticegroupService;


/**
 * Controller object for domain model class Licenseeclasspracticegroup.
 * @see Licenseeclasspracticegroup
 */
@RestController("LSUC.LicenseeclasspracticegroupController")
@Api(value = "LicenseeclasspracticegroupController", description = "Exposes APIs to work with Licenseeclasspracticegroup resource.")
@RequestMapping("/LSUC/Licenseeclasspracticegroup")
public class LicenseeclasspracticegroupController {

    private static final Logger LOGGER = LoggerFactory.getLogger(LicenseeclasspracticegroupController.class);

    @Autowired
	@Qualifier("LSUC.LicenseeclasspracticegroupService")
	private LicenseeclasspracticegroupService licenseeclasspracticegroupService;

	@ApiOperation(value = "Creates a new Licenseeclasspracticegroup instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Licenseeclasspracticegroup createLicenseeclasspracticegroup(@RequestBody Licenseeclasspracticegroup licenseeclasspracticegroup) {
		LOGGER.debug("Create Licenseeclasspracticegroup with information: {}" , licenseeclasspracticegroup);

		licenseeclasspracticegroup = licenseeclasspracticegroupService.create(licenseeclasspracticegroup);
		LOGGER.debug("Created Licenseeclasspracticegroup with information: {}" , licenseeclasspracticegroup);

	    return licenseeclasspracticegroup;
	}


    @ApiOperation(value = "Returns the Licenseeclasspracticegroup instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Licenseeclasspracticegroup getLicenseeclasspracticegroup(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Licenseeclasspracticegroup with id: {}" , id);

        Licenseeclasspracticegroup foundLicenseeclasspracticegroup = licenseeclasspracticegroupService.getById(id);
        LOGGER.debug("Licenseeclasspracticegroup details with id: {}" , foundLicenseeclasspracticegroup);

        return foundLicenseeclasspracticegroup;
    }

    @ApiOperation(value = "Updates the Licenseeclasspracticegroup instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Licenseeclasspracticegroup editLicenseeclasspracticegroup(@PathVariable("id") Integer id, @RequestBody Licenseeclasspracticegroup licenseeclasspracticegroup) throws EntityNotFoundException {
        LOGGER.debug("Editing Licenseeclasspracticegroup with id: {}" , licenseeclasspracticegroup.getPk());

        licenseeclasspracticegroup.setPk(id);
        licenseeclasspracticegroup = licenseeclasspracticegroupService.update(licenseeclasspracticegroup);
        LOGGER.debug("Licenseeclasspracticegroup details with id: {}" , licenseeclasspracticegroup);

        return licenseeclasspracticegroup;
    }

    @ApiOperation(value = "Deletes the Licenseeclasspracticegroup instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteLicenseeclasspracticegroup(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Licenseeclasspracticegroup with id: {}" , id);

        Licenseeclasspracticegroup deletedLicenseeclasspracticegroup = licenseeclasspracticegroupService.delete(id);

        return deletedLicenseeclasspracticegroup != null;
    }

    @RequestMapping(value = "/licenseeFk-effectiveFromDate-effectiveToDate-classPracticeGroupFk", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching Licenseeclasspracticegroup with given unique key values.")
    public Licenseeclasspracticegroup getByLicenseeFkAndEffectiveFromDateAndEffectiveToDateAndClassPracticeGroupFk(@RequestParam("licenseeFk") Integer licenseeFk, @RequestParam("effectiveFromDate") Date effectiveFromDate, @RequestParam("effectiveToDate") Date effectiveToDate, @RequestParam("classPracticeGroupFk") Integer classPracticeGroupFk) {
        LOGGER.debug("Getting Licenseeclasspracticegroup with uniques key LicenseeFkAndEffectiveFromDateAndEffectiveToDateAndClassPracticeGroupFk");
        return licenseeclasspracticegroupService.getByLicenseeFkAndEffectiveFromDateAndEffectiveToDateAndClassPracticeGroupFk(licenseeFk, effectiveFromDate, effectiveToDate, classPracticeGroupFk);
    }

    /**
     * @deprecated Use {@link #findLicenseeclasspracticegroups(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Licenseeclasspracticegroup instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Licenseeclasspracticegroup> searchLicenseeclasspracticegroupsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Licenseeclasspracticegroups list");
        return licenseeclasspracticegroupService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Licenseeclasspracticegroup instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Licenseeclasspracticegroup> findLicenseeclasspracticegroups(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Licenseeclasspracticegroups list");
        return licenseeclasspracticegroupService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Licenseeclasspracticegroup instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Licenseeclasspracticegroup> filterLicenseeclasspracticegroups(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Licenseeclasspracticegroups list");
        return licenseeclasspracticegroupService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportLicenseeclasspracticegroups(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return licenseeclasspracticegroupService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Licenseeclasspracticegroup instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countLicenseeclasspracticegroups( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Licenseeclasspracticegroups");
		return licenseeclasspracticegroupService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getLicenseeclasspracticegroupAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return licenseeclasspracticegroupService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/licenseeclasspracticegroupApprovalses", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the licenseeclasspracticegroupApprovalses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<LicenseeclasspracticegroupApprovals> findAssociatedLicenseeclasspracticegroupApprovalses(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated licenseeclasspracticegroupApprovalses");
        return licenseeclasspracticegroupService.findAssociatedLicenseeclasspracticegroupApprovalses(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/licenseepracticeineligibilityreasons", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the licenseepracticeineligibilityreasons instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Licenseepracticeineligibilityreason> findAssociatedLicenseepracticeineligibilityreasons(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated licenseepracticeineligibilityreasons");
        return licenseeclasspracticegroupService.findAssociatedLicenseepracticeineligibilityreasons(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service LicenseeclasspracticegroupService instance
	 */
	protected void setLicenseeclasspracticegroupService(LicenseeclasspracticegroupService service) {
		this.licenseeclasspracticegroupService = service;
	}

}

