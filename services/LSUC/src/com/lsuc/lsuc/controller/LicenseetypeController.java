/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.lsuc.lsuc.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.lsuc.lsuc.Licencetype;
import com.lsuc.lsuc.Licenseetype;
import com.lsuc.lsuc.service.LicenseetypeService;


/**
 * Controller object for domain model class Licenseetype.
 * @see Licenseetype
 */
@RestController("LSUC.LicenseetypeController")
@Api(value = "LicenseetypeController", description = "Exposes APIs to work with Licenseetype resource.")
@RequestMapping("/LSUC/Licenseetype")
public class LicenseetypeController {

    private static final Logger LOGGER = LoggerFactory.getLogger(LicenseetypeController.class);

    @Autowired
	@Qualifier("LSUC.LicenseetypeService")
	private LicenseetypeService licenseetypeService;

	@ApiOperation(value = "Creates a new Licenseetype instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Licenseetype createLicenseetype(@RequestBody Licenseetype licenseetype) {
		LOGGER.debug("Create Licenseetype with information: {}" , licenseetype);

		licenseetype = licenseetypeService.create(licenseetype);
		LOGGER.debug("Created Licenseetype with information: {}" , licenseetype);

	    return licenseetype;
	}


    @ApiOperation(value = "Returns the Licenseetype instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Licenseetype getLicenseetype(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Licenseetype with id: {}" , id);

        Licenseetype foundLicenseetype = licenseetypeService.getById(id);
        LOGGER.debug("Licenseetype details with id: {}" , foundLicenseetype);

        return foundLicenseetype;
    }

    @ApiOperation(value = "Updates the Licenseetype instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Licenseetype editLicenseetype(@PathVariable("id") Integer id, @RequestBody Licenseetype licenseetype) throws EntityNotFoundException {
        LOGGER.debug("Editing Licenseetype with id: {}" , licenseetype.getPk());

        licenseetype.setPk(id);
        licenseetype = licenseetypeService.update(licenseetype);
        LOGGER.debug("Licenseetype details with id: {}" , licenseetype);

        return licenseetype;
    }

    @ApiOperation(value = "Deletes the Licenseetype instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteLicenseetype(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Licenseetype with id: {}" , id);

        Licenseetype deletedLicenseetype = licenseetypeService.delete(id);

        return deletedLicenseetype != null;
    }

    @RequestMapping(value = "/code/{code}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching Licenseetype with given unique key values.")
    public Licenseetype getByCode(@PathVariable("code") String code) {
        LOGGER.debug("Getting Licenseetype with uniques key Code");
        return licenseetypeService.getByCode(code);
    }

    /**
     * @deprecated Use {@link #findLicenseetypes(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Licenseetype instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Licenseetype> searchLicenseetypesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Licenseetypes list");
        return licenseetypeService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Licenseetype instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Licenseetype> findLicenseetypes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Licenseetypes list");
        return licenseetypeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Licenseetype instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Licenseetype> filterLicenseetypes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Licenseetypes list");
        return licenseetypeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportLicenseetypes(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return licenseetypeService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Licenseetype instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countLicenseetypes( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Licenseetypes");
		return licenseetypeService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getLicenseetypeAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return licenseetypeService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/licencetypes", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the licencetypes instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Licencetype> findAssociatedLicencetypes(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated licencetypes");
        return licenseetypeService.findAssociatedLicencetypes(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service LicenseetypeService instance
	 */
	protected void setLicenseetypeService(LicenseetypeService service) {
		this.licenseetypeService = service;
	}

}

