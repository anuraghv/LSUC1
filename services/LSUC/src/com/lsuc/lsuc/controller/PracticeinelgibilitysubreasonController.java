/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.lsuc.lsuc.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.lsuc.lsuc.Licenseepracticeineligibilitysubreason;
import com.lsuc.lsuc.Practiceinelgibilitysubreason;
import com.lsuc.lsuc.service.PracticeinelgibilitysubreasonService;


/**
 * Controller object for domain model class Practiceinelgibilitysubreason.
 * @see Practiceinelgibilitysubreason
 */
@RestController("LSUC.PracticeinelgibilitysubreasonController")
@Api(value = "PracticeinelgibilitysubreasonController", description = "Exposes APIs to work with Practiceinelgibilitysubreason resource.")
@RequestMapping("/LSUC/Practiceinelgibilitysubreason")
public class PracticeinelgibilitysubreasonController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PracticeinelgibilitysubreasonController.class);

    @Autowired
	@Qualifier("LSUC.PracticeinelgibilitysubreasonService")
	private PracticeinelgibilitysubreasonService practiceinelgibilitysubreasonService;

	@ApiOperation(value = "Creates a new Practiceinelgibilitysubreason instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Practiceinelgibilitysubreason createPracticeinelgibilitysubreason(@RequestBody Practiceinelgibilitysubreason practiceinelgibilitysubreason) {
		LOGGER.debug("Create Practiceinelgibilitysubreason with information: {}" , practiceinelgibilitysubreason);

		practiceinelgibilitysubreason = practiceinelgibilitysubreasonService.create(practiceinelgibilitysubreason);
		LOGGER.debug("Created Practiceinelgibilitysubreason with information: {}" , practiceinelgibilitysubreason);

	    return practiceinelgibilitysubreason;
	}


    @ApiOperation(value = "Returns the Practiceinelgibilitysubreason instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Practiceinelgibilitysubreason getPracticeinelgibilitysubreason(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Practiceinelgibilitysubreason with id: {}" , id);

        Practiceinelgibilitysubreason foundPracticeinelgibilitysubreason = practiceinelgibilitysubreasonService.getById(id);
        LOGGER.debug("Practiceinelgibilitysubreason details with id: {}" , foundPracticeinelgibilitysubreason);

        return foundPracticeinelgibilitysubreason;
    }

    @ApiOperation(value = "Updates the Practiceinelgibilitysubreason instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Practiceinelgibilitysubreason editPracticeinelgibilitysubreason(@PathVariable("id") Integer id, @RequestBody Practiceinelgibilitysubreason practiceinelgibilitysubreason) throws EntityNotFoundException {
        LOGGER.debug("Editing Practiceinelgibilitysubreason with id: {}" , practiceinelgibilitysubreason.getPk());

        practiceinelgibilitysubreason.setPk(id);
        practiceinelgibilitysubreason = practiceinelgibilitysubreasonService.update(practiceinelgibilitysubreason);
        LOGGER.debug("Practiceinelgibilitysubreason details with id: {}" , practiceinelgibilitysubreason);

        return practiceinelgibilitysubreason;
    }

    @ApiOperation(value = "Deletes the Practiceinelgibilitysubreason instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deletePracticeinelgibilitysubreason(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Practiceinelgibilitysubreason with id: {}" , id);

        Practiceinelgibilitysubreason deletedPracticeinelgibilitysubreason = practiceinelgibilitysubreasonService.delete(id);

        return deletedPracticeinelgibilitysubreason != null;
    }

    @RequestMapping(value = "/code/{code}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching Practiceinelgibilitysubreason with given unique key values.")
    public Practiceinelgibilitysubreason getByCode(@PathVariable("code") String code) {
        LOGGER.debug("Getting Practiceinelgibilitysubreason with uniques key Code");
        return practiceinelgibilitysubreasonService.getByCode(code);
    }

    /**
     * @deprecated Use {@link #findPracticeinelgibilitysubreasons(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Practiceinelgibilitysubreason instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Practiceinelgibilitysubreason> searchPracticeinelgibilitysubreasonsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Practiceinelgibilitysubreasons list");
        return practiceinelgibilitysubreasonService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Practiceinelgibilitysubreason instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Practiceinelgibilitysubreason> findPracticeinelgibilitysubreasons(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Practiceinelgibilitysubreasons list");
        return practiceinelgibilitysubreasonService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Practiceinelgibilitysubreason instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Practiceinelgibilitysubreason> filterPracticeinelgibilitysubreasons(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Practiceinelgibilitysubreasons list");
        return practiceinelgibilitysubreasonService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportPracticeinelgibilitysubreasons(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return practiceinelgibilitysubreasonService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Practiceinelgibilitysubreason instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countPracticeinelgibilitysubreasons( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Practiceinelgibilitysubreasons");
		return practiceinelgibilitysubreasonService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getPracticeinelgibilitysubreasonAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return practiceinelgibilitysubreasonService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/licenseepracticeineligibilitysubreasons", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the licenseepracticeineligibilitysubreasons instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Licenseepracticeineligibilitysubreason> findAssociatedLicenseepracticeineligibilitysubreasons(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated licenseepracticeineligibilitysubreasons");
        return practiceinelgibilitysubreasonService.findAssociatedLicenseepracticeineligibilitysubreasons(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PracticeinelgibilitysubreasonService instance
	 */
	protected void setPracticeinelgibilitysubreasonService(PracticeinelgibilitysubreasonService service) {
		this.practiceinelgibilitysubreasonService = service;
	}

}

