/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.lsuc.lsuc.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.lsuc.lsuc.Citizenship;
import com.lsuc.lsuc.Licensee;
import com.lsuc.lsuc.service.CitizenshipService;


/**
 * Controller object for domain model class Citizenship.
 * @see Citizenship
 */
@RestController("LSUC.CitizenshipController")
@Api(value = "CitizenshipController", description = "Exposes APIs to work with Citizenship resource.")
@RequestMapping("/LSUC/Citizenship")
public class CitizenshipController {

    private static final Logger LOGGER = LoggerFactory.getLogger(CitizenshipController.class);

    @Autowired
	@Qualifier("LSUC.CitizenshipService")
	private CitizenshipService citizenshipService;

	@ApiOperation(value = "Creates a new Citizenship instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Citizenship createCitizenship(@RequestBody Citizenship citizenship) {
		LOGGER.debug("Create Citizenship with information: {}" , citizenship);

		citizenship = citizenshipService.create(citizenship);
		LOGGER.debug("Created Citizenship with information: {}" , citizenship);

	    return citizenship;
	}


    @ApiOperation(value = "Returns the Citizenship instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Citizenship getCitizenship(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Citizenship with id: {}" , id);

        Citizenship foundCitizenship = citizenshipService.getById(id);
        LOGGER.debug("Citizenship details with id: {}" , foundCitizenship);

        return foundCitizenship;
    }

    @ApiOperation(value = "Updates the Citizenship instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Citizenship editCitizenship(@PathVariable("id") Integer id, @RequestBody Citizenship citizenship) throws EntityNotFoundException {
        LOGGER.debug("Editing Citizenship with id: {}" , citizenship.getPk());

        citizenship.setPk(id);
        citizenship = citizenshipService.update(citizenship);
        LOGGER.debug("Citizenship details with id: {}" , citizenship);

        return citizenship;
    }

    @ApiOperation(value = "Deletes the Citizenship instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteCitizenship(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Citizenship with id: {}" , id);

        Citizenship deletedCitizenship = citizenshipService.delete(id);

        return deletedCitizenship != null;
    }

    @RequestMapping(value = "/code/{code}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching Citizenship with given unique key values.")
    public Citizenship getByCode(@PathVariable("code") String code) {
        LOGGER.debug("Getting Citizenship with uniques key Code");
        return citizenshipService.getByCode(code);
    }

    /**
     * @deprecated Use {@link #findCitizenships(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Citizenship instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Citizenship> searchCitizenshipsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Citizenships list");
        return citizenshipService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Citizenship instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Citizenship> findCitizenships(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Citizenships list");
        return citizenshipService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Citizenship instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Citizenship> filterCitizenships(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Citizenships list");
        return citizenshipService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportCitizenships(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return citizenshipService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Citizenship instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countCitizenships( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Citizenships");
		return citizenshipService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getCitizenshipAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return citizenshipService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/licensees", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the licensees instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Licensee> findAssociatedLicensees(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated licensees");
        return citizenshipService.findAssociatedLicensees(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service CitizenshipService instance
	 */
	protected void setCitizenshipService(CitizenshipService service) {
		this.citizenshipService = service;
	}

}

