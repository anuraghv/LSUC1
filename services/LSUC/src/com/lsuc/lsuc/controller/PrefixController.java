/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.lsuc.lsuc.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.lsuc.lsuc.Person;
import com.lsuc.lsuc.Prefix;
import com.lsuc.lsuc.service.PrefixService;


/**
 * Controller object for domain model class Prefix.
 * @see Prefix
 */
@RestController("LSUC.PrefixController")
@Api(value = "PrefixController", description = "Exposes APIs to work with Prefix resource.")
@RequestMapping("/LSUC/Prefix")
public class PrefixController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PrefixController.class);

    @Autowired
	@Qualifier("LSUC.PrefixService")
	private PrefixService prefixService;

	@ApiOperation(value = "Creates a new Prefix instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Prefix createPrefix(@RequestBody Prefix prefix) {
		LOGGER.debug("Create Prefix with information: {}" , prefix);

		prefix = prefixService.create(prefix);
		LOGGER.debug("Created Prefix with information: {}" , prefix);

	    return prefix;
	}


    @ApiOperation(value = "Returns the Prefix instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Prefix getPrefix(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Prefix with id: {}" , id);

        Prefix foundPrefix = prefixService.getById(id);
        LOGGER.debug("Prefix details with id: {}" , foundPrefix);

        return foundPrefix;
    }

    @ApiOperation(value = "Updates the Prefix instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Prefix editPrefix(@PathVariable("id") Integer id, @RequestBody Prefix prefix) throws EntityNotFoundException {
        LOGGER.debug("Editing Prefix with id: {}" , prefix.getPk());

        prefix.setPk(id);
        prefix = prefixService.update(prefix);
        LOGGER.debug("Prefix details with id: {}" , prefix);

        return prefix;
    }

    @ApiOperation(value = "Deletes the Prefix instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deletePrefix(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Prefix with id: {}" , id);

        Prefix deletedPrefix = prefixService.delete(id);

        return deletedPrefix != null;
    }

    @RequestMapping(value = "/code/{code}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching Prefix with given unique key values.")
    public Prefix getByCode(@PathVariable("code") String code) {
        LOGGER.debug("Getting Prefix with uniques key Code");
        return prefixService.getByCode(code);
    }

    /**
     * @deprecated Use {@link #findPrefixes(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Prefix instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Prefix> searchPrefixesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Prefixes list");
        return prefixService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Prefix instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Prefix> findPrefixes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Prefixes list");
        return prefixService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Prefix instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Prefix> filterPrefixes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Prefixes list");
        return prefixService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportPrefixes(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return prefixService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Prefix instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countPrefixes( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Prefixes");
		return prefixService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getPrefixAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return prefixService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/persons", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the persons instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Person> findAssociatedPersons(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated persons");
        return prefixService.findAssociatedPersons(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PrefixService instance
	 */
	protected void setPrefixService(PrefixService service) {
		this.prefixService = service;
	}

}

