/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.lsuc.lsuc.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.lsuc.lsuc.Personnameotherlanguage;
import com.lsuc.lsuc.service.PersonnameotherlanguageService;


/**
 * Controller object for domain model class Personnameotherlanguage.
 * @see Personnameotherlanguage
 */
@RestController("LSUC.PersonnameotherlanguageController")
@Api(value = "PersonnameotherlanguageController", description = "Exposes APIs to work with Personnameotherlanguage resource.")
@RequestMapping("/LSUC/Personnameotherlanguage")
public class PersonnameotherlanguageController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PersonnameotherlanguageController.class);

    @Autowired
	@Qualifier("LSUC.PersonnameotherlanguageService")
	private PersonnameotherlanguageService personnameotherlanguageService;

	@ApiOperation(value = "Creates a new Personnameotherlanguage instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Personnameotherlanguage createPersonnameotherlanguage(@RequestBody Personnameotherlanguage personnameotherlanguage) {
		LOGGER.debug("Create Personnameotherlanguage with information: {}" , personnameotherlanguage);

		personnameotherlanguage = personnameotherlanguageService.create(personnameotherlanguage);
		LOGGER.debug("Created Personnameotherlanguage with information: {}" , personnameotherlanguage);

	    return personnameotherlanguage;
	}


    @ApiOperation(value = "Returns the Personnameotherlanguage instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Personnameotherlanguage getPersonnameotherlanguage(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Personnameotherlanguage with id: {}" , id);

        Personnameotherlanguage foundPersonnameotherlanguage = personnameotherlanguageService.getById(id);
        LOGGER.debug("Personnameotherlanguage details with id: {}" , foundPersonnameotherlanguage);

        return foundPersonnameotherlanguage;
    }

    @ApiOperation(value = "Updates the Personnameotherlanguage instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Personnameotherlanguage editPersonnameotherlanguage(@PathVariable("id") Integer id, @RequestBody Personnameotherlanguage personnameotherlanguage) throws EntityNotFoundException {
        LOGGER.debug("Editing Personnameotherlanguage with id: {}" , personnameotherlanguage.getPk());

        personnameotherlanguage.setPk(id);
        personnameotherlanguage = personnameotherlanguageService.update(personnameotherlanguage);
        LOGGER.debug("Personnameotherlanguage details with id: {}" , personnameotherlanguage);

        return personnameotherlanguage;
    }

    @ApiOperation(value = "Deletes the Personnameotherlanguage instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deletePersonnameotherlanguage(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Personnameotherlanguage with id: {}" , id);

        Personnameotherlanguage deletedPersonnameotherlanguage = personnameotherlanguageService.delete(id);

        return deletedPersonnameotherlanguage != null;
    }

    @RequestMapping(value = "/personFk-languageFk", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching Personnameotherlanguage with given unique key values.")
    public Personnameotherlanguage getByPersonFkAndLanguageFk(@RequestParam("personFk") Integer personFk, @RequestParam("languageFk") Integer languageFk) {
        LOGGER.debug("Getting Personnameotherlanguage with uniques key PersonFkAndLanguageFk");
        return personnameotherlanguageService.getByPersonFkAndLanguageFk(personFk, languageFk);
    }

    /**
     * @deprecated Use {@link #findPersonnameotherlanguages(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Personnameotherlanguage instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Personnameotherlanguage> searchPersonnameotherlanguagesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Personnameotherlanguages list");
        return personnameotherlanguageService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Personnameotherlanguage instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Personnameotherlanguage> findPersonnameotherlanguages(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Personnameotherlanguages list");
        return personnameotherlanguageService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Personnameotherlanguage instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Personnameotherlanguage> filterPersonnameotherlanguages(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Personnameotherlanguages list");
        return personnameotherlanguageService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportPersonnameotherlanguages(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return personnameotherlanguageService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Personnameotherlanguage instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countPersonnameotherlanguages( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Personnameotherlanguages");
		return personnameotherlanguageService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getPersonnameotherlanguageAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return personnameotherlanguageService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PersonnameotherlanguageService instance
	 */
	protected void setPersonnameotherlanguageService(PersonnameotherlanguageService service) {
		this.personnameotherlanguageService = service;
	}

}

