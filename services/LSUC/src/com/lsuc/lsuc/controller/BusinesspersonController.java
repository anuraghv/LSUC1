/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.lsuc.lsuc.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.lsuc.lsuc.Businessperson;
import com.lsuc.lsuc.Businesspersonrelationship;
import com.lsuc.lsuc.service.BusinesspersonService;


/**
 * Controller object for domain model class Businessperson.
 * @see Businessperson
 */
@RestController("LSUC.BusinesspersonController")
@Api(value = "BusinesspersonController", description = "Exposes APIs to work with Businessperson resource.")
@RequestMapping("/LSUC/Businessperson")
public class BusinesspersonController {

    private static final Logger LOGGER = LoggerFactory.getLogger(BusinesspersonController.class);

    @Autowired
	@Qualifier("LSUC.BusinesspersonService")
	private BusinesspersonService businesspersonService;

	@ApiOperation(value = "Creates a new Businessperson instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Businessperson createBusinessperson(@RequestBody Businessperson businessperson) {
		LOGGER.debug("Create Businessperson with information: {}" , businessperson);

		businessperson = businesspersonService.create(businessperson);
		LOGGER.debug("Created Businessperson with information: {}" , businessperson);

	    return businessperson;
	}


    @ApiOperation(value = "Returns the Businessperson instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Businessperson getBusinessperson(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Businessperson with id: {}" , id);

        Businessperson foundBusinessperson = businesspersonService.getById(id);
        LOGGER.debug("Businessperson details with id: {}" , foundBusinessperson);

        return foundBusinessperson;
    }

    @ApiOperation(value = "Updates the Businessperson instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Businessperson editBusinessperson(@PathVariable("id") Integer id, @RequestBody Businessperson businessperson) throws EntityNotFoundException {
        LOGGER.debug("Editing Businessperson with id: {}" , businessperson.getPk());

        businessperson.setPk(id);
        businessperson = businesspersonService.update(businessperson);
        LOGGER.debug("Businessperson details with id: {}" , businessperson);

        return businessperson;
    }

    @ApiOperation(value = "Deletes the Businessperson instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteBusinessperson(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Businessperson with id: {}" , id);

        Businessperson deletedBusinessperson = businesspersonService.delete(id);

        return deletedBusinessperson != null;
    }

    @RequestMapping(value = "/businessFk-personFk", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching Businessperson with given unique key values.")
    public Businessperson getByBusinessFkAndPersonFk(@RequestParam("businessFk") Integer businessFk, @RequestParam("personFk") Integer personFk) {
        LOGGER.debug("Getting Businessperson with uniques key BusinessFkAndPersonFk");
        return businesspersonService.getByBusinessFkAndPersonFk(businessFk, personFk);
    }

    /**
     * @deprecated Use {@link #findBusinesspeople(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Businessperson instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Businessperson> searchBusinesspeopleByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Businesspeople list");
        return businesspersonService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Businessperson instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Businessperson> findBusinesspeople(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Businesspeople list");
        return businesspersonService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Businessperson instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Businessperson> filterBusinesspeople(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Businesspeople list");
        return businesspersonService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportBusinesspeople(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return businesspersonService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Businessperson instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countBusinesspeople( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Businesspeople");
		return businesspersonService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getBusinesspersonAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return businesspersonService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/businesspersonrelationships", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the businesspersonrelationships instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Businesspersonrelationship> findAssociatedBusinesspersonrelationships(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated businesspersonrelationships");
        return businesspersonService.findAssociatedBusinesspersonrelationships(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service BusinesspersonService instance
	 */
	protected void setBusinesspersonService(BusinesspersonService service) {
		this.businesspersonService = service;
	}

}

