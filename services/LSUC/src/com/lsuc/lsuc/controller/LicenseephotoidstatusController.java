/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.lsuc.lsuc.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.lsuc.lsuc.Licenseephotoidcard;
import com.lsuc.lsuc.Licenseephotoidstatus;
import com.lsuc.lsuc.service.LicenseephotoidstatusService;


/**
 * Controller object for domain model class Licenseephotoidstatus.
 * @see Licenseephotoidstatus
 */
@RestController("LSUC.LicenseephotoidstatusController")
@Api(value = "LicenseephotoidstatusController", description = "Exposes APIs to work with Licenseephotoidstatus resource.")
@RequestMapping("/LSUC/Licenseephotoidstatus")
public class LicenseephotoidstatusController {

    private static final Logger LOGGER = LoggerFactory.getLogger(LicenseephotoidstatusController.class);

    @Autowired
	@Qualifier("LSUC.LicenseephotoidstatusService")
	private LicenseephotoidstatusService licenseephotoidstatusService;

	@ApiOperation(value = "Creates a new Licenseephotoidstatus instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Licenseephotoidstatus createLicenseephotoidstatus(@RequestBody Licenseephotoidstatus licenseephotoidstatus) {
		LOGGER.debug("Create Licenseephotoidstatus with information: {}" , licenseephotoidstatus);

		licenseephotoidstatus = licenseephotoidstatusService.create(licenseephotoidstatus);
		LOGGER.debug("Created Licenseephotoidstatus with information: {}" , licenseephotoidstatus);

	    return licenseephotoidstatus;
	}


    @ApiOperation(value = "Returns the Licenseephotoidstatus instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Licenseephotoidstatus getLicenseephotoidstatus(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Licenseephotoidstatus with id: {}" , id);

        Licenseephotoidstatus foundLicenseephotoidstatus = licenseephotoidstatusService.getById(id);
        LOGGER.debug("Licenseephotoidstatus details with id: {}" , foundLicenseephotoidstatus);

        return foundLicenseephotoidstatus;
    }

    @ApiOperation(value = "Updates the Licenseephotoidstatus instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Licenseephotoidstatus editLicenseephotoidstatus(@PathVariable("id") Integer id, @RequestBody Licenseephotoidstatus licenseephotoidstatus) throws EntityNotFoundException {
        LOGGER.debug("Editing Licenseephotoidstatus with id: {}" , licenseephotoidstatus.getPk());

        licenseephotoidstatus.setPk(id);
        licenseephotoidstatus = licenseephotoidstatusService.update(licenseephotoidstatus);
        LOGGER.debug("Licenseephotoidstatus details with id: {}" , licenseephotoidstatus);

        return licenseephotoidstatus;
    }

    @ApiOperation(value = "Deletes the Licenseephotoidstatus instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteLicenseephotoidstatus(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Licenseephotoidstatus with id: {}" , id);

        Licenseephotoidstatus deletedLicenseephotoidstatus = licenseephotoidstatusService.delete(id);

        return deletedLicenseephotoidstatus != null;
    }

    @RequestMapping(value = "/code/{code}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching Licenseephotoidstatus with given unique key values.")
    public Licenseephotoidstatus getByCode(@PathVariable("code") String code) {
        LOGGER.debug("Getting Licenseephotoidstatus with uniques key Code");
        return licenseephotoidstatusService.getByCode(code);
    }

    /**
     * @deprecated Use {@link #findLicenseephotoidstatuses(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Licenseephotoidstatus instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Licenseephotoidstatus> searchLicenseephotoidstatusesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Licenseephotoidstatuses list");
        return licenseephotoidstatusService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Licenseephotoidstatus instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Licenseephotoidstatus> findLicenseephotoidstatuses(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Licenseephotoidstatuses list");
        return licenseephotoidstatusService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Licenseephotoidstatus instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Licenseephotoidstatus> filterLicenseephotoidstatuses(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Licenseephotoidstatuses list");
        return licenseephotoidstatusService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportLicenseephotoidstatuses(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return licenseephotoidstatusService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Licenseephotoidstatus instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countLicenseephotoidstatuses( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Licenseephotoidstatuses");
		return licenseephotoidstatusService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getLicenseephotoidstatusAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return licenseephotoidstatusService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/licenseephotoidcards", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the licenseephotoidcards instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Licenseephotoidcard> findAssociatedLicenseephotoidcards(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated licenseephotoidcards");
        return licenseephotoidstatusService.findAssociatedLicenseephotoidcards(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service LicenseephotoidstatusService instance
	 */
	protected void setLicenseephotoidstatusService(LicenseephotoidstatusService service) {
		this.licenseephotoidstatusService = service;
	}

}

