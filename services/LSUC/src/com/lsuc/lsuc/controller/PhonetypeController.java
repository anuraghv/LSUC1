/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.lsuc.lsuc.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.lsuc.lsuc.Businessphonecontact;
import com.lsuc.lsuc.Personphonecontact;
import com.lsuc.lsuc.Phonetype;
import com.lsuc.lsuc.service.PhonetypeService;


/**
 * Controller object for domain model class Phonetype.
 * @see Phonetype
 */
@RestController("LSUC.PhonetypeController")
@Api(value = "PhonetypeController", description = "Exposes APIs to work with Phonetype resource.")
@RequestMapping("/LSUC/Phonetype")
public class PhonetypeController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PhonetypeController.class);

    @Autowired
	@Qualifier("LSUC.PhonetypeService")
	private PhonetypeService phonetypeService;

	@ApiOperation(value = "Creates a new Phonetype instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Phonetype createPhonetype(@RequestBody Phonetype phonetype) {
		LOGGER.debug("Create Phonetype with information: {}" , phonetype);

		phonetype = phonetypeService.create(phonetype);
		LOGGER.debug("Created Phonetype with information: {}" , phonetype);

	    return phonetype;
	}


    @ApiOperation(value = "Returns the Phonetype instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Phonetype getPhonetype(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Phonetype with id: {}" , id);

        Phonetype foundPhonetype = phonetypeService.getById(id);
        LOGGER.debug("Phonetype details with id: {}" , foundPhonetype);

        return foundPhonetype;
    }

    @ApiOperation(value = "Updates the Phonetype instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Phonetype editPhonetype(@PathVariable("id") Integer id, @RequestBody Phonetype phonetype) throws EntityNotFoundException {
        LOGGER.debug("Editing Phonetype with id: {}" , phonetype.getPk());

        phonetype.setPk(id);
        phonetype = phonetypeService.update(phonetype);
        LOGGER.debug("Phonetype details with id: {}" , phonetype);

        return phonetype;
    }

    @ApiOperation(value = "Deletes the Phonetype instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deletePhonetype(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Phonetype with id: {}" , id);

        Phonetype deletedPhonetype = phonetypeService.delete(id);

        return deletedPhonetype != null;
    }

    @RequestMapping(value = "/code/{code}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching Phonetype with given unique key values.")
    public Phonetype getByCode(@PathVariable("code") String code) {
        LOGGER.debug("Getting Phonetype with uniques key Code");
        return phonetypeService.getByCode(code);
    }

    /**
     * @deprecated Use {@link #findPhonetypes(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Phonetype instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Phonetype> searchPhonetypesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Phonetypes list");
        return phonetypeService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Phonetype instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Phonetype> findPhonetypes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Phonetypes list");
        return phonetypeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Phonetype instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Phonetype> filterPhonetypes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Phonetypes list");
        return phonetypeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportPhonetypes(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return phonetypeService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Phonetype instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countPhonetypes( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Phonetypes");
		return phonetypeService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getPhonetypeAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return phonetypeService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/personphonecontacts", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the personphonecontacts instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Personphonecontact> findAssociatedPersonphonecontacts(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated personphonecontacts");
        return phonetypeService.findAssociatedPersonphonecontacts(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/businessphonecontacts", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the businessphonecontacts instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Businessphonecontact> findAssociatedBusinessphonecontacts(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated businessphonecontacts");
        return phonetypeService.findAssociatedBusinessphonecontacts(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PhonetypeService instance
	 */
	protected void setPhonetypeService(PhonetypeService service) {
		this.phonetypeService = service;
	}

}

