/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.lsuc.lsuc.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.lsuc.lsuc.Personothername;
import com.lsuc.lsuc.service.PersonothernameService;


/**
 * Controller object for domain model class Personothername.
 * @see Personothername
 */
@RestController("LSUC.PersonothernameController")
@Api(value = "PersonothernameController", description = "Exposes APIs to work with Personothername resource.")
@RequestMapping("/LSUC/Personothername")
public class PersonothernameController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PersonothernameController.class);

    @Autowired
	@Qualifier("LSUC.PersonothernameService")
	private PersonothernameService personothernameService;

	@ApiOperation(value = "Creates a new Personothername instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Personothername createPersonothername(@RequestBody Personothername personothername) {
		LOGGER.debug("Create Personothername with information: {}" , personothername);

		personothername = personothernameService.create(personothername);
		LOGGER.debug("Created Personothername with information: {}" , personothername);

	    return personothername;
	}


    @ApiOperation(value = "Returns the Personothername instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Personothername getPersonothername(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Personothername with id: {}" , id);

        Personothername foundPersonothername = personothernameService.getById(id);
        LOGGER.debug("Personothername details with id: {}" , foundPersonothername);

        return foundPersonothername;
    }

    @ApiOperation(value = "Updates the Personothername instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Personothername editPersonothername(@PathVariable("id") Integer id, @RequestBody Personothername personothername) throws EntityNotFoundException {
        LOGGER.debug("Editing Personothername with id: {}" , personothername.getPk());

        personothername.setPk(id);
        personothername = personothernameService.update(personothername);
        LOGGER.debug("Personothername details with id: {}" , personothername);

        return personothername;
    }

    @ApiOperation(value = "Deletes the Personothername instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deletePersonothername(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Personothername with id: {}" , id);

        Personothername deletedPersonothername = personothernameService.delete(id);

        return deletedPersonothername != null;
    }

    @RequestMapping(value = "/personFk-otherNameTypeFk", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching Personothername with given unique key values.")
    public Personothername getByPersonFkAndOtherNameTypeFk(@RequestParam("personFk") Integer personFk, @RequestParam("otherNameTypeFk") Integer otherNameTypeFk) {
        LOGGER.debug("Getting Personothername with uniques key PersonFkAndOtherNameTypeFk");
        return personothernameService.getByPersonFkAndOtherNameTypeFk(personFk, otherNameTypeFk);
    }

    /**
     * @deprecated Use {@link #findPersonothernames(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Personothername instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Personothername> searchPersonothernamesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Personothernames list");
        return personothernameService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Personothername instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Personothername> findPersonothernames(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Personothernames list");
        return personothernameService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Personothername instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Personothername> filterPersonothernames(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Personothernames list");
        return personothernameService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportPersonothernames(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return personothernameService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Personothername instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countPersonothernames( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Personothernames");
		return personothernameService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getPersonothernameAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return personothernameService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PersonothernameService instance
	 */
	protected void setPersonothernameService(PersonothernameService service) {
		this.personothernameService = service;
	}

}

