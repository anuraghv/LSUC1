/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.lsuc.lsuc.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.sql.Date;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hibernate.TypeMismatchException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.lsuc.lsuc.Licenseephotoidcard;
import com.lsuc.lsuc.service.LicenseephotoidcardService;


/**
 * Controller object for domain model class Licenseephotoidcard.
 * @see Licenseephotoidcard
 */
@RestController("LSUC.LicenseephotoidcardController")
@Api(value = "LicenseephotoidcardController", description = "Exposes APIs to work with Licenseephotoidcard resource.")
@RequestMapping("/LSUC/Licenseephotoidcard")
public class LicenseephotoidcardController {

    private static final Logger LOGGER = LoggerFactory.getLogger(LicenseephotoidcardController.class);

    @Autowired
	@Qualifier("LSUC.LicenseephotoidcardService")
	private LicenseephotoidcardService licenseephotoidcardService;

	@ApiOperation(value = "Creates a new Licenseephotoidcard instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Licenseephotoidcard createLicenseephotoidcard(@RequestBody Licenseephotoidcard licenseephotoidcard) {
		LOGGER.debug("Create Licenseephotoidcard with information: {}" , licenseephotoidcard);

		licenseephotoidcard = licenseephotoidcardService.create(licenseephotoidcard);
		LOGGER.debug("Created Licenseephotoidcard with information: {}" , licenseephotoidcard);

	    return licenseephotoidcard;
	}

	@ApiOperation(value = "Creates a new Licenseephotoidcard instance.This API should be used when the Licenseephotoidcard instance has fields that requires multipart data.")
	@RequestMapping(method = RequestMethod.POST, consumes = {"multipart/form-data"})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Licenseephotoidcard createLicenseephotoidcard(MultipartHttpServletRequest multipartHttpServletRequest) {
    	Licenseephotoidcard licenseephotoidcard = WMMultipartUtils.toObject(multipartHttpServletRequest, Licenseephotoidcard.class, "LSUC"); 
        LOGGER.debug("Creating a new Licenseephotoidcard with information: {}" , licenseephotoidcard);
        return licenseephotoidcardService.create(licenseephotoidcard);
    }


    @ApiOperation(value = "Returns the Licenseephotoidcard instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Licenseephotoidcard getLicenseephotoidcard(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Licenseephotoidcard with id: {}" , id);

        Licenseephotoidcard foundLicenseephotoidcard = licenseephotoidcardService.getById(id);
        LOGGER.debug("Licenseephotoidcard details with id: {}" , foundLicenseephotoidcard);

        return foundLicenseephotoidcard;
    }

    @ApiOperation(value = "Retrieves content for the given BLOB field in Licenseephotoidcard instance" )
    @RequestMapping(value = "/{id}/content/{fieldName}", method = RequestMethod.GET, produces="application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DownloadResponse getLicenseephotoidcardBLOBContent(@PathVariable("id") Integer id, @PathVariable("fieldName") String fieldName, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, @RequestParam(value="download", defaultValue = "false") boolean download) {

        LOGGER.debug("Retrieves content for the given BLOB field {} in Licenseephotoidcard instance" , fieldName);

        if(!WMRuntimeUtils.isLob(Licenseephotoidcard.class, fieldName)) {
            throw new TypeMismatchException("Given field " + fieldName + " is not a valid BLOB type");
        }
        Licenseephotoidcard licenseephotoidcard = licenseephotoidcardService.getById(id);

        return WMMultipartUtils.buildDownloadResponseForBlob(licenseephotoidcard, fieldName, httpServletRequest, download);
    }

    @ApiOperation(value = "Updates the Licenseephotoidcard instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Licenseephotoidcard editLicenseephotoidcard(@PathVariable("id") Integer id, @RequestBody Licenseephotoidcard licenseephotoidcard) throws EntityNotFoundException {
        LOGGER.debug("Editing Licenseephotoidcard with id: {}" , licenseephotoidcard.getPk());

        licenseephotoidcard.setPk(id);
        licenseephotoidcard = licenseephotoidcardService.update(licenseephotoidcard);
        LOGGER.debug("Licenseephotoidcard details with id: {}" , licenseephotoidcard);

        return licenseephotoidcard;
    }

    @ApiOperation(value = "Updates the Licenseephotoidcard instance associated with the given id.This API should be used when Licenseephotoidcard instance fields that require multipart data.") 
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.POST, consumes = {"multipart/form-data"})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Licenseephotoidcard editLicenseephotoidcard(@PathVariable("id") Integer id, MultipartHttpServletRequest multipartHttpServletRequest) throws EntityNotFoundException {
        Licenseephotoidcard newLicenseephotoidcard = WMMultipartUtils.toObject(multipartHttpServletRequest, Licenseephotoidcard.class, "LSUC");
        newLicenseephotoidcard.setPk(id);

        Licenseephotoidcard oldLicenseephotoidcard = licenseephotoidcardService.getById(id);
        WMMultipartUtils.updateLobsContent(oldLicenseephotoidcard, newLicenseephotoidcard);
        LOGGER.debug("Updating Licenseephotoidcard with information: {}" , newLicenseephotoidcard);

        return licenseephotoidcardService.update(newLicenseephotoidcard);
    }

    @ApiOperation(value = "Deletes the Licenseephotoidcard instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteLicenseephotoidcard(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Licenseephotoidcard with id: {}" , id);

        Licenseephotoidcard deletedLicenseephotoidcard = licenseephotoidcardService.delete(id);

        return deletedLicenseephotoidcard != null;
    }

    @RequestMapping(value = "/licenseeFk-expiryDate", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching Licenseephotoidcard with given unique key values.")
    public Licenseephotoidcard getByLicenseeFkAndExpiryDate(@RequestParam("licenseeFk") Integer licenseeFk, @RequestParam("expiryDate") Date expiryDate) {
        LOGGER.debug("Getting Licenseephotoidcard with uniques key LicenseeFkAndExpiryDate");
        return licenseephotoidcardService.getByLicenseeFkAndExpiryDate(licenseeFk, expiryDate);
    }

    /**
     * @deprecated Use {@link #findLicenseephotoidcards(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Licenseephotoidcard instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Licenseephotoidcard> searchLicenseephotoidcardsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Licenseephotoidcards list");
        return licenseephotoidcardService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Licenseephotoidcard instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Licenseephotoidcard> findLicenseephotoidcards(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Licenseephotoidcards list");
        return licenseephotoidcardService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Licenseephotoidcard instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Licenseephotoidcard> filterLicenseephotoidcards(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Licenseephotoidcards list");
        return licenseephotoidcardService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportLicenseephotoidcards(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return licenseephotoidcardService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Licenseephotoidcard instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countLicenseephotoidcards( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Licenseephotoidcards");
		return licenseephotoidcardService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getLicenseephotoidcardAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return licenseephotoidcardService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service LicenseephotoidcardService instance
	 */
	protected void setLicenseephotoidcardService(LicenseephotoidcardService service) {
		this.licenseephotoidcardService = service;
	}

}

