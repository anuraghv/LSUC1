/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.lsuc.lsuc.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.lsuc.lsuc.ClassEntity;
import com.lsuc.lsuc.Practiceeligibility;
import com.lsuc.lsuc.Practicegroup;
import com.lsuc.lsuc.service.PracticeeligibilityService;


/**
 * Controller object for domain model class Practiceeligibility.
 * @see Practiceeligibility
 */
@RestController("LSUC.PracticeeligibilityController")
@Api(value = "PracticeeligibilityController", description = "Exposes APIs to work with Practiceeligibility resource.")
@RequestMapping("/LSUC/Practiceeligibility")
public class PracticeeligibilityController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PracticeeligibilityController.class);

    @Autowired
	@Qualifier("LSUC.PracticeeligibilityService")
	private PracticeeligibilityService practiceeligibilityService;

	@ApiOperation(value = "Creates a new Practiceeligibility instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Practiceeligibility createPracticeeligibility(@RequestBody Practiceeligibility practiceeligibility) {
		LOGGER.debug("Create Practiceeligibility with information: {}" , practiceeligibility);

		practiceeligibility = practiceeligibilityService.create(practiceeligibility);
		LOGGER.debug("Created Practiceeligibility with information: {}" , practiceeligibility);

	    return practiceeligibility;
	}


    @ApiOperation(value = "Returns the Practiceeligibility instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Practiceeligibility getPracticeeligibility(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Practiceeligibility with id: {}" , id);

        Practiceeligibility foundPracticeeligibility = practiceeligibilityService.getById(id);
        LOGGER.debug("Practiceeligibility details with id: {}" , foundPracticeeligibility);

        return foundPracticeeligibility;
    }

    @ApiOperation(value = "Updates the Practiceeligibility instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Practiceeligibility editPracticeeligibility(@PathVariable("id") Integer id, @RequestBody Practiceeligibility practiceeligibility) throws EntityNotFoundException {
        LOGGER.debug("Editing Practiceeligibility with id: {}" , practiceeligibility.getPk());

        practiceeligibility.setPk(id);
        practiceeligibility = practiceeligibilityService.update(practiceeligibility);
        LOGGER.debug("Practiceeligibility details with id: {}" , practiceeligibility);

        return practiceeligibility;
    }

    @ApiOperation(value = "Deletes the Practiceeligibility instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deletePracticeeligibility(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Practiceeligibility with id: {}" , id);

        Practiceeligibility deletedPracticeeligibility = practiceeligibilityService.delete(id);

        return deletedPracticeeligibility != null;
    }

    @RequestMapping(value = "/code/{code}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching Practiceeligibility with given unique key values.")
    public Practiceeligibility getByCode(@PathVariable("code") String code) {
        LOGGER.debug("Getting Practiceeligibility with uniques key Code");
        return practiceeligibilityService.getByCode(code);
    }

    /**
     * @deprecated Use {@link #findPracticeeligibilities(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Practiceeligibility instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Practiceeligibility> searchPracticeeligibilitiesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Practiceeligibilities list");
        return practiceeligibilityService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Practiceeligibility instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Practiceeligibility> findPracticeeligibilities(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Practiceeligibilities list");
        return practiceeligibilityService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Practiceeligibility instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Practiceeligibility> filterPracticeeligibilities(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Practiceeligibilities list");
        return practiceeligibilityService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportPracticeeligibilities(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return practiceeligibilityService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Practiceeligibility instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countPracticeeligibilities( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Practiceeligibilities");
		return practiceeligibilityService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getPracticeeligibilityAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return practiceeligibilityService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/practicegroups", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the practicegroups instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Practicegroup> findAssociatedPracticegroups(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated practicegroups");
        return practiceeligibilityService.findAssociatedPracticegroups(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/classEntities", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the classEntities instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ClassEntity> findAssociatedClassEntities(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated classEntities");
        return practiceeligibilityService.findAssociatedClassEntities(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PracticeeligibilityService instance
	 */
	protected void setPracticeeligibilityService(PracticeeligibilityService service) {
		this.practiceeligibilityService = service;
	}

}

