/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.lsuc.lsuc.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.lsuc.lsuc.Personemailcontact;
import com.lsuc.lsuc.service.PersonemailcontactService;


/**
 * Controller object for domain model class Personemailcontact.
 * @see Personemailcontact
 */
@RestController("LSUC.PersonemailcontactController")
@Api(value = "PersonemailcontactController", description = "Exposes APIs to work with Personemailcontact resource.")
@RequestMapping("/LSUC/Personemailcontact")
public class PersonemailcontactController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PersonemailcontactController.class);

    @Autowired
	@Qualifier("LSUC.PersonemailcontactService")
	private PersonemailcontactService personemailcontactService;

	@ApiOperation(value = "Creates a new Personemailcontact instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Personemailcontact createPersonemailcontact(@RequestBody Personemailcontact personemailcontact) {
		LOGGER.debug("Create Personemailcontact with information: {}" , personemailcontact);

		personemailcontact = personemailcontactService.create(personemailcontact);
		LOGGER.debug("Created Personemailcontact with information: {}" , personemailcontact);

	    return personemailcontact;
	}


    @ApiOperation(value = "Returns the Personemailcontact instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Personemailcontact getPersonemailcontact(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Personemailcontact with id: {}" , id);

        Personemailcontact foundPersonemailcontact = personemailcontactService.getById(id);
        LOGGER.debug("Personemailcontact details with id: {}" , foundPersonemailcontact);

        return foundPersonemailcontact;
    }

    @ApiOperation(value = "Updates the Personemailcontact instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Personemailcontact editPersonemailcontact(@PathVariable("id") Integer id, @RequestBody Personemailcontact personemailcontact) throws EntityNotFoundException {
        LOGGER.debug("Editing Personemailcontact with id: {}" , personemailcontact.getPk());

        personemailcontact.setPk(id);
        personemailcontact = personemailcontactService.update(personemailcontact);
        LOGGER.debug("Personemailcontact details with id: {}" , personemailcontact);

        return personemailcontact;
    }

    @ApiOperation(value = "Deletes the Personemailcontact instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deletePersonemailcontact(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Personemailcontact with id: {}" , id);

        Personemailcontact deletedPersonemailcontact = personemailcontactService.delete(id);

        return deletedPersonemailcontact != null;
    }

    @RequestMapping(value = "/personFk-emailPurposeFk", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching Personemailcontact with given unique key values.")
    public Personemailcontact getByPersonFkAndEmailPurposeFk(@RequestParam("personFk") Integer personFk, @RequestParam("emailPurposeFk") Integer emailPurposeFk) {
        LOGGER.debug("Getting Personemailcontact with uniques key PersonFkAndEmailPurposeFk");
        return personemailcontactService.getByPersonFkAndEmailPurposeFk(personFk, emailPurposeFk);
    }

    /**
     * @deprecated Use {@link #findPersonemailcontacts(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Personemailcontact instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Personemailcontact> searchPersonemailcontactsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Personemailcontacts list");
        return personemailcontactService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Personemailcontact instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Personemailcontact> findPersonemailcontacts(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Personemailcontacts list");
        return personemailcontactService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Personemailcontact instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Personemailcontact> filterPersonemailcontacts(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Personemailcontacts list");
        return personemailcontactService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportPersonemailcontacts(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return personemailcontactService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Personemailcontact instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countPersonemailcontacts( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Personemailcontacts");
		return personemailcontactService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getPersonemailcontactAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return personemailcontactService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PersonemailcontactService instance
	 */
	protected void setPersonemailcontactService(PersonemailcontactService service) {
		this.personemailcontactService = service;
	}

}

