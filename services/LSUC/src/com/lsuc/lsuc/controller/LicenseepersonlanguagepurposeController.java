/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.lsuc.lsuc.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.lsuc.lsuc.Licenseepersonlanguagepurpose;
import com.lsuc.lsuc.service.LicenseepersonlanguagepurposeService;


/**
 * Controller object for domain model class Licenseepersonlanguagepurpose.
 * @see Licenseepersonlanguagepurpose
 */
@RestController("LSUC.LicenseepersonlanguagepurposeController")
@Api(value = "LicenseepersonlanguagepurposeController", description = "Exposes APIs to work with Licenseepersonlanguagepurpose resource.")
@RequestMapping("/LSUC/Licenseepersonlanguagepurpose")
public class LicenseepersonlanguagepurposeController {

    private static final Logger LOGGER = LoggerFactory.getLogger(LicenseepersonlanguagepurposeController.class);

    @Autowired
	@Qualifier("LSUC.LicenseepersonlanguagepurposeService")
	private LicenseepersonlanguagepurposeService licenseepersonlanguagepurposeService;

	@ApiOperation(value = "Creates a new Licenseepersonlanguagepurpose instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Licenseepersonlanguagepurpose createLicenseepersonlanguagepurpose(@RequestBody Licenseepersonlanguagepurpose licenseepersonlanguagepurpose) {
		LOGGER.debug("Create Licenseepersonlanguagepurpose with information: {}" , licenseepersonlanguagepurpose);

		licenseepersonlanguagepurpose = licenseepersonlanguagepurposeService.create(licenseepersonlanguagepurpose);
		LOGGER.debug("Created Licenseepersonlanguagepurpose with information: {}" , licenseepersonlanguagepurpose);

	    return licenseepersonlanguagepurpose;
	}


    @ApiOperation(value = "Returns the Licenseepersonlanguagepurpose instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Licenseepersonlanguagepurpose getLicenseepersonlanguagepurpose(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Licenseepersonlanguagepurpose with id: {}" , id);

        Licenseepersonlanguagepurpose foundLicenseepersonlanguagepurpose = licenseepersonlanguagepurposeService.getById(id);
        LOGGER.debug("Licenseepersonlanguagepurpose details with id: {}" , foundLicenseepersonlanguagepurpose);

        return foundLicenseepersonlanguagepurpose;
    }

    @ApiOperation(value = "Updates the Licenseepersonlanguagepurpose instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Licenseepersonlanguagepurpose editLicenseepersonlanguagepurpose(@PathVariable("id") Integer id, @RequestBody Licenseepersonlanguagepurpose licenseepersonlanguagepurpose) throws EntityNotFoundException {
        LOGGER.debug("Editing Licenseepersonlanguagepurpose with id: {}" , licenseepersonlanguagepurpose.getPk());

        licenseepersonlanguagepurpose.setPk(id);
        licenseepersonlanguagepurpose = licenseepersonlanguagepurposeService.update(licenseepersonlanguagepurpose);
        LOGGER.debug("Licenseepersonlanguagepurpose details with id: {}" , licenseepersonlanguagepurpose);

        return licenseepersonlanguagepurpose;
    }

    @ApiOperation(value = "Deletes the Licenseepersonlanguagepurpose instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteLicenseepersonlanguagepurpose(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Licenseepersonlanguagepurpose with id: {}" , id);

        Licenseepersonlanguagepurpose deletedLicenseepersonlanguagepurpose = licenseepersonlanguagepurposeService.delete(id);

        return deletedLicenseepersonlanguagepurpose != null;
    }

    @RequestMapping(value = "/licenseeFk-personLanguageFk-languagePurposeFk", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching Licenseepersonlanguagepurpose with given unique key values.")
    public Licenseepersonlanguagepurpose getByLicenseeFkAndPersonLanguageFkAndLanguagePurposeFk(@RequestParam("licenseeFk") Integer licenseeFk, @RequestParam("personLanguageFk") Integer personLanguageFk, @RequestParam("languagePurposeFk") Integer languagePurposeFk) {
        LOGGER.debug("Getting Licenseepersonlanguagepurpose with uniques key LicenseeFkAndPersonLanguageFkAndLanguagePurposeFk");
        return licenseepersonlanguagepurposeService.getByLicenseeFkAndPersonLanguageFkAndLanguagePurposeFk(licenseeFk, personLanguageFk, languagePurposeFk);
    }

    /**
     * @deprecated Use {@link #findLicenseepersonlanguagepurposes(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Licenseepersonlanguagepurpose instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Licenseepersonlanguagepurpose> searchLicenseepersonlanguagepurposesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Licenseepersonlanguagepurposes list");
        return licenseepersonlanguagepurposeService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Licenseepersonlanguagepurpose instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Licenseepersonlanguagepurpose> findLicenseepersonlanguagepurposes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Licenseepersonlanguagepurposes list");
        return licenseepersonlanguagepurposeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Licenseepersonlanguagepurpose instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Licenseepersonlanguagepurpose> filterLicenseepersonlanguagepurposes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Licenseepersonlanguagepurposes list");
        return licenseepersonlanguagepurposeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportLicenseepersonlanguagepurposes(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return licenseepersonlanguagepurposeService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Licenseepersonlanguagepurpose instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countLicenseepersonlanguagepurposes( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Licenseepersonlanguagepurposes");
		return licenseepersonlanguagepurposeService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getLicenseepersonlanguagepurposeAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return licenseepersonlanguagepurposeService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service LicenseepersonlanguagepurposeService instance
	 */
	protected void setLicenseepersonlanguagepurposeService(LicenseepersonlanguagepurposeService service) {
		this.licenseepersonlanguagepurposeService = service;
	}

}

