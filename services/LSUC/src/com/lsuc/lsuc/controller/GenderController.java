/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.lsuc.lsuc.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.lsuc.lsuc.Gender;
import com.lsuc.lsuc.Person;
import com.lsuc.lsuc.service.GenderService;


/**
 * Controller object for domain model class Gender.
 * @see Gender
 */
@RestController("LSUC.GenderController")
@Api(value = "GenderController", description = "Exposes APIs to work with Gender resource.")
@RequestMapping("/LSUC/Gender")
public class GenderController {

    private static final Logger LOGGER = LoggerFactory.getLogger(GenderController.class);

    @Autowired
	@Qualifier("LSUC.GenderService")
	private GenderService genderService;

	@ApiOperation(value = "Creates a new Gender instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Gender createGender(@RequestBody Gender gender) {
		LOGGER.debug("Create Gender with information: {}" , gender);

		gender = genderService.create(gender);
		LOGGER.debug("Created Gender with information: {}" , gender);

	    return gender;
	}


    @ApiOperation(value = "Returns the Gender instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Gender getGender(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Gender with id: {}" , id);

        Gender foundGender = genderService.getById(id);
        LOGGER.debug("Gender details with id: {}" , foundGender);

        return foundGender;
    }

    @ApiOperation(value = "Updates the Gender instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Gender editGender(@PathVariable("id") Integer id, @RequestBody Gender gender) throws EntityNotFoundException {
        LOGGER.debug("Editing Gender with id: {}" , gender.getPk());

        gender.setPk(id);
        gender = genderService.update(gender);
        LOGGER.debug("Gender details with id: {}" , gender);

        return gender;
    }

    @ApiOperation(value = "Deletes the Gender instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteGender(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Gender with id: {}" , id);

        Gender deletedGender = genderService.delete(id);

        return deletedGender != null;
    }

    @RequestMapping(value = "/code/{code}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching Gender with given unique key values.")
    public Gender getByCode(@PathVariable("code") String code) {
        LOGGER.debug("Getting Gender with uniques key Code");
        return genderService.getByCode(code);
    }

    /**
     * @deprecated Use {@link #findGenders(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Gender instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Gender> searchGendersByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Genders list");
        return genderService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Gender instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Gender> findGenders(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Genders list");
        return genderService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Gender instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Gender> filterGenders(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Genders list");
        return genderService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGenders(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return genderService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Gender instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countGenders( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Genders");
		return genderService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getGenderAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return genderService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/persons", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the persons instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Person> findAssociatedPersons(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated persons");
        return genderService.findAssociatedPersons(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service GenderService instance
	 */
	protected void setGenderService(GenderService service) {
		this.genderService = service;
	}

}

