/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.lsuc.lsuc.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.lsuc.lsuc.Licenseepersonlanguagepurpose;
import com.lsuc.lsuc.Personlanguage;
import com.lsuc.lsuc.Personlanguagecommunicationchannel;
import com.lsuc.lsuc.service.PersonlanguageService;


/**
 * Controller object for domain model class Personlanguage.
 * @see Personlanguage
 */
@RestController("LSUC.PersonlanguageController")
@Api(value = "PersonlanguageController", description = "Exposes APIs to work with Personlanguage resource.")
@RequestMapping("/LSUC/Personlanguage")
public class PersonlanguageController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PersonlanguageController.class);

    @Autowired
	@Qualifier("LSUC.PersonlanguageService")
	private PersonlanguageService personlanguageService;

	@ApiOperation(value = "Creates a new Personlanguage instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Personlanguage createPersonlanguage(@RequestBody Personlanguage personlanguage) {
		LOGGER.debug("Create Personlanguage with information: {}" , personlanguage);

		personlanguage = personlanguageService.create(personlanguage);
		LOGGER.debug("Created Personlanguage with information: {}" , personlanguage);

	    return personlanguage;
	}


    @ApiOperation(value = "Returns the Personlanguage instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Personlanguage getPersonlanguage(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Personlanguage with id: {}" , id);

        Personlanguage foundPersonlanguage = personlanguageService.getById(id);
        LOGGER.debug("Personlanguage details with id: {}" , foundPersonlanguage);

        return foundPersonlanguage;
    }

    @ApiOperation(value = "Updates the Personlanguage instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Personlanguage editPersonlanguage(@PathVariable("id") Integer id, @RequestBody Personlanguage personlanguage) throws EntityNotFoundException {
        LOGGER.debug("Editing Personlanguage with id: {}" , personlanguage.getPk());

        personlanguage.setPk(id);
        personlanguage = personlanguageService.update(personlanguage);
        LOGGER.debug("Personlanguage details with id: {}" , personlanguage);

        return personlanguage;
    }

    @ApiOperation(value = "Deletes the Personlanguage instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deletePersonlanguage(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Personlanguage with id: {}" , id);

        Personlanguage deletedPersonlanguage = personlanguageService.delete(id);

        return deletedPersonlanguage != null;
    }

    @RequestMapping(value = "/personFk-languageFk", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching Personlanguage with given unique key values.")
    public Personlanguage getByPersonFkAndLanguageFk(@RequestParam("personFk") Integer personFk, @RequestParam("languageFk") Integer languageFk) {
        LOGGER.debug("Getting Personlanguage with uniques key PersonFkAndLanguageFk");
        return personlanguageService.getByPersonFkAndLanguageFk(personFk, languageFk);
    }

    /**
     * @deprecated Use {@link #findPersonlanguages(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Personlanguage instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Personlanguage> searchPersonlanguagesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Personlanguages list");
        return personlanguageService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Personlanguage instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Personlanguage> findPersonlanguages(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Personlanguages list");
        return personlanguageService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Personlanguage instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Personlanguage> filterPersonlanguages(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Personlanguages list");
        return personlanguageService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportPersonlanguages(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return personlanguageService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Personlanguage instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countPersonlanguages( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Personlanguages");
		return personlanguageService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getPersonlanguageAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return personlanguageService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/licenseepersonlanguagepurposes", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the licenseepersonlanguagepurposes instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Licenseepersonlanguagepurpose> findAssociatedLicenseepersonlanguagepurposes(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated licenseepersonlanguagepurposes");
        return personlanguageService.findAssociatedLicenseepersonlanguagepurposes(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/personlanguagecommunicationchannels", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the personlanguagecommunicationchannels instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Personlanguagecommunicationchannel> findAssociatedPersonlanguagecommunicationchannels(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated personlanguagecommunicationchannels");
        return personlanguageService.findAssociatedPersonlanguagecommunicationchannels(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PersonlanguageService instance
	 */
	protected void setPersonlanguageService(PersonlanguageService service) {
		this.personlanguageService = service;
	}

}

