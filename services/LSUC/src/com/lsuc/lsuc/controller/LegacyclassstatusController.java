/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.lsuc.lsuc.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.lsuc.lsuc.Legacyclassstatus;
import com.lsuc.lsuc.Licensee;
import com.lsuc.lsuc.service.LegacyclassstatusService;


/**
 * Controller object for domain model class Legacyclassstatus.
 * @see Legacyclassstatus
 */
@RestController("LSUC.LegacyclassstatusController")
@Api(value = "LegacyclassstatusController", description = "Exposes APIs to work with Legacyclassstatus resource.")
@RequestMapping("/LSUC/Legacyclassstatus")
public class LegacyclassstatusController {

    private static final Logger LOGGER = LoggerFactory.getLogger(LegacyclassstatusController.class);

    @Autowired
	@Qualifier("LSUC.LegacyclassstatusService")
	private LegacyclassstatusService legacyclassstatusService;

	@ApiOperation(value = "Creates a new Legacyclassstatus instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Legacyclassstatus createLegacyclassstatus(@RequestBody Legacyclassstatus legacyclassstatus) {
		LOGGER.debug("Create Legacyclassstatus with information: {}" , legacyclassstatus);

		legacyclassstatus = legacyclassstatusService.create(legacyclassstatus);
		LOGGER.debug("Created Legacyclassstatus with information: {}" , legacyclassstatus);

	    return legacyclassstatus;
	}


    @ApiOperation(value = "Returns the Legacyclassstatus instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Legacyclassstatus getLegacyclassstatus(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Legacyclassstatus with id: {}" , id);

        Legacyclassstatus foundLegacyclassstatus = legacyclassstatusService.getById(id);
        LOGGER.debug("Legacyclassstatus details with id: {}" , foundLegacyclassstatus);

        return foundLegacyclassstatus;
    }

    @ApiOperation(value = "Updates the Legacyclassstatus instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Legacyclassstatus editLegacyclassstatus(@PathVariable("id") Integer id, @RequestBody Legacyclassstatus legacyclassstatus) throws EntityNotFoundException {
        LOGGER.debug("Editing Legacyclassstatus with id: {}" , legacyclassstatus.getPk());

        legacyclassstatus.setPk(id);
        legacyclassstatus = legacyclassstatusService.update(legacyclassstatus);
        LOGGER.debug("Legacyclassstatus details with id: {}" , legacyclassstatus);

        return legacyclassstatus;
    }

    @ApiOperation(value = "Deletes the Legacyclassstatus instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteLegacyclassstatus(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Legacyclassstatus with id: {}" , id);

        Legacyclassstatus deletedLegacyclassstatus = legacyclassstatusService.delete(id);

        return deletedLegacyclassstatus != null;
    }

    @RequestMapping(value = "/code/{code}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching Legacyclassstatus with given unique key values.")
    public Legacyclassstatus getByCode(@PathVariable("code") String code) {
        LOGGER.debug("Getting Legacyclassstatus with uniques key Code");
        return legacyclassstatusService.getByCode(code);
    }

    /**
     * @deprecated Use {@link #findLegacyclassstatuses(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Legacyclassstatus instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Legacyclassstatus> searchLegacyclassstatusesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Legacyclassstatuses list");
        return legacyclassstatusService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Legacyclassstatus instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Legacyclassstatus> findLegacyclassstatuses(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Legacyclassstatuses list");
        return legacyclassstatusService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Legacyclassstatus instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Legacyclassstatus> filterLegacyclassstatuses(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Legacyclassstatuses list");
        return legacyclassstatusService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportLegacyclassstatuses(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return legacyclassstatusService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Legacyclassstatus instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countLegacyclassstatuses( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Legacyclassstatuses");
		return legacyclassstatusService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getLegacyclassstatusAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return legacyclassstatusService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/licensees", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the licensees instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Licensee> findAssociatedLicensees(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated licensees");
        return legacyclassstatusService.findAssociatedLicensees(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service LegacyclassstatusService instance
	 */
	protected void setLegacyclassstatusService(LegacyclassstatusService service) {
		this.legacyclassstatusService = service;
	}

}

