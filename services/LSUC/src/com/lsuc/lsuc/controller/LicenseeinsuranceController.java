/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.lsuc.lsuc.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.lsuc.lsuc.Licenseeinsurance;
import com.lsuc.lsuc.Licenseeinsurancepolicy;
import com.lsuc.lsuc.service.LicenseeinsuranceService;


/**
 * Controller object for domain model class Licenseeinsurance.
 * @see Licenseeinsurance
 */
@RestController("LSUC.LicenseeinsuranceController")
@Api(value = "LicenseeinsuranceController", description = "Exposes APIs to work with Licenseeinsurance resource.")
@RequestMapping("/LSUC/Licenseeinsurance")
public class LicenseeinsuranceController {

    private static final Logger LOGGER = LoggerFactory.getLogger(LicenseeinsuranceController.class);

    @Autowired
	@Qualifier("LSUC.LicenseeinsuranceService")
	private LicenseeinsuranceService licenseeinsuranceService;

	@ApiOperation(value = "Creates a new Licenseeinsurance instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Licenseeinsurance createLicenseeinsurance(@RequestBody Licenseeinsurance licenseeinsurance) {
		LOGGER.debug("Create Licenseeinsurance with information: {}" , licenseeinsurance);

		licenseeinsurance = licenseeinsuranceService.create(licenseeinsurance);
		LOGGER.debug("Created Licenseeinsurance with information: {}" , licenseeinsurance);

	    return licenseeinsurance;
	}


    @ApiOperation(value = "Returns the Licenseeinsurance instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Licenseeinsurance getLicenseeinsurance(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Licenseeinsurance with id: {}" , id);

        Licenseeinsurance foundLicenseeinsurance = licenseeinsuranceService.getById(id);
        LOGGER.debug("Licenseeinsurance details with id: {}" , foundLicenseeinsurance);

        return foundLicenseeinsurance;
    }

    @ApiOperation(value = "Updates the Licenseeinsurance instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Licenseeinsurance editLicenseeinsurance(@PathVariable("id") Integer id, @RequestBody Licenseeinsurance licenseeinsurance) throws EntityNotFoundException {
        LOGGER.debug("Editing Licenseeinsurance with id: {}" , licenseeinsurance.getPk());

        licenseeinsurance.setPk(id);
        licenseeinsurance = licenseeinsuranceService.update(licenseeinsurance);
        LOGGER.debug("Licenseeinsurance details with id: {}" , licenseeinsurance);

        return licenseeinsurance;
    }

    @ApiOperation(value = "Deletes the Licenseeinsurance instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteLicenseeinsurance(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Licenseeinsurance with id: {}" , id);

        Licenseeinsurance deletedLicenseeinsurance = licenseeinsuranceService.delete(id);

        return deletedLicenseeinsurance != null;
    }

    @RequestMapping(value = "/licenseeFk-insuranceCoverageTypeFk", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching Licenseeinsurance with given unique key values.")
    public Licenseeinsurance getByLicenseeFkAndInsuranceCoverageTypeFk(@RequestParam("licenseeFk") Integer licenseeFk, @RequestParam("insuranceCoverageTypeFk") Integer insuranceCoverageTypeFk) {
        LOGGER.debug("Getting Licenseeinsurance with uniques key LicenseeFkAndInsuranceCoverageTypeFk");
        return licenseeinsuranceService.getByLicenseeFkAndInsuranceCoverageTypeFk(licenseeFk, insuranceCoverageTypeFk);
    }

    /**
     * @deprecated Use {@link #findLicenseeinsurances(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Licenseeinsurance instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Licenseeinsurance> searchLicenseeinsurancesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Licenseeinsurances list");
        return licenseeinsuranceService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Licenseeinsurance instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Licenseeinsurance> findLicenseeinsurances(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Licenseeinsurances list");
        return licenseeinsuranceService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Licenseeinsurance instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Licenseeinsurance> filterLicenseeinsurances(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Licenseeinsurances list");
        return licenseeinsuranceService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportLicenseeinsurances(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return licenseeinsuranceService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Licenseeinsurance instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countLicenseeinsurances( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Licenseeinsurances");
		return licenseeinsuranceService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getLicenseeinsuranceAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return licenseeinsuranceService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/licenseeinsurancepolicies", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the licenseeinsurancepolicies instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Licenseeinsurancepolicy> findAssociatedLicenseeinsurancepolicies(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated licenseeinsurancepolicies");
        return licenseeinsuranceService.findAssociatedLicenseeinsurancepolicies(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service LicenseeinsuranceService instance
	 */
	protected void setLicenseeinsuranceService(LicenseeinsuranceService service) {
		this.licenseeinsuranceService = service;
	}

}

