/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.lsuc.lsuc.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.lsuc.lsuc.Licencetype;
import com.lsuc.lsuc.Licensee;
import com.lsuc.lsuc.service.LicencetypeService;


/**
 * Controller object for domain model class Licencetype.
 * @see Licencetype
 */
@RestController("LSUC.LicencetypeController")
@Api(value = "LicencetypeController", description = "Exposes APIs to work with Licencetype resource.")
@RequestMapping("/LSUC/Licencetype")
public class LicencetypeController {

    private static final Logger LOGGER = LoggerFactory.getLogger(LicencetypeController.class);

    @Autowired
	@Qualifier("LSUC.LicencetypeService")
	private LicencetypeService licencetypeService;

	@ApiOperation(value = "Creates a new Licencetype instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Licencetype createLicencetype(@RequestBody Licencetype licencetype) {
		LOGGER.debug("Create Licencetype with information: {}" , licencetype);

		licencetype = licencetypeService.create(licencetype);
		LOGGER.debug("Created Licencetype with information: {}" , licencetype);

	    return licencetype;
	}


    @ApiOperation(value = "Returns the Licencetype instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Licencetype getLicencetype(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Licencetype with id: {}" , id);

        Licencetype foundLicencetype = licencetypeService.getById(id);
        LOGGER.debug("Licencetype details with id: {}" , foundLicencetype);

        return foundLicencetype;
    }

    @ApiOperation(value = "Updates the Licencetype instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Licencetype editLicencetype(@PathVariable("id") Integer id, @RequestBody Licencetype licencetype) throws EntityNotFoundException {
        LOGGER.debug("Editing Licencetype with id: {}" , licencetype.getPk());

        licencetype.setPk(id);
        licencetype = licencetypeService.update(licencetype);
        LOGGER.debug("Licencetype details with id: {}" , licencetype);

        return licencetype;
    }

    @ApiOperation(value = "Deletes the Licencetype instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteLicencetype(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Licencetype with id: {}" , id);

        Licencetype deletedLicencetype = licencetypeService.delete(id);

        return deletedLicencetype != null;
    }

    @RequestMapping(value = "/code/{code}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching Licencetype with given unique key values.")
    public Licencetype getByCode(@PathVariable("code") String code) {
        LOGGER.debug("Getting Licencetype with uniques key Code");
        return licencetypeService.getByCode(code);
    }

    /**
     * @deprecated Use {@link #findLicencetypes(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Licencetype instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Licencetype> searchLicencetypesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Licencetypes list");
        return licencetypeService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Licencetype instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Licencetype> findLicencetypes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Licencetypes list");
        return licencetypeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Licencetype instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Licencetype> filterLicencetypes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Licencetypes list");
        return licencetypeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportLicencetypes(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return licencetypeService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Licencetype instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countLicencetypes( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Licencetypes");
		return licencetypeService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getLicencetypeAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return licencetypeService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/licensees", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the licensees instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Licensee> findAssociatedLicensees(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated licensees");
        return licencetypeService.findAssociatedLicensees(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service LicencetypeService instance
	 */
	protected void setLicencetypeService(LicencetypeService service) {
		this.licencetypeService = service;
	}

}

