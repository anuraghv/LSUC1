/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.lsuc.lsuc.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.lsuc.lsuc.ClassEntity;
import com.lsuc.lsuc.Classpraticegroup;
import com.lsuc.lsuc.Practiceinelgibilityreason;
import com.lsuc.lsuc.service.ClassEntityService;


/**
 * Controller object for domain model class ClassEntity.
 * @see ClassEntity
 */
@RestController("LSUC.ClassEntityController")
@Api(value = "ClassEntityController", description = "Exposes APIs to work with ClassEntity resource.")
@RequestMapping("/LSUC/ClassEntity")
public class ClassEntityController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ClassEntityController.class);

    @Autowired
	@Qualifier("LSUC.ClassEntityService")
	private ClassEntityService classEntityService;

	@ApiOperation(value = "Creates a new ClassEntity instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public ClassEntity createClassEntity(@RequestBody ClassEntity classEntity) {
		LOGGER.debug("Create ClassEntity with information: {}" , classEntity);

		classEntity = classEntityService.create(classEntity);
		LOGGER.debug("Created ClassEntity with information: {}" , classEntity);

	    return classEntity;
	}


    @ApiOperation(value = "Returns the ClassEntity instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ClassEntity getClassEntity(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting ClassEntity with id: {}" , id);

        ClassEntity foundClassEntity = classEntityService.getById(id);
        LOGGER.debug("ClassEntity details with id: {}" , foundClassEntity);

        return foundClassEntity;
    }

    @ApiOperation(value = "Updates the ClassEntity instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ClassEntity editClassEntity(@PathVariable("id") Integer id, @RequestBody ClassEntity classEntity) throws EntityNotFoundException {
        LOGGER.debug("Editing ClassEntity with id: {}" , classEntity.getPk());

        classEntity.setPk(id);
        classEntity = classEntityService.update(classEntity);
        LOGGER.debug("ClassEntity details with id: {}" , classEntity);

        return classEntity;
    }

    @ApiOperation(value = "Deletes the ClassEntity instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteClassEntity(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting ClassEntity with id: {}" , id);

        ClassEntity deletedClassEntity = classEntityService.delete(id);

        return deletedClassEntity != null;
    }

    @RequestMapping(value = "/code-practiceElgibilityFk", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching ClassEntity with given unique key values.")
    public ClassEntity getByCodeAndPracticeElgibilityFk(@RequestParam("code") String code, @RequestParam("practiceElgibilityFk") Integer practiceElgibilityFk) {
        LOGGER.debug("Getting ClassEntity with uniques key CodeAndPracticeElgibilityFk");
        return classEntityService.getByCodeAndPracticeElgibilityFk(code, practiceElgibilityFk);
    }

    /**
     * @deprecated Use {@link #findClassEntities(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of ClassEntity instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ClassEntity> searchClassEntitiesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering ClassEntities list");
        return classEntityService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of ClassEntity instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ClassEntity> findClassEntities(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering ClassEntities list");
        return classEntityService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of ClassEntity instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ClassEntity> filterClassEntities(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering ClassEntities list");
        return classEntityService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportClassEntities(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return classEntityService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of ClassEntity instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countClassEntities( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting ClassEntities");
		return classEntityService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getClassEntityAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return classEntityService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/classpraticegroups", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the classpraticegroups instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Classpraticegroup> findAssociatedClasspraticegroups(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated classpraticegroups");
        return classEntityService.findAssociatedClasspraticegroups(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/practiceinelgibilityreasons", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the practiceinelgibilityreasons instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Practiceinelgibilityreason> findAssociatedPracticeinelgibilityreasons(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated practiceinelgibilityreasons");
        return classEntityService.findAssociatedPracticeinelgibilityreasons(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ClassEntityService instance
	 */
	protected void setClassEntityService(ClassEntityService service) {
		this.classEntityService = service;
	}

}

