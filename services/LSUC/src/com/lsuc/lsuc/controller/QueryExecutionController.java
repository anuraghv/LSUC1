/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/

package com.lsuc.lsuc.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.HashMap;
import java.util.Map;

import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.IntegerWrapper;
import com.wavemaker.runtime.data.dao.query.WMQueryExecutor;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.lsuc.lsuc.service.LSUCQueryExecutorService;
import com.lsuc.lsuc.models.query.*;

@RestController(value = "LSUC.QueryExecutionController")
@RequestMapping("/LSUC/queryExecutor")
@Api(value = "QueryExecutionController", description = "controller class for query execution")
public class QueryExecutionController {

    private static final Logger LOGGER = LoggerFactory.getLogger(QueryExecutionController.class);

    @Autowired
    private LSUCQueryExecutorService queryService;

    @RequestMapping(value = "/queries/updateStatus", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Update the Status after approving/rejecting a request")
    public IntegerWrapper executeUpdateStatus(@Valid @RequestBody UpdateStatusRequest updateStatusRequest) {
        LOGGER.debug("Executing named query: updateStatus");
        Integer _result = queryService.executeUpdateStatus(updateStatusRequest);
        LOGGER.debug("got the result for named query: updateStatus, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/approveEditRecord", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Approve the edit LicenseeClassPracticeGroup based on the request PK")
    public IntegerWrapper executeApproveEditRecord(@Valid @RequestBody ApproveEditRecordRequest approveEditRecordRequest) {
        LOGGER.debug("Executing named query: approveEditRecord");
        Integer _result = queryService.executeApproveEditRecord(approveEditRecordRequest);
        LOGGER.debug("got the result for named query: approveEditRecord, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/approvedNewRecord", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Query to Insert a New record into LicenseeClassPracticeGroup on approval")
    public IntegerWrapper executeApprovedNewRecord(@Valid @RequestBody ApprovedNewRecordRequest approvedNewRecordRequest) {
        LOGGER.debug("Executing named query: approvedNewRecord");
        Integer _result = queryService.executeApprovedNewRecord(approvedNewRecordRequest);
        LOGGER.debug("got the result for named query: approvedNewRecord, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/getStatusChangeDetails", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get Status Change Details Based on PersonID")
    public Page<GetStatusChangeDetailsResponse> executeGetStatusChangeDetails(@RequestParam(value = "personID", required = false) Integer personId, Pageable pageable) {
        LOGGER.debug("Executing named query: getStatusChangeDetails");
        Page<GetStatusChangeDetailsResponse> _result = queryService.executeGetStatusChangeDetails(personId, pageable);
        LOGGER.debug("got the result for named query: getStatusChangeDetails, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query getStatusChangeDetails")
    @RequestMapping(value = "/queries/getStatusChangeDetails/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetStatusChangeDetails(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "personID", required = false) Integer personId, Pageable pageable) {
        LOGGER.debug("Exporting named query: getStatusChangeDetails");

        return queryService.exportGetStatusChangeDetails(exportType, personId, pageable);
    }

    @RequestMapping(value = "/queries/expirationStatus", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Shows details of all Licensees which have LicenseeClassPracticeGroup(s) with Effective_To in the Input date range")
    public Page<ExpirationStatusResponse> executeExpirationStatus(Pageable pageable) {
        LOGGER.debug("Executing named query: expirationStatus");
        Page<ExpirationStatusResponse> _result = queryService.executeExpirationStatus(pageable);
        LOGGER.debug("got the result for named query: expirationStatus, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query expirationStatus")
    @RequestMapping(value = "/queries/expirationStatus/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportExpirationStatus(@PathVariable("exportType") ExportType exportType, Pageable pageable) {
        LOGGER.debug("Exporting named query: expirationStatus");

        return queryService.exportExpirationStatus(exportType, pageable);
    }

}


