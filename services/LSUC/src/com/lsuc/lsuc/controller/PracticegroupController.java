/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.lsuc.lsuc.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.lsuc.lsuc.Classpraticegroup;
import com.lsuc.lsuc.Practicegroup;
import com.lsuc.lsuc.service.PracticegroupService;


/**
 * Controller object for domain model class Practicegroup.
 * @see Practicegroup
 */
@RestController("LSUC.PracticegroupController")
@Api(value = "PracticegroupController", description = "Exposes APIs to work with Practicegroup resource.")
@RequestMapping("/LSUC/Practicegroup")
public class PracticegroupController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PracticegroupController.class);

    @Autowired
	@Qualifier("LSUC.PracticegroupService")
	private PracticegroupService practicegroupService;

	@ApiOperation(value = "Creates a new Practicegroup instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Practicegroup createPracticegroup(@RequestBody Practicegroup practicegroup) {
		LOGGER.debug("Create Practicegroup with information: {}" , practicegroup);

		practicegroup = practicegroupService.create(practicegroup);
		LOGGER.debug("Created Practicegroup with information: {}" , practicegroup);

	    return practicegroup;
	}


    @ApiOperation(value = "Returns the Practicegroup instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Practicegroup getPracticegroup(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Practicegroup with id: {}" , id);

        Practicegroup foundPracticegroup = practicegroupService.getById(id);
        LOGGER.debug("Practicegroup details with id: {}" , foundPracticegroup);

        return foundPracticegroup;
    }

    @ApiOperation(value = "Updates the Practicegroup instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Practicegroup editPracticegroup(@PathVariable("id") Integer id, @RequestBody Practicegroup practicegroup) throws EntityNotFoundException {
        LOGGER.debug("Editing Practicegroup with id: {}" , practicegroup.getPk());

        practicegroup.setPk(id);
        practicegroup = practicegroupService.update(practicegroup);
        LOGGER.debug("Practicegroup details with id: {}" , practicegroup);

        return practicegroup;
    }

    @ApiOperation(value = "Deletes the Practicegroup instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deletePracticegroup(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Practicegroup with id: {}" , id);

        Practicegroup deletedPracticegroup = practicegroupService.delete(id);

        return deletedPracticegroup != null;
    }

    @RequestMapping(value = "/code-practiceEligibilityFk", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching Practicegroup with given unique key values.")
    public Practicegroup getByCodeAndPracticeEligibilityFk(@RequestParam("code") String code, @RequestParam("practiceEligibilityFk") Integer practiceEligibilityFk) {
        LOGGER.debug("Getting Practicegroup with uniques key CodeAndPracticeEligibilityFk");
        return practicegroupService.getByCodeAndPracticeEligibilityFk(code, practiceEligibilityFk);
    }

    /**
     * @deprecated Use {@link #findPracticegroups(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Practicegroup instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Practicegroup> searchPracticegroupsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Practicegroups list");
        return practicegroupService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Practicegroup instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Practicegroup> findPracticegroups(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Practicegroups list");
        return practicegroupService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Practicegroup instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Practicegroup> filterPracticegroups(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Practicegroups list");
        return practicegroupService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportPracticegroups(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return practicegroupService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Practicegroup instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countPracticegroups( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Practicegroups");
		return practicegroupService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getPracticegroupAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return practicegroupService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/classpraticegroups", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the classpraticegroups instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Classpraticegroup> findAssociatedClasspraticegroups(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated classpraticegroups");
        return practicegroupService.findAssociatedClasspraticegroups(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PracticegroupService instance
	 */
	protected void setPracticegroupService(PracticegroupService service) {
		this.practicegroupService = service;
	}

}

