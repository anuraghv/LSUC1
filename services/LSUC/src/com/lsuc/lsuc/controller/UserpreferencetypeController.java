/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.lsuc.lsuc.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.lsuc.lsuc.Userpreference;
import com.lsuc.lsuc.Userpreferencetype;
import com.lsuc.lsuc.service.UserpreferencetypeService;


/**
 * Controller object for domain model class Userpreferencetype.
 * @see Userpreferencetype
 */
@RestController("LSUC.UserpreferencetypeController")
@Api(value = "UserpreferencetypeController", description = "Exposes APIs to work with Userpreferencetype resource.")
@RequestMapping("/LSUC/Userpreferencetype")
public class UserpreferencetypeController {

    private static final Logger LOGGER = LoggerFactory.getLogger(UserpreferencetypeController.class);

    @Autowired
	@Qualifier("LSUC.UserpreferencetypeService")
	private UserpreferencetypeService userpreferencetypeService;

	@ApiOperation(value = "Creates a new Userpreferencetype instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Userpreferencetype createUserpreferencetype(@RequestBody Userpreferencetype userpreferencetype) {
		LOGGER.debug("Create Userpreferencetype with information: {}" , userpreferencetype);

		userpreferencetype = userpreferencetypeService.create(userpreferencetype);
		LOGGER.debug("Created Userpreferencetype with information: {}" , userpreferencetype);

	    return userpreferencetype;
	}


    @ApiOperation(value = "Returns the Userpreferencetype instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Userpreferencetype getUserpreferencetype(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Userpreferencetype with id: {}" , id);

        Userpreferencetype foundUserpreferencetype = userpreferencetypeService.getById(id);
        LOGGER.debug("Userpreferencetype details with id: {}" , foundUserpreferencetype);

        return foundUserpreferencetype;
    }

    @ApiOperation(value = "Updates the Userpreferencetype instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Userpreferencetype editUserpreferencetype(@PathVariable("id") Integer id, @RequestBody Userpreferencetype userpreferencetype) throws EntityNotFoundException {
        LOGGER.debug("Editing Userpreferencetype with id: {}" , userpreferencetype.getPk());

        userpreferencetype.setPk(id);
        userpreferencetype = userpreferencetypeService.update(userpreferencetype);
        LOGGER.debug("Userpreferencetype details with id: {}" , userpreferencetype);

        return userpreferencetype;
    }

    @ApiOperation(value = "Deletes the Userpreferencetype instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteUserpreferencetype(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Userpreferencetype with id: {}" , id);

        Userpreferencetype deletedUserpreferencetype = userpreferencetypeService.delete(id);

        return deletedUserpreferencetype != null;
    }

    @RequestMapping(value = "/code/{code}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching Userpreferencetype with given unique key values.")
    public Userpreferencetype getByCode(@PathVariable("code") String code) {
        LOGGER.debug("Getting Userpreferencetype with uniques key Code");
        return userpreferencetypeService.getByCode(code);
    }

    /**
     * @deprecated Use {@link #findUserpreferencetypes(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Userpreferencetype instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Userpreferencetype> searchUserpreferencetypesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Userpreferencetypes list");
        return userpreferencetypeService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Userpreferencetype instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Userpreferencetype> findUserpreferencetypes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Userpreferencetypes list");
        return userpreferencetypeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Userpreferencetype instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Userpreferencetype> filterUserpreferencetypes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Userpreferencetypes list");
        return userpreferencetypeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportUserpreferencetypes(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return userpreferencetypeService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Userpreferencetype instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countUserpreferencetypes( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Userpreferencetypes");
		return userpreferencetypeService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getUserpreferencetypeAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return userpreferencetypeService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/userpreferences", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the userpreferences instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Userpreference> findAssociatedUserpreferences(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated userpreferences");
        return userpreferencetypeService.findAssociatedUserpreferences(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service UserpreferencetypeService instance
	 */
	protected void setUserpreferencetypeService(UserpreferencetypeService service) {
		this.userpreferencetypeService = service;
	}

}

