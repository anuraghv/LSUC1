/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.lsuc.lsuc.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.lsuc.lsuc.Lawyer;
import com.lsuc.lsuc.service.LawyerService;


/**
 * Controller object for domain model class Lawyer.
 * @see Lawyer
 */
@RestController("LSUC.LawyerController")
@Api(value = "LawyerController", description = "Exposes APIs to work with Lawyer resource.")
@RequestMapping("/LSUC/Lawyer")
public class LawyerController {

    private static final Logger LOGGER = LoggerFactory.getLogger(LawyerController.class);

    @Autowired
	@Qualifier("LSUC.LawyerService")
	private LawyerService lawyerService;

	@ApiOperation(value = "Creates a new Lawyer instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Lawyer createLawyer(@RequestBody Lawyer lawyer) {
		LOGGER.debug("Create Lawyer with information: {}" , lawyer);

		lawyer = lawyerService.create(lawyer);
		LOGGER.debug("Created Lawyer with information: {}" , lawyer);

	    return lawyer;
	}


    @ApiOperation(value = "Returns the Lawyer instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Lawyer getLawyer(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Lawyer with id: {}" , id);

        Lawyer foundLawyer = lawyerService.getById(id);
        LOGGER.debug("Lawyer details with id: {}" , foundLawyer);

        return foundLawyer;
    }

    @ApiOperation(value = "Updates the Lawyer instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Lawyer editLawyer(@PathVariable("id") Integer id, @RequestBody Lawyer lawyer) throws EntityNotFoundException {
        LOGGER.debug("Editing Lawyer with id: {}" , lawyer.getPk());

        lawyer.setPk(id);
        lawyer = lawyerService.update(lawyer);
        LOGGER.debug("Lawyer details with id: {}" , lawyer);

        return lawyer;
    }

    @ApiOperation(value = "Deletes the Lawyer instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteLawyer(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Lawyer with id: {}" , id);

        Lawyer deletedLawyer = lawyerService.delete(id);

        return deletedLawyer != null;
    }

    @RequestMapping(value = "/licenseeFk/{licenseeFk}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching Lawyer with given unique key values.")
    public Lawyer getByLicenseeFk(@PathVariable("licenseeFk") Integer licenseeFk) {
        LOGGER.debug("Getting Lawyer with uniques key LicenseeFk");
        return lawyerService.getByLicenseeFk(licenseeFk);
    }

    /**
     * @deprecated Use {@link #findLawyers(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Lawyer instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Lawyer> searchLawyersByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Lawyers list");
        return lawyerService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Lawyer instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Lawyer> findLawyers(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Lawyers list");
        return lawyerService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Lawyer instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Lawyer> filterLawyers(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Lawyers list");
        return lawyerService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportLawyers(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return lawyerService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Lawyer instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countLawyers( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Lawyers");
		return lawyerService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getLawyerAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return lawyerService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service LawyerService instance
	 */
	protected void setLawyerService(LawyerService service) {
		this.lawyerService = service;
	}

}

