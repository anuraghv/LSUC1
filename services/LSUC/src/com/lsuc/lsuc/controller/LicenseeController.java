/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.lsuc.lsuc.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.lsuc.lsuc.Licensee;
import com.lsuc.lsuc.Licenseeclasspracticegroup;
import com.lsuc.lsuc.LicenseeclasspracticegroupApprovals;
import com.lsuc.lsuc.Licenseeinsurance;
import com.lsuc.lsuc.Licenseepersonlanguagepurpose;
import com.lsuc.lsuc.Licenseephotoidcard;
import com.lsuc.lsuc.service.LicenseeService;


/**
 * Controller object for domain model class Licensee.
 * @see Licensee
 */
@RestController("LSUC.LicenseeController")
@Api(value = "LicenseeController", description = "Exposes APIs to work with Licensee resource.")
@RequestMapping("/LSUC/Licensee")
public class LicenseeController {

    private static final Logger LOGGER = LoggerFactory.getLogger(LicenseeController.class);

    @Autowired
	@Qualifier("LSUC.LicenseeService")
	private LicenseeService licenseeService;

	@ApiOperation(value = "Creates a new Licensee instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Licensee createLicensee(@RequestBody Licensee licensee) {
		LOGGER.debug("Create Licensee with information: {}" , licensee);

		licensee = licenseeService.create(licensee);
		LOGGER.debug("Created Licensee with information: {}" , licensee);

	    return licensee;
	}


    @ApiOperation(value = "Returns the Licensee instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Licensee getLicensee(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Licensee with id: {}" , id);

        Licensee foundLicensee = licenseeService.getById(id);
        LOGGER.debug("Licensee details with id: {}" , foundLicensee);

        return foundLicensee;
    }

    @ApiOperation(value = "Updates the Licensee instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Licensee editLicensee(@PathVariable("id") Integer id, @RequestBody Licensee licensee) throws EntityNotFoundException {
        LOGGER.debug("Editing Licensee with id: {}" , licensee.getPk());

        licensee.setPk(id);
        licensee = licenseeService.update(licensee);
        LOGGER.debug("Licensee details with id: {}" , licensee);

        return licensee;
    }

    @ApiOperation(value = "Deletes the Licensee instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteLicensee(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Licensee with id: {}" , id);

        Licensee deletedLicensee = licenseeService.delete(id);

        return deletedLicensee != null;
    }

    @RequestMapping(value = "/licenseeNumber/{licenseeNumber}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching Licensee with given unique key values.")
    public Licensee getByLicenseeNumber(@PathVariable("licenseeNumber") String licenseeNumber) {
        LOGGER.debug("Getting Licensee with uniques key LicenseeNumber");
        return licenseeService.getByLicenseeNumber(licenseeNumber);
    }

    @RequestMapping(value = "/personFk-licenceTypeFk", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching Licensee with given unique key values.")
    public Licensee getByPersonFkAndLicenceTypeFk(@RequestParam("personFk") Integer personFk, @RequestParam("licenceTypeFk") Integer licenceTypeFk) {
        LOGGER.debug("Getting Licensee with uniques key PersonFkAndLicenceTypeFk");
        return licenseeService.getByPersonFkAndLicenceTypeFk(personFk, licenceTypeFk);
    }

    /**
     * @deprecated Use {@link #findLicensees(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Licensee instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Licensee> searchLicenseesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Licensees list");
        return licenseeService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Licensee instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Licensee> findLicensees(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Licensees list");
        return licenseeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Licensee instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Licensee> filterLicensees(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Licensees list");
        return licenseeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportLicensees(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return licenseeService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Licensee instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countLicensees( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Licensees");
		return licenseeService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getLicenseeAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return licenseeService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/licenseeclasspracticegroupApprovalses", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the licenseeclasspracticegroupApprovalses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<LicenseeclasspracticegroupApprovals> findAssociatedLicenseeclasspracticegroupApprovalses(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated licenseeclasspracticegroupApprovalses");
        return licenseeService.findAssociatedLicenseeclasspracticegroupApprovalses(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/licenseephotoidcardsForLicenseeFkCertified", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the licenseephotoidcardsForLicenseeFkCertified instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Licenseephotoidcard> findAssociatedLicenseephotoidcardsForLicenseeFkCertified(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated licenseephotoidcardsForLicenseeFkCertified");
        return licenseeService.findAssociatedLicenseephotoidcardsForLicenseeFkCertified(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/licenseephotoidcardsForLicenseeFk", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the licenseephotoidcardsForLicenseeFk instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Licenseephotoidcard> findAssociatedLicenseephotoidcardsForLicenseeFk(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated licenseephotoidcardsForLicenseeFk");
        return licenseeService.findAssociatedLicenseephotoidcardsForLicenseeFk(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/licenseepersonlanguagepurposes", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the licenseepersonlanguagepurposes instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Licenseepersonlanguagepurpose> findAssociatedLicenseepersonlanguagepurposes(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated licenseepersonlanguagepurposes");
        return licenseeService.findAssociatedLicenseepersonlanguagepurposes(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/licenseeinsurances", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the licenseeinsurances instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Licenseeinsurance> findAssociatedLicenseeinsurances(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated licenseeinsurances");
        return licenseeService.findAssociatedLicenseeinsurances(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/licenseeclasspracticegroups", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the licenseeclasspracticegroups instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Licenseeclasspracticegroup> findAssociatedLicenseeclasspracticegroups(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated licenseeclasspracticegroups");
        return licenseeService.findAssociatedLicenseeclasspracticegroups(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service LicenseeService instance
	 */
	protected void setLicenseeService(LicenseeService service) {
		this.licenseeService = service;
	}

}

