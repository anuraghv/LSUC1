/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.lsuc.lsuc.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.lsuc.lsuc.Businessemailcontact;
import com.lsuc.lsuc.Emailpurpose;
import com.lsuc.lsuc.Personemailcontact;
import com.lsuc.lsuc.service.EmailpurposeService;


/**
 * Controller object for domain model class Emailpurpose.
 * @see Emailpurpose
 */
@RestController("LSUC.EmailpurposeController")
@Api(value = "EmailpurposeController", description = "Exposes APIs to work with Emailpurpose resource.")
@RequestMapping("/LSUC/Emailpurpose")
public class EmailpurposeController {

    private static final Logger LOGGER = LoggerFactory.getLogger(EmailpurposeController.class);

    @Autowired
	@Qualifier("LSUC.EmailpurposeService")
	private EmailpurposeService emailpurposeService;

	@ApiOperation(value = "Creates a new Emailpurpose instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Emailpurpose createEmailpurpose(@RequestBody Emailpurpose emailpurpose) {
		LOGGER.debug("Create Emailpurpose with information: {}" , emailpurpose);

		emailpurpose = emailpurposeService.create(emailpurpose);
		LOGGER.debug("Created Emailpurpose with information: {}" , emailpurpose);

	    return emailpurpose;
	}


    @ApiOperation(value = "Returns the Emailpurpose instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Emailpurpose getEmailpurpose(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Emailpurpose with id: {}" , id);

        Emailpurpose foundEmailpurpose = emailpurposeService.getById(id);
        LOGGER.debug("Emailpurpose details with id: {}" , foundEmailpurpose);

        return foundEmailpurpose;
    }

    @ApiOperation(value = "Updates the Emailpurpose instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Emailpurpose editEmailpurpose(@PathVariable("id") Integer id, @RequestBody Emailpurpose emailpurpose) throws EntityNotFoundException {
        LOGGER.debug("Editing Emailpurpose with id: {}" , emailpurpose.getPk());

        emailpurpose.setPk(id);
        emailpurpose = emailpurposeService.update(emailpurpose);
        LOGGER.debug("Emailpurpose details with id: {}" , emailpurpose);

        return emailpurpose;
    }

    @ApiOperation(value = "Deletes the Emailpurpose instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteEmailpurpose(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Emailpurpose with id: {}" , id);

        Emailpurpose deletedEmailpurpose = emailpurposeService.delete(id);

        return deletedEmailpurpose != null;
    }

    @RequestMapping(value = "/code/{code}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching Emailpurpose with given unique key values.")
    public Emailpurpose getByCode(@PathVariable("code") String code) {
        LOGGER.debug("Getting Emailpurpose with uniques key Code");
        return emailpurposeService.getByCode(code);
    }

    /**
     * @deprecated Use {@link #findEmailpurposes(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Emailpurpose instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Emailpurpose> searchEmailpurposesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Emailpurposes list");
        return emailpurposeService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Emailpurpose instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Emailpurpose> findEmailpurposes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Emailpurposes list");
        return emailpurposeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Emailpurpose instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Emailpurpose> filterEmailpurposes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Emailpurposes list");
        return emailpurposeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportEmailpurposes(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return emailpurposeService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Emailpurpose instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countEmailpurposes( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Emailpurposes");
		return emailpurposeService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getEmailpurposeAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return emailpurposeService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/personemailcontacts", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the personemailcontacts instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Personemailcontact> findAssociatedPersonemailcontacts(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated personemailcontacts");
        return emailpurposeService.findAssociatedPersonemailcontacts(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/businessemailcontacts", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the businessemailcontacts instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Businessemailcontact> findAssociatedBusinessemailcontacts(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated businessemailcontacts");
        return emailpurposeService.findAssociatedBusinessemailcontacts(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service EmailpurposeService instance
	 */
	protected void setEmailpurposeService(EmailpurposeService service) {
		this.emailpurposeService = service;
	}

}

