/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.lsuc.lsuc.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.lsuc.lsuc.Person;
import com.lsuc.lsuc.Suffix;
import com.lsuc.lsuc.service.SuffixService;


/**
 * Controller object for domain model class Suffix.
 * @see Suffix
 */
@RestController("LSUC.SuffixController")
@Api(value = "SuffixController", description = "Exposes APIs to work with Suffix resource.")
@RequestMapping("/LSUC/Suffix")
public class SuffixController {

    private static final Logger LOGGER = LoggerFactory.getLogger(SuffixController.class);

    @Autowired
	@Qualifier("LSUC.SuffixService")
	private SuffixService suffixService;

	@ApiOperation(value = "Creates a new Suffix instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Suffix createSuffix(@RequestBody Suffix suffix) {
		LOGGER.debug("Create Suffix with information: {}" , suffix);

		suffix = suffixService.create(suffix);
		LOGGER.debug("Created Suffix with information: {}" , suffix);

	    return suffix;
	}


    @ApiOperation(value = "Returns the Suffix instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Suffix getSuffix(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Suffix with id: {}" , id);

        Suffix foundSuffix = suffixService.getById(id);
        LOGGER.debug("Suffix details with id: {}" , foundSuffix);

        return foundSuffix;
    }

    @ApiOperation(value = "Updates the Suffix instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Suffix editSuffix(@PathVariable("id") Integer id, @RequestBody Suffix suffix) throws EntityNotFoundException {
        LOGGER.debug("Editing Suffix with id: {}" , suffix.getPk());

        suffix.setPk(id);
        suffix = suffixService.update(suffix);
        LOGGER.debug("Suffix details with id: {}" , suffix);

        return suffix;
    }

    @ApiOperation(value = "Deletes the Suffix instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteSuffix(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Suffix with id: {}" , id);

        Suffix deletedSuffix = suffixService.delete(id);

        return deletedSuffix != null;
    }

    @RequestMapping(value = "/code/{code}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching Suffix with given unique key values.")
    public Suffix getByCode(@PathVariable("code") String code) {
        LOGGER.debug("Getting Suffix with uniques key Code");
        return suffixService.getByCode(code);
    }

    /**
     * @deprecated Use {@link #findSuffixes(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Suffix instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Suffix> searchSuffixesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Suffixes list");
        return suffixService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Suffix instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Suffix> findSuffixes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Suffixes list");
        return suffixService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Suffix instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Suffix> filterSuffixes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Suffixes list");
        return suffixService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportSuffixes(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return suffixService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Suffix instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countSuffixes( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Suffixes");
		return suffixService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getSuffixAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return suffixService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/persons", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the persons instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Person> findAssociatedPersons(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated persons");
        return suffixService.findAssociatedPersons(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SuffixService instance
	 */
	protected void setSuffixService(SuffixService service) {
		this.suffixService = service;
	}

}

