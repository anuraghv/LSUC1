/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.lsuc.lsuc.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.lsuc.lsuc.Languagepurpose;
import com.lsuc.lsuc.Licenseepersonlanguagepurpose;
import com.lsuc.lsuc.service.LanguagepurposeService;


/**
 * Controller object for domain model class Languagepurpose.
 * @see Languagepurpose
 */
@RestController("LSUC.LanguagepurposeController")
@Api(value = "LanguagepurposeController", description = "Exposes APIs to work with Languagepurpose resource.")
@RequestMapping("/LSUC/Languagepurpose")
public class LanguagepurposeController {

    private static final Logger LOGGER = LoggerFactory.getLogger(LanguagepurposeController.class);

    @Autowired
	@Qualifier("LSUC.LanguagepurposeService")
	private LanguagepurposeService languagepurposeService;

	@ApiOperation(value = "Creates a new Languagepurpose instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Languagepurpose createLanguagepurpose(@RequestBody Languagepurpose languagepurpose) {
		LOGGER.debug("Create Languagepurpose with information: {}" , languagepurpose);

		languagepurpose = languagepurposeService.create(languagepurpose);
		LOGGER.debug("Created Languagepurpose with information: {}" , languagepurpose);

	    return languagepurpose;
	}


    @ApiOperation(value = "Returns the Languagepurpose instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Languagepurpose getLanguagepurpose(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Languagepurpose with id: {}" , id);

        Languagepurpose foundLanguagepurpose = languagepurposeService.getById(id);
        LOGGER.debug("Languagepurpose details with id: {}" , foundLanguagepurpose);

        return foundLanguagepurpose;
    }

    @ApiOperation(value = "Updates the Languagepurpose instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Languagepurpose editLanguagepurpose(@PathVariable("id") Integer id, @RequestBody Languagepurpose languagepurpose) throws EntityNotFoundException {
        LOGGER.debug("Editing Languagepurpose with id: {}" , languagepurpose.getPk());

        languagepurpose.setPk(id);
        languagepurpose = languagepurposeService.update(languagepurpose);
        LOGGER.debug("Languagepurpose details with id: {}" , languagepurpose);

        return languagepurpose;
    }

    @ApiOperation(value = "Deletes the Languagepurpose instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteLanguagepurpose(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Languagepurpose with id: {}" , id);

        Languagepurpose deletedLanguagepurpose = languagepurposeService.delete(id);

        return deletedLanguagepurpose != null;
    }

    @RequestMapping(value = "/code/{code}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching Languagepurpose with given unique key values.")
    public Languagepurpose getByCode(@PathVariable("code") String code) {
        LOGGER.debug("Getting Languagepurpose with uniques key Code");
        return languagepurposeService.getByCode(code);
    }

    /**
     * @deprecated Use {@link #findLanguagepurposes(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Languagepurpose instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Languagepurpose> searchLanguagepurposesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Languagepurposes list");
        return languagepurposeService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Languagepurpose instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Languagepurpose> findLanguagepurposes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Languagepurposes list");
        return languagepurposeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Languagepurpose instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Languagepurpose> filterLanguagepurposes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Languagepurposes list");
        return languagepurposeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportLanguagepurposes(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return languagepurposeService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Languagepurpose instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countLanguagepurposes( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Languagepurposes");
		return languagepurposeService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getLanguagepurposeAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return languagepurposeService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/licenseepersonlanguagepurposes", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the licenseepersonlanguagepurposes instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Licenseepersonlanguagepurpose> findAssociatedLicenseepersonlanguagepurposes(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated licenseepersonlanguagepurposes");
        return languagepurposeService.findAssociatedLicenseepersonlanguagepurposes(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service LanguagepurposeService instance
	 */
	protected void setLanguagepurposeService(LanguagepurposeService service) {
		this.languagepurposeService = service;
	}

}

