/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.lsuc.lsuc.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.lsuc.lsuc.Personphonecontact;
import com.lsuc.lsuc.service.PersonphonecontactService;


/**
 * Controller object for domain model class Personphonecontact.
 * @see Personphonecontact
 */
@RestController("LSUC.PersonphonecontactController")
@Api(value = "PersonphonecontactController", description = "Exposes APIs to work with Personphonecontact resource.")
@RequestMapping("/LSUC/Personphonecontact")
public class PersonphonecontactController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PersonphonecontactController.class);

    @Autowired
	@Qualifier("LSUC.PersonphonecontactService")
	private PersonphonecontactService personphonecontactService;

	@ApiOperation(value = "Creates a new Personphonecontact instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Personphonecontact createPersonphonecontact(@RequestBody Personphonecontact personphonecontact) {
		LOGGER.debug("Create Personphonecontact with information: {}" , personphonecontact);

		personphonecontact = personphonecontactService.create(personphonecontact);
		LOGGER.debug("Created Personphonecontact with information: {}" , personphonecontact);

	    return personphonecontact;
	}


    @ApiOperation(value = "Returns the Personphonecontact instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Personphonecontact getPersonphonecontact(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Personphonecontact with id: {}" , id);

        Personphonecontact foundPersonphonecontact = personphonecontactService.getById(id);
        LOGGER.debug("Personphonecontact details with id: {}" , foundPersonphonecontact);

        return foundPersonphonecontact;
    }

    @ApiOperation(value = "Updates the Personphonecontact instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Personphonecontact editPersonphonecontact(@PathVariable("id") Integer id, @RequestBody Personphonecontact personphonecontact) throws EntityNotFoundException {
        LOGGER.debug("Editing Personphonecontact with id: {}" , personphonecontact.getPk());

        personphonecontact.setPk(id);
        personphonecontact = personphonecontactService.update(personphonecontact);
        LOGGER.debug("Personphonecontact details with id: {}" , personphonecontact);

        return personphonecontact;
    }

    @ApiOperation(value = "Deletes the Personphonecontact instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deletePersonphonecontact(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Personphonecontact with id: {}" , id);

        Personphonecontact deletedPersonphonecontact = personphonecontactService.delete(id);

        return deletedPersonphonecontact != null;
    }

    @RequestMapping(value = "/personFk-phonePurposeFk-phoneTypeFk", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching Personphonecontact with given unique key values.")
    public Personphonecontact getByPersonFkAndPhonePurposeFkAndPhoneTypeFk(@RequestParam("personFk") Integer personFk, @RequestParam("phonePurposeFk") Integer phonePurposeFk, @RequestParam("phoneTypeFk") Integer phoneTypeFk) {
        LOGGER.debug("Getting Personphonecontact with uniques key PersonFkAndPhonePurposeFkAndPhoneTypeFk");
        return personphonecontactService.getByPersonFkAndPhonePurposeFkAndPhoneTypeFk(personFk, phonePurposeFk, phoneTypeFk);
    }

    /**
     * @deprecated Use {@link #findPersonphonecontacts(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Personphonecontact instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Personphonecontact> searchPersonphonecontactsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Personphonecontacts list");
        return personphonecontactService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Personphonecontact instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Personphonecontact> findPersonphonecontacts(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Personphonecontacts list");
        return personphonecontactService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Personphonecontact instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Personphonecontact> filterPersonphonecontacts(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Personphonecontacts list");
        return personphonecontactService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportPersonphonecontacts(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return personphonecontactService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Personphonecontact instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countPersonphonecontacts( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Personphonecontacts");
		return personphonecontactService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getPersonphonecontactAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return personphonecontactService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PersonphonecontactService instance
	 */
	protected void setPersonphonecontactService(PersonphonecontactService service) {
		this.personphonecontactService = service;
	}

}

