/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.lsuc.lsuc.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.lsuc.lsuc.Businesssocialmediacontact;
import com.lsuc.lsuc.Personsocialmediacontact;
import com.lsuc.lsuc.Socialmediatype;
import com.lsuc.lsuc.service.SocialmediatypeService;


/**
 * Controller object for domain model class Socialmediatype.
 * @see Socialmediatype
 */
@RestController("LSUC.SocialmediatypeController")
@Api(value = "SocialmediatypeController", description = "Exposes APIs to work with Socialmediatype resource.")
@RequestMapping("/LSUC/Socialmediatype")
public class SocialmediatypeController {

    private static final Logger LOGGER = LoggerFactory.getLogger(SocialmediatypeController.class);

    @Autowired
	@Qualifier("LSUC.SocialmediatypeService")
	private SocialmediatypeService socialmediatypeService;

	@ApiOperation(value = "Creates a new Socialmediatype instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Socialmediatype createSocialmediatype(@RequestBody Socialmediatype socialmediatype) {
		LOGGER.debug("Create Socialmediatype with information: {}" , socialmediatype);

		socialmediatype = socialmediatypeService.create(socialmediatype);
		LOGGER.debug("Created Socialmediatype with information: {}" , socialmediatype);

	    return socialmediatype;
	}


    @ApiOperation(value = "Returns the Socialmediatype instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Socialmediatype getSocialmediatype(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Socialmediatype with id: {}" , id);

        Socialmediatype foundSocialmediatype = socialmediatypeService.getById(id);
        LOGGER.debug("Socialmediatype details with id: {}" , foundSocialmediatype);

        return foundSocialmediatype;
    }

    @ApiOperation(value = "Updates the Socialmediatype instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Socialmediatype editSocialmediatype(@PathVariable("id") Integer id, @RequestBody Socialmediatype socialmediatype) throws EntityNotFoundException {
        LOGGER.debug("Editing Socialmediatype with id: {}" , socialmediatype.getPk());

        socialmediatype.setPk(id);
        socialmediatype = socialmediatypeService.update(socialmediatype);
        LOGGER.debug("Socialmediatype details with id: {}" , socialmediatype);

        return socialmediatype;
    }

    @ApiOperation(value = "Deletes the Socialmediatype instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteSocialmediatype(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Socialmediatype with id: {}" , id);

        Socialmediatype deletedSocialmediatype = socialmediatypeService.delete(id);

        return deletedSocialmediatype != null;
    }

    @RequestMapping(value = "/code/{code}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching Socialmediatype with given unique key values.")
    public Socialmediatype getByCode(@PathVariable("code") String code) {
        LOGGER.debug("Getting Socialmediatype with uniques key Code");
        return socialmediatypeService.getByCode(code);
    }

    /**
     * @deprecated Use {@link #findSocialmediatypes(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Socialmediatype instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Socialmediatype> searchSocialmediatypesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Socialmediatypes list");
        return socialmediatypeService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Socialmediatype instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Socialmediatype> findSocialmediatypes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Socialmediatypes list");
        return socialmediatypeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Socialmediatype instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Socialmediatype> filterSocialmediatypes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Socialmediatypes list");
        return socialmediatypeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportSocialmediatypes(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return socialmediatypeService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Socialmediatype instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countSocialmediatypes( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Socialmediatypes");
		return socialmediatypeService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getSocialmediatypeAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return socialmediatypeService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/businesssocialmediacontacts", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the businesssocialmediacontacts instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Businesssocialmediacontact> findAssociatedBusinesssocialmediacontacts(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated businesssocialmediacontacts");
        return socialmediatypeService.findAssociatedBusinesssocialmediacontacts(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/personsocialmediacontacts", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the personsocialmediacontacts instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Personsocialmediacontact> findAssociatedPersonsocialmediacontacts(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated personsocialmediacontacts");
        return socialmediatypeService.findAssociatedPersonsocialmediacontacts(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SocialmediatypeService instance
	 */
	protected void setSocialmediatypeService(SocialmediatypeService service) {
		this.socialmediatypeService = service;
	}

}

