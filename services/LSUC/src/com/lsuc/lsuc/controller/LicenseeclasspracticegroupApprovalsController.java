/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.lsuc.lsuc.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.sql.Date;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.lsuc.lsuc.LicenseeclasspracticegroupApprovals;
import com.lsuc.lsuc.service.LicenseeclasspracticegroupApprovalsService;


/**
 * Controller object for domain model class LicenseeclasspracticegroupApprovals.
 * @see LicenseeclasspracticegroupApprovals
 */
@RestController("LSUC.LicenseeclasspracticegroupApprovalsController")
@Api(value = "LicenseeclasspracticegroupApprovalsController", description = "Exposes APIs to work with LicenseeclasspracticegroupApprovals resource.")
@RequestMapping("/LSUC/LicenseeclasspracticegroupApprovals")
public class LicenseeclasspracticegroupApprovalsController {

    private static final Logger LOGGER = LoggerFactory.getLogger(LicenseeclasspracticegroupApprovalsController.class);

    @Autowired
	@Qualifier("LSUC.LicenseeclasspracticegroupApprovalsService")
	private LicenseeclasspracticegroupApprovalsService licenseeclasspracticegroupApprovalsService;

	@ApiOperation(value = "Creates a new LicenseeclasspracticegroupApprovals instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public LicenseeclasspracticegroupApprovals createLicenseeclasspracticegroupApprovals(@RequestBody LicenseeclasspracticegroupApprovals licenseeclasspracticegroupApprovals) {
		LOGGER.debug("Create LicenseeclasspracticegroupApprovals with information: {}" , licenseeclasspracticegroupApprovals);

		licenseeclasspracticegroupApprovals = licenseeclasspracticegroupApprovalsService.create(licenseeclasspracticegroupApprovals);
		LOGGER.debug("Created LicenseeclasspracticegroupApprovals with information: {}" , licenseeclasspracticegroupApprovals);

	    return licenseeclasspracticegroupApprovals;
	}


    @ApiOperation(value = "Returns the LicenseeclasspracticegroupApprovals instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public LicenseeclasspracticegroupApprovals getLicenseeclasspracticegroupApprovals(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting LicenseeclasspracticegroupApprovals with id: {}" , id);

        LicenseeclasspracticegroupApprovals foundLicenseeclasspracticegroupApprovals = licenseeclasspracticegroupApprovalsService.getById(id);
        LOGGER.debug("LicenseeclasspracticegroupApprovals details with id: {}" , foundLicenseeclasspracticegroupApprovals);

        return foundLicenseeclasspracticegroupApprovals;
    }

    @ApiOperation(value = "Updates the LicenseeclasspracticegroupApprovals instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public LicenseeclasspracticegroupApprovals editLicenseeclasspracticegroupApprovals(@PathVariable("id") Integer id, @RequestBody LicenseeclasspracticegroupApprovals licenseeclasspracticegroupApprovals) throws EntityNotFoundException {
        LOGGER.debug("Editing LicenseeclasspracticegroupApprovals with id: {}" , licenseeclasspracticegroupApprovals.getPk());

        licenseeclasspracticegroupApprovals.setPk(id);
        licenseeclasspracticegroupApprovals = licenseeclasspracticegroupApprovalsService.update(licenseeclasspracticegroupApprovals);
        LOGGER.debug("LicenseeclasspracticegroupApprovals details with id: {}" , licenseeclasspracticegroupApprovals);

        return licenseeclasspracticegroupApprovals;
    }

    @ApiOperation(value = "Deletes the LicenseeclasspracticegroupApprovals instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteLicenseeclasspracticegroupApprovals(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting LicenseeclasspracticegroupApprovals with id: {}" , id);

        LicenseeclasspracticegroupApprovals deletedLicenseeclasspracticegroupApprovals = licenseeclasspracticegroupApprovalsService.delete(id);

        return deletedLicenseeclasspracticegroupApprovals != null;
    }

    @RequestMapping(value = "/licenseeFk-newClassPracticeGroupFk-newEffectiveFromDate-newEffectiveToDate", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching LicenseeclasspracticegroupApprovals with given unique key values.")
    public LicenseeclasspracticegroupApprovals getByLicenseeFkAndNewClassPracticeGroupFkAndNewEffectiveFromDateAndNewEffectiveToDate(@RequestParam("licenseeFk") Integer licenseeFk, @RequestParam("newClassPracticeGroupFk") Integer newClassPracticeGroupFk, @RequestParam("newEffectiveFromDate") Date newEffectiveFromDate, @RequestParam("newEffectiveToDate") Date newEffectiveToDate) {
        LOGGER.debug("Getting LicenseeclasspracticegroupApprovals with uniques key LicenseeFkAndNewClassPracticeGroupFkAndNewEffectiveFromDateAndNewEffectiveToDate");
        return licenseeclasspracticegroupApprovalsService.getByLicenseeFkAndNewClassPracticeGroupFkAndNewEffectiveFromDateAndNewEffectiveToDate(licenseeFk, newClassPracticeGroupFk, newEffectiveFromDate, newEffectiveToDate);
    }

    /**
     * @deprecated Use {@link #findLicenseeclasspracticegroupApprovals(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of LicenseeclasspracticegroupApprovals instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<LicenseeclasspracticegroupApprovals> searchLicenseeclasspracticegroupApprovalsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering LicenseeclasspracticegroupApprovals list");
        return licenseeclasspracticegroupApprovalsService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of LicenseeclasspracticegroupApprovals instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<LicenseeclasspracticegroupApprovals> findLicenseeclasspracticegroupApprovals(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering LicenseeclasspracticegroupApprovals list");
        return licenseeclasspracticegroupApprovalsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of LicenseeclasspracticegroupApprovals instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<LicenseeclasspracticegroupApprovals> filterLicenseeclasspracticegroupApprovals(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering LicenseeclasspracticegroupApprovals list");
        return licenseeclasspracticegroupApprovalsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportLicenseeclasspracticegroupApprovals(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return licenseeclasspracticegroupApprovalsService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of LicenseeclasspracticegroupApprovals instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countLicenseeclasspracticegroupApprovals( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting LicenseeclasspracticegroupApprovals");
		return licenseeclasspracticegroupApprovalsService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getLicenseeclasspracticegroupApprovalsAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return licenseeclasspracticegroupApprovalsService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service LicenseeclasspracticegroupApprovalsService instance
	 */
	protected void setLicenseeclasspracticegroupApprovalsService(LicenseeclasspracticegroupApprovalsService service) {
		this.licenseeclasspracticegroupApprovalsService = service;
	}

}

