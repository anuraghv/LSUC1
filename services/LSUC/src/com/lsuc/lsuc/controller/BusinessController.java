/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.lsuc.lsuc.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.lsuc.lsuc.Business;
import com.lsuc.lsuc.Businessaddress;
import com.lsuc.lsuc.Businessbusiness;
import com.lsuc.lsuc.Businessemailcontact;
import com.lsuc.lsuc.Businessperson;
import com.lsuc.lsuc.Businessphonecontact;
import com.lsuc.lsuc.Businesssocialmediacontact;
import com.lsuc.lsuc.Licenseeinsurancepolicy;
import com.lsuc.lsuc.Organizationalunit;
import com.lsuc.lsuc.service.BusinessService;


/**
 * Controller object for domain model class Business.
 * @see Business
 */
@RestController("LSUC.BusinessController")
@Api(value = "BusinessController", description = "Exposes APIs to work with Business resource.")
@RequestMapping("/LSUC/Business")
public class BusinessController {

    private static final Logger LOGGER = LoggerFactory.getLogger(BusinessController.class);

    @Autowired
	@Qualifier("LSUC.BusinessService")
	private BusinessService businessService;

	@ApiOperation(value = "Creates a new Business instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Business createBusiness(@RequestBody Business business) {
		LOGGER.debug("Create Business with information: {}" , business);

		business = businessService.create(business);
		LOGGER.debug("Created Business with information: {}" , business);

	    return business;
	}


    @ApiOperation(value = "Returns the Business instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Business getBusiness(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Business with id: {}" , id);

        Business foundBusiness = businessService.getById(id);
        LOGGER.debug("Business details with id: {}" , foundBusiness);

        return foundBusiness;
    }

    @ApiOperation(value = "Updates the Business instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Business editBusiness(@PathVariable("id") Integer id, @RequestBody Business business) throws EntityNotFoundException {
        LOGGER.debug("Editing Business with id: {}" , business.getPk());

        business.setPk(id);
        business = businessService.update(business);
        LOGGER.debug("Business details with id: {}" , business);

        return business;
    }

    @ApiOperation(value = "Deletes the Business instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteBusiness(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Business with id: {}" , id);

        Business deletedBusiness = businessService.delete(id);

        return deletedBusiness != null;
    }

    @RequestMapping(value = "/businessNumber/{businessNumber}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching Business with given unique key values.")
    public Business getByBusinessNumber(@PathVariable("businessNumber") String businessNumber) {
        LOGGER.debug("Getting Business with uniques key BusinessNumber");
        return businessService.getByBusinessNumber(businessNumber);
    }

    /**
     * @deprecated Use {@link #findBusinesses(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Business instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Business> searchBusinessesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Businesses list");
        return businessService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Business instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Business> findBusinesses(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Businesses list");
        return businessService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Business instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Business> filterBusinesses(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Businesses list");
        return businessService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportBusinesses(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return businessService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Business instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countBusinesses( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Businesses");
		return businessService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getBusinessAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return businessService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/businesssocialmediacontacts", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the businesssocialmediacontacts instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Businesssocialmediacontact> findAssociatedBusinesssocialmediacontacts(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated businesssocialmediacontacts");
        return businessService.findAssociatedBusinesssocialmediacontacts(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/businessbusinessesForBusinessFkParent", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the businessbusinessesForBusinessFkParent instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Businessbusiness> findAssociatedBusinessbusinessesForBusinessFkParent(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated businessbusinessesForBusinessFkParent");
        return businessService.findAssociatedBusinessbusinessesForBusinessFkParent(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/businessbusinessesForBusinessFkChild", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the businessbusinessesForBusinessFkChild instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Businessbusiness> findAssociatedBusinessbusinessesForBusinessFkChild(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated businessbusinessesForBusinessFkChild");
        return businessService.findAssociatedBusinessbusinessesForBusinessFkChild(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/businessphonecontacts", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the businessphonecontacts instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Businessphonecontact> findAssociatedBusinessphonecontacts(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated businessphonecontacts");
        return businessService.findAssociatedBusinessphonecontacts(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/businessaddresses", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the businessaddresses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Businessaddress> findAssociatedBusinessaddresses(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated businessaddresses");
        return businessService.findAssociatedBusinessaddresses(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/businesspersons", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the businesspersons instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Businessperson> findAssociatedBusinesspersons(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated businesspersons");
        return businessService.findAssociatedBusinesspersons(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/organizationalunits", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the organizationalunits instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Organizationalunit> findAssociatedOrganizationalunits(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated organizationalunits");
        return businessService.findAssociatedOrganizationalunits(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/businessemailcontacts", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the businessemailcontacts instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Businessemailcontact> findAssociatedBusinessemailcontacts(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated businessemailcontacts");
        return businessService.findAssociatedBusinessemailcontacts(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/licenseeinsurancepoliciesForBusinessFkInsuranceCompany", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the licenseeinsurancepoliciesForBusinessFkInsuranceCompany instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Licenseeinsurancepolicy> findAssociatedLicenseeinsurancepoliciesForBusinessFkInsuranceCompany(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated licenseeinsurancepoliciesForBusinessFkInsuranceCompany");
        return businessService.findAssociatedLicenseeinsurancepoliciesForBusinessFkInsuranceCompany(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/licenseeinsurancepoliciesForBusinessFkInsuranceBroker", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the licenseeinsurancepoliciesForBusinessFkInsuranceBroker instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Licenseeinsurancepolicy> findAssociatedLicenseeinsurancepoliciesForBusinessFkInsuranceBroker(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated licenseeinsurancepoliciesForBusinessFkInsuranceBroker");
        return businessService.findAssociatedLicenseeinsurancepoliciesForBusinessFkInsuranceBroker(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service BusinessService instance
	 */
	protected void setBusinessService(BusinessService service) {
		this.businessService = service;
	}

}

