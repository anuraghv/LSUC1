/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.lsuc.lsuc.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.lsuc.lsuc.Businesspersonrelationship;
import com.lsuc.lsuc.Businesspersonrelationshiptype;
import com.lsuc.lsuc.service.BusinesspersonrelationshiptypeService;


/**
 * Controller object for domain model class Businesspersonrelationshiptype.
 * @see Businesspersonrelationshiptype
 */
@RestController("LSUC.BusinesspersonrelationshiptypeController")
@Api(value = "BusinesspersonrelationshiptypeController", description = "Exposes APIs to work with Businesspersonrelationshiptype resource.")
@RequestMapping("/LSUC/Businesspersonrelationshiptype")
public class BusinesspersonrelationshiptypeController {

    private static final Logger LOGGER = LoggerFactory.getLogger(BusinesspersonrelationshiptypeController.class);

    @Autowired
	@Qualifier("LSUC.BusinesspersonrelationshiptypeService")
	private BusinesspersonrelationshiptypeService businesspersonrelationshiptypeService;

	@ApiOperation(value = "Creates a new Businesspersonrelationshiptype instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Businesspersonrelationshiptype createBusinesspersonrelationshiptype(@RequestBody Businesspersonrelationshiptype businesspersonrelationshiptype) {
		LOGGER.debug("Create Businesspersonrelationshiptype with information: {}" , businesspersonrelationshiptype);

		businesspersonrelationshiptype = businesspersonrelationshiptypeService.create(businesspersonrelationshiptype);
		LOGGER.debug("Created Businesspersonrelationshiptype with information: {}" , businesspersonrelationshiptype);

	    return businesspersonrelationshiptype;
	}


    @ApiOperation(value = "Returns the Businesspersonrelationshiptype instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Businesspersonrelationshiptype getBusinesspersonrelationshiptype(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Businesspersonrelationshiptype with id: {}" , id);

        Businesspersonrelationshiptype foundBusinesspersonrelationshiptype = businesspersonrelationshiptypeService.getById(id);
        LOGGER.debug("Businesspersonrelationshiptype details with id: {}" , foundBusinesspersonrelationshiptype);

        return foundBusinesspersonrelationshiptype;
    }

    @ApiOperation(value = "Updates the Businesspersonrelationshiptype instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Businesspersonrelationshiptype editBusinesspersonrelationshiptype(@PathVariable("id") Integer id, @RequestBody Businesspersonrelationshiptype businesspersonrelationshiptype) throws EntityNotFoundException {
        LOGGER.debug("Editing Businesspersonrelationshiptype with id: {}" , businesspersonrelationshiptype.getPk());

        businesspersonrelationshiptype.setPk(id);
        businesspersonrelationshiptype = businesspersonrelationshiptypeService.update(businesspersonrelationshiptype);
        LOGGER.debug("Businesspersonrelationshiptype details with id: {}" , businesspersonrelationshiptype);

        return businesspersonrelationshiptype;
    }

    @ApiOperation(value = "Deletes the Businesspersonrelationshiptype instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteBusinesspersonrelationshiptype(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Businesspersonrelationshiptype with id: {}" , id);

        Businesspersonrelationshiptype deletedBusinesspersonrelationshiptype = businesspersonrelationshiptypeService.delete(id);

        return deletedBusinesspersonrelationshiptype != null;
    }

    @RequestMapping(value = "/code/{code}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching Businesspersonrelationshiptype with given unique key values.")
    public Businesspersonrelationshiptype getByCode(@PathVariable("code") String code) {
        LOGGER.debug("Getting Businesspersonrelationshiptype with uniques key Code");
        return businesspersonrelationshiptypeService.getByCode(code);
    }

    /**
     * @deprecated Use {@link #findBusinesspersonrelationshiptypes(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Businesspersonrelationshiptype instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Businesspersonrelationshiptype> searchBusinesspersonrelationshiptypesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Businesspersonrelationshiptypes list");
        return businesspersonrelationshiptypeService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Businesspersonrelationshiptype instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Businesspersonrelationshiptype> findBusinesspersonrelationshiptypes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Businesspersonrelationshiptypes list");
        return businesspersonrelationshiptypeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Businesspersonrelationshiptype instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Businesspersonrelationshiptype> filterBusinesspersonrelationshiptypes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Businesspersonrelationshiptypes list");
        return businesspersonrelationshiptypeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportBusinesspersonrelationshiptypes(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return businesspersonrelationshiptypeService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Businesspersonrelationshiptype instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countBusinesspersonrelationshiptypes( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Businesspersonrelationshiptypes");
		return businesspersonrelationshiptypeService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getBusinesspersonrelationshiptypeAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return businesspersonrelationshiptypeService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/businesspersonrelationships", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the businesspersonrelationships instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Businesspersonrelationship> findAssociatedBusinesspersonrelationships(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated businesspersonrelationships");
        return businesspersonrelationshiptypeService.findAssociatedBusinesspersonrelationships(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service BusinesspersonrelationshiptypeService instance
	 */
	protected void setBusinesspersonrelationshiptypeService(BusinesspersonrelationshiptypeService service) {
		this.businesspersonrelationshiptypeService = service;
	}

}

